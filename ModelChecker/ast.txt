|-VarDecl 0x102825f00 <test.cpp:1:1, col:23> staVar 'char [100]' static
|-VarDecl 0x102825f70 <line:2:1, col:15> globVar 'int'
| `-IntegerLiteral 0x102825fc8 <col:15> 'int' 0
|-FunctionDecl 0x1028260c0 <line:4:1, line:6:1> increment 'int (int)'
| |-ParmVarDecl 0x102826000 <line:4:15, col:19> value 'int'
| `-CompoundStmt 0x1028261e8 <col:26, line:6:1>
|   `-ReturnStmt 0x1028261c8 <line:5:2, col:11>
|     `-ImplicitCastExpr 0x1028261b0 <col:9, col:11> 'int' <LValueToRValue>
|       `-UnaryOperator 0x102826190 <col:9, col:11> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x102826168 <col:11> 'int' lvalue ParmVar 0x102826000 'value' 'int'
|-FunctionDecl 0x102871fa0 <line:8:1, line:10:1> increment 'void (int &, int)'
| |-ParmVarDecl 0x102871e60 <line:8:16, col:21> value 'int &'
| |-ParmVarDecl 0x102871ed0 <col:28, col:32> steps 'int'
| `-CompoundStmt 0x1028720f0 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x1028720b8 <line:9:2, col:11> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x102872050 <col:2> 'int' lvalue ParmVar 0x102871e60 'value' 'int &'
|     `-ImplicitCastExpr 0x1028720a0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102872078 <col:11> 'int' lvalue ParmVar 0x102871ed0 'steps' 'int'
|-FunctionDecl 0x1028721a0 <line:12:1, col:13> self 'int (int)'
| `-ParmVarDecl 0x102872120 <col:10, col:13> 'int'
|-FunctionDecl 0x1028724b0 <line:14:1, line:47:1> main 'int (int, char **)'
| |-ParmVarDecl 0x102872260 <line:14:10, col:14> argc 'int'
| |-ParmVarDecl 0x1028723a0 <col:20, col:31> argv 'char **':'char **'
