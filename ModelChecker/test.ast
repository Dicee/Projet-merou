TranslationUnitDecl 0x1028254d0 <<invalid sloc>>
|-TypedefDecl 0x102825a10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x102825a70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x102825e30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-VarDecl 0x102825f00 <test.cpp:1:1, col:23> staVar 'char [100]' static
|-VarDecl 0x102825f70 <line:2:1, col:15> globVar 'int'
| `-IntegerLiteral 0x102825fc8 <col:15> 'int' 0
|-FunctionDecl 0x1028260c0 <line:4:1, line:6:1> increment 'int (int)'
| |-ParmVarDecl 0x102826000 <line:4:15, col:19> value 'int'
| `-CompoundStmt 0x1028261e8 <col:26, line:6:1>
|   `-ReturnStmt 0x1028261c8 <line:5:2, col:11>
|     `-ImplicitCastExpr 0x1028261b0 <col:9, col:11> 'int' <LValueToRValue>
|       `-UnaryOperator 0x102826190 <col:9, col:11> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x102826168 <col:11> 'int' lvalue ParmVar 0x102826000 'value' 'int'
|-FunctionDecl 0x1028711a0 <line:8:1, line:10:1> increment 'void (int &, int)'
| |-ParmVarDecl 0x102871060 <line:8:16, col:21> value 'int &'
| |-ParmVarDecl 0x1028710d0 <col:28, col:32> steps 'int'
| `-CompoundStmt 0x1028712f0 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x1028712b8 <line:9:2, col:11> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x102871250 <col:2> 'int' lvalue ParmVar 0x102871060 'value' 'int &'
|     `-ImplicitCastExpr 0x1028712a0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102871278 <col:11> 'int' lvalue ParmVar 0x1028710d0 'steps' 'int'
|-FunctionDecl 0x1028713a0 <line:12:1, line:14:1> self 'int (int)'
| |-ParmVarDecl 0x102871320 <line:12:10, col:14> value 'int'
| `-CompoundStmt 0x1028714a8 <col:21, line:14:1>
|   `-ReturnStmt 0x102871488 <line:13:2, col:9>
|     `-ImplicitCastExpr 0x102871470 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102871448 <col:9> 'int' lvalue ParmVar 0x102871320 'value' 'int'
`-FunctionDecl 0x102871730 <line:16:1, line:89:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1028714e0 <line:16:10, col:14> argc 'int'
  |-ParmVarDecl 0x102871620 <col:20, col:31> argv 'char **':'char **'
  `-CompoundStmt 0x102878448 <col:34, line:89:1>
    |-DeclStmt 0x102871c68 <line:17:2, col:69>
    | `-VarDecl 0x102871830 <col:2, col:68> arr 'int [14]'
    |   `-InitListExpr 0x102871af8 <col:14, col:68> 'int [14]'
    |     |-IntegerLiteral 0x102871888 <col:16> 'int' 22
    |     |-IntegerLiteral 0x1028718a8 <col:20> 'int' 34
    |     |-IntegerLiteral 0x1028718c8 <col:24> 'int' 3
    |     |-IntegerLiteral 0x1028718e8 <col:27> 'int' 32
    |     |-IntegerLiteral 0x102871908 <col:31> 'int' 82
    |     |-IntegerLiteral 0x102871928 <col:35> 'int' 55
    |     |-IntegerLiteral 0x102871948 <col:39> 'int' 89
    |     |-IntegerLiteral 0x102871968 <col:43> 'int' 50
    |     |-IntegerLiteral 0x102871988 <col:47> 'int' 37
    |     |-IntegerLiteral 0x1028719a8 <col:51> 'int' 5
    |     |-IntegerLiteral 0x1028719c8 <col:54> 'int' 64
    |     |-IntegerLiteral 0x1028719e8 <col:58> 'int' 35
    |     |-IntegerLiteral 0x102871a08 <col:62> 'int' 9
    |     `-IntegerLiteral 0x102871a28 <col:65> 'int' 70
    |-DeclStmt 0x102871d08 <line:18:2, col:14>
    | `-VarDecl 0x102871c90 <col:2, col:12> len 'int'
    |   `-IntegerLiteral 0x102871ce8 <col:12> 'int' 14
    |-DeclStmt 0x102871e88 <line:19:2, col:16>
    | |-VarDecl 0x102871d30 <col:2, col:6> i 'int'
    | |-VarDecl 0x102871da0 <col:2, col:9> j 'int'
    | `-VarDecl 0x102871e10 <col:2, col:12> temp 'int'
    |-DeclStmt 0x102871f28 <line:20:2, col:13>
    | `-VarDecl 0x102871eb0 <col:2, col:12> sum 'int'
    |   `-IntegerLiteral 0x102871f08 <col:12> 'int' 0
    |-LabelStmt 0x1028783e8 <line:49:2, line:70:2> 'label'
    | `-IfStmt 0x102878378 <line:49:9, line:70:2>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0x1028721d8 <line:49:13, col:55> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0x1028721c0 <col:13, col:55> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0x102872190 <col:13, col:55> 'int' lvalue
    |   |     |-BinaryOperator 0x102871fa0 <col:13, col:20> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0x102871f88 <col:13> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x102871f40 <col:13> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |   |     | `-IntegerLiteral 0x102871f68 <col:20> 'int' 19
    |   |     |-ParenExpr 0x102872100 <col:25, col:45> 'int' lvalue
    |   |     | `-BinaryOperator 0x1028720d8 <col:26, col:43> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0x102872030 <col:26, col:32> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0x102871fc8 <col:26> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0x102872010 <col:32> 'int' 20
    |   |     |   `-CompoundAssignOperator 0x1028720a0 <col:36, col:43> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0x102872058 <col:36> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0x102872080 <col:43> 'int' 10
    |   |     `-BinaryOperator 0x102872168 <col:49, col:55> 'int' lvalue '='
    |   |       |-DeclRefExpr 0x102872120 <col:49> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |   |       `-IntegerLiteral 0x102872148 <col:55> 'int' 30
    |   |-BinaryOperator 0x102872238 <line:50:3, col:9> 'int' lvalue '='
    |   | |-DeclRefExpr 0x1028721f0 <col:3> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |   | `-IntegerLiteral 0x102872218 <col:9> 'int' 10000
    |   `-CompoundStmt 0x102878350 <line:51:7, line:70:2>
    |     |-ForStmt 0x102878280 <line:52:3, line:66:4>
    |     | |-<<<NULL>>>
    |     | |-<<<NULL>>>
    |     | |-BinaryOperator 0x1028722c0 <line:52:10, col:16> '_Bool' '>'
    |     | | |-ImplicitCastExpr 0x1028722a8 <col:10> 'int' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x102872260 <col:10> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |     | | `-IntegerLiteral 0x102872288 <col:16> 'int' 0
    |     | |-CompoundAssignOperator 0x102872330 <col:19, col:26> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | | |-DeclRefExpr 0x1028722e8 <col:19> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |     | | `-IntegerLiteral 0x102872310 <col:26> 'int' 2
    |     | `-SwitchStmt 0x1028723a8 <line:53:4, line:66:4>
    |     |   |-<<<NULL>>>
    |     |   |-ImplicitCastExpr 0x102872390 <line:53:12> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x102872368 <col:12> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |     |   `-CompoundStmt 0x102878250 <col:17, line:66:4>
    |     |     |-CaseStmt 0x1028723f8 <line:54:4, line:56:5>
    |     |     | |-IntegerLiteral 0x1028723d8 <line:54:9> 'int' 1
    |     |     | |-<<<NULL>>>
    |     |     | `-CaseStmt 0x102872450 <line:55:4, line:56:5>
    |     |     |   |-IntegerLiteral 0x102872430 <line:55:9> 'int' 2
    |     |     |   |-<<<NULL>>>
    |     |     |   `-BreakStmt 0x102872488 <line:56:5>
    |     |     |-CaseStmt 0x1028724b8 <line:57:4, line:58:8>
    |     |     | |-IntegerLiteral 0x102872498 <line:57:9> 'int' 3
    |     |     | |-<<<NULL>>>
    |     |     | `-UnaryOperator 0x102872518 <line:58:5, col:8> 'int' postfix '++'
    |     |     |   `-DeclRefExpr 0x1028724f0 <col:5> 'int' lvalue Var 0x102871eb0 'sum' 'int'
    |     |     `-ForStmt 0x102878210 <line:59:5, line:65:7>
    |     |       |-BinaryOperator 0x102872580 <line:59:10, col:14> 'int' lvalue '='
    |     |       | |-DeclRefExpr 0x102872538 <col:10> 'int' lvalue Var 0x102871d30 'i' 'int'
    |     |       | `-IntegerLiteral 0x102872560 <col:14> 'int' 0
    |     |       |-<<<NULL>>>
    |     |       |-BinaryOperator 0x102872670 <col:17, col:27> '_Bool' '<'
    |     |       | |-ImplicitCastExpr 0x102872658 <col:17> 'int' <LValueToRValue>
    |     |       | | `-DeclRefExpr 0x1028725a8 <col:17> 'int' lvalue Var 0x102871d30 'i' 'int'
    |     |       | `-BinaryOperator 0x102872630 <col:21, col:27> 'int' '-'
    |     |       |   |-ImplicitCastExpr 0x102872618 <col:21> 'int' <LValueToRValue>
    |     |       |   | `-DeclRefExpr 0x1028725d0 <col:21> 'int' lvalue Var 0x102871c90 'len' 'int'
    |     |       |   `-IntegerLiteral 0x1028725f8 <col:27> 'int' 1
    |     |       |-UnaryOperator 0x1028726c0 <col:30, col:31> 'int' postfix '++'
    |     |       | `-DeclRefExpr 0x102872698 <col:30> 'int' lvalue Var 0x102871d30 'i' 'int'
    |     |       `-ForStmt 0x102872fa8 <line:60:6, line:65:7>
    |     |         |-BinaryOperator 0x102872728 <line:60:11, col:15> 'int' lvalue '='
    |     |         | |-DeclRefExpr 0x1028726e0 <col:11> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |         | `-IntegerLiteral 0x102872708 <col:15> 'int' 0
    |     |         |-<<<NULL>>>
    |     |         |-BinaryOperator 0x102872880 <col:18, col:32> '_Bool' '<'
    |     |         | |-ImplicitCastExpr 0x102872868 <col:18> 'int' <LValueToRValue>
    |     |         | | `-DeclRefExpr 0x102872750 <col:18> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |         | `-BinaryOperator 0x102872840 <col:22, col:32> 'int' '-'
    |     |         |   |-BinaryOperator 0x1028727d8 <col:22, col:28> 'int' '-'
    |     |         |   | |-ImplicitCastExpr 0x1028727c0 <col:22> 'int' <LValueToRValue>
    |     |         |   | | `-DeclRefExpr 0x102872778 <col:22> 'int' lvalue Var 0x102871c90 'len' 'int'
    |     |         |   | `-IntegerLiteral 0x1028727a0 <col:28> 'int' 1
    |     |         |   `-ImplicitCastExpr 0x102872828 <col:32> 'int' <LValueToRValue>
    |     |         |     `-DeclRefExpr 0x102872800 <col:32> 'int' lvalue Var 0x102871d30 'i' 'int'
    |     |         |-UnaryOperator 0x1028728d0 <col:35, col:36> 'int' postfix '++'
    |     |         | `-DeclRefExpr 0x1028728a8 <col:35> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |         `-IfStmt 0x102872f78 <line:61:7, line:65:7>
    |     |           |-<<<NULL>>>
    |     |           |-BinaryOperator 0x102872ae0 <line:61:11, col:29> '_Bool' '>'
    |     |           | |-ImplicitCastExpr 0x102872ab0 <col:11, col:16> 'int' <LValueToRValue>
    |     |           | | `-ArraySubscriptExpr 0x102872998 <col:11, col:16> 'int' lvalue
    |     |           | |   |-ImplicitCastExpr 0x102872968 <col:11> 'int *' <ArrayToPointerDecay>
    |     |           | |   | `-DeclRefExpr 0x1028728f0 <col:11> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           | |   `-ImplicitCastExpr 0x102872980 <col:15> 'int' <LValueToRValue>
    |     |           | |     `-DeclRefExpr 0x102872918 <col:15> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           | `-ImplicitCastExpr 0x102872ac8 <col:20, col:29> 'int' <LValueToRValue>
    |     |           |   `-ArraySubscriptExpr 0x102872a88 <col:20, col:29> 'int' lvalue
    |     |           |     |-ImplicitCastExpr 0x102872a70 <col:20> 'int *' <ArrayToPointerDecay>
    |     |           |     | `-DeclRefExpr 0x1028729c0 <col:20> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           |     `-BinaryOperator 0x102872a48 <col:24, col:28> 'int' '+'
    |     |           |       |-ImplicitCastExpr 0x102872a30 <col:24> 'int' <LValueToRValue>
    |     |           |       | `-DeclRefExpr 0x1028729e8 <col:24> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           |       `-IntegerLiteral 0x102872a10 <col:28> 'int' 1
    |     |           |-CompoundStmt 0x102872f48 <col:32, line:65:7>
    |     |           | |-BinaryOperator 0x102872bf0 <line:62:8, col:20> 'int' lvalue '='
    |     |           | | |-DeclRefExpr 0x102872b08 <col:8> 'int' lvalue Var 0x102871e10 'temp' 'int'
    |     |           | | `-ImplicitCastExpr 0x102872bd8 <col:15, col:20> 'int' <LValueToRValue>
    |     |           | |   `-ArraySubscriptExpr 0x102872bb0 <col:15, col:20> 'int' lvalue
    |     |           | |     |-ImplicitCastExpr 0x102872b80 <col:15> 'int *' <ArrayToPointerDecay>
    |     |           | |     | `-DeclRefExpr 0x102872b30 <col:15> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           | |     `-ImplicitCastExpr 0x102872b98 <col:19> 'int' <LValueToRValue>
    |     |           | |       `-DeclRefExpr 0x102872b58 <col:19> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           | |-BinaryOperator 0x102872dc8 <line:63:8, col:26> 'int' lvalue '='
    |     |           | | |-ArraySubscriptExpr 0x102872c98 <col:8, col:13> 'int' lvalue
    |     |           | | | |-ImplicitCastExpr 0x102872c68 <col:8> 'int *' <ArrayToPointerDecay>
    |     |           | | | | `-DeclRefExpr 0x102872c18 <col:8> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           | | | `-ImplicitCastExpr 0x102872c80 <col:12> 'int' <LValueToRValue>
    |     |           | | |   `-DeclRefExpr 0x102872c40 <col:12> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           | | `-ImplicitCastExpr 0x102872db0 <col:17, col:26> 'int' <LValueToRValue>
    |     |           | |   `-ArraySubscriptExpr 0x102872d88 <col:17, col:26> 'int' lvalue
    |     |           | |     |-ImplicitCastExpr 0x102872d70 <col:17> 'int *' <ArrayToPointerDecay>
    |     |           | |     | `-DeclRefExpr 0x102872cc0 <col:17> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           | |     `-BinaryOperator 0x102872d48 <col:21, col:25> 'int' '+'
    |     |           | |       |-ImplicitCastExpr 0x102872d30 <col:21> 'int' <LValueToRValue>
    |     |           | |       | `-DeclRefExpr 0x102872ce8 <col:21> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           | |       `-IntegerLiteral 0x102872d10 <col:25> 'int' 1
    |     |           | `-BinaryOperator 0x102872f20 <line:64:8, col:21> 'int' lvalue '='
    |     |           |   |-ArraySubscriptExpr 0x102872eb8 <col:8, col:17> 'int' lvalue
    |     |           |   | |-ImplicitCastExpr 0x102872ea0 <col:8> 'int *' <ArrayToPointerDecay>
    |     |           |   | | `-DeclRefExpr 0x102872df0 <col:8> 'int [14]' lvalue Var 0x102871830 'arr' 'int [14]'
    |     |           |   | `-BinaryOperator 0x102872e78 <col:12, col:16> 'int' '+'
    |     |           |   |   |-ImplicitCastExpr 0x102872e60 <col:12> 'int' <LValueToRValue>
    |     |           |   |   | `-DeclRefExpr 0x102872e18 <col:12> 'int' lvalue Var 0x102871da0 'j' 'int'
    |     |           |   |   `-IntegerLiteral 0x102872e40 <col:16> 'int' 1
    |     |           |   `-ImplicitCastExpr 0x102872f08 <col:21> 'int' <LValueToRValue>
    |     |           |     `-DeclRefExpr 0x102872ee0 <col:21> 'int' lvalue Var 0x102871e10 'temp' 'int'
    |     |           `-<<<NULL>>>
    |     `-WhileStmt 0x102878328 <line:67:3, line:69:3>
    |       |-<<<NULL>>>
    |       |-ImplicitCastExpr 0x1028782e0 <line:67:9> '_Bool' <IntegralToBoolean>
    |       | `-IntegerLiteral 0x1028782c0 <col:9> 'int' 1
    |       `-CompoundStmt 0x102878308 <col:12, line:69:3>
    |         `-NullStmt 0x1028782f8 <line:68:4>
    `-ReturnStmt 0x102878428 <line:88:2, col:9>
      `-IntegerLiteral 0x102878408 <col:9> 'int' 0
