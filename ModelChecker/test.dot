digraph {
<<<<<<< HEAD
=======
"static char [100]   at (0,23:23) 0x102825f00"
"int (int) self(int value)  at (12:14,1:1) 0x1028727a0" -> "ReturnStmt(value)  at (13,2:9) 0x102872888"
"ReturnStmt(value)  at (13,2:9) 0x102872888"
"int (int, char **) main(int argc, char **:char ** argv)  at (16:89,1:1) 0x102872b30" -> "int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0x102873068"
"int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0x102873068" -> "int len  = 14  at (18,2:14) 0x102873108"
"int len  = 14  at (18,2:14) 0x102873108" -> "int i , int j , int temp   at (19,2:16) 0x102873288"
"int i , int j , int temp   at (19,2:16) 0x102873288" -> "int sum  = 0  at (20,2:13) 0x102873328"
"int sum  = 0  at (20,2:13) 0x102873328" -> "(sum = increment(sum))  at (21,2:21) 0x1028734c8"
"(sum = increment(sum))  at (21,2:21) 0x1028734c8" -> "int i  = 0  at (22,7:16) 0x102873578"
"int i  = 0  at (22,7:16) 0x102873578" -> "for no_cond at (22:29,2:2) 0x102873898"
"for no_cond at (22:29,2:2) 0x102873898" -> "(sum += i)  at (23,3:10) 0x1028735f8"
"for no_cond at (22:29,2:2) 0x102873898" -> "if (sum > 100) at (30:36,2:25) 0x102873ce0"
"(sum += i)  at (23,3:10) 0x1028735f8" -> "if (i == 8) at (24:25,3:4) 0x1028736c8"
"if (i == 8) at (24:25,3:4) 0x1028736c8" -> "if (i < 8) at (26:27,3:4) 0x102873790"
"if (i == 8) at (24:25,3:4) 0x1028736c8" -> "if (sum > 100) at (30:36,2:25) 0x102873ce0"
"if (i < 8) at (26:27,3:4) 0x102873790" -> "for no_cond at (22:29,2:2) 0x102873898"
"if (i < 8) at (26:27,3:4) 0x102873790" -> "(sum *= i)  at (28,3:10) 0x102873828"
"(sum *= i)  at (28,3:10) 0x102873828" -> "for no_cond at (22:29,2:2) 0x102873898"
"if (sum > 100) at (30:36,2:25) 0x102873ce0" -> "if (sum > 50) at (32:36,7:25) 0x102873cb0"
"if (sum > 100) at (30:36,2:25) 0x102873ce0" -> "(sum = 100)  at (31,3:9) 0x1028739a8"
"if (sum > 50) at (32:36,7:25) 0x102873cb0" -> "(sum = 50)  at (33,3:9) 0x102873aa0"
"if (sum > 50) at (32:36,7:25) 0x102873cb0" -> "((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0x102873c88"
"(sum = 50)  at (33,3:9) 0x102873aa0" -> "ReturnStmt(1)  at (34,3:10) 0x102873ae8"
"ReturnStmt(1)  at (34,3:10) 0x102873ae8"
"((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0x102873c88" -> "switch (sum / 10) at (38:46,2:2) 0x102873d98"
"switch (sum / 10) at (38:46,2:2) 0x102873d98" -> "2  at (42:43,2:9) 0x102873ec0"
"switch (sum / 10) at (38:46,2:2) 0x102873d98" -> "(sum += 10)  at (45,3:10) 0x102873fb0"
"switch (sum / 10) at (38:46,2:2) 0x102873d98" -> "1  at (39:40,2:9) 0x102873de8"
"2  at (42:43,2:9) 0x102873ec0" -> "(sum = 30)  at (43,3:9) 0x102873f40"
"(sum = 30)  at (43,3:9) 0x102873f40" -> "(sum += 10)  at (45,3:10) 0x102873fb0"
"(sum += 10)  at (45,3:10) 0x102873fb0" -> "self(sum)  at (47,2:10) 0x102874100"
"self(sum)  at (47,2:10) 0x102874100" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x10287a4b8"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x10287a4b8" -> "for (sum > 0) at (52:66,3:4) 0x10287a458"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x10287a4b8" -> "(sum = 10000)  at (50,3:9) 0x102879630"
"for (sum > 0) at (52:66,3:4) 0x10287a458" -> "switch sum at (69:83,2:2) 0x10287a588"
"for (sum > 0) at (52:66,3:4) 0x10287a458" -> "switch sum at (53:66,4:4) 0x1028797a0"
"switch sum at (69:83,2:2) 0x10287a588" -> "4  at (79:81,2:6) 0x10287a7c8"
"switch sum at (69:83,2:2) 0x10287a588" -> "3  at (77:78,2:8) 0x10287a758"
"switch sum at (69:83,2:2) 0x10287a588" -> "sum++  at (81,3:6) 0x10287a828"
"switch sum at (69:83,2:2) 0x10287a588" -> "2  at (75:76,2:3) 0x10287a6f0"
"switch sum at (69:83,2:2) 0x10287a588" -> "1  at (70:74,2:4) 0x10287a610"
"4  at (79:81,2:6) 0x10287a7c8" -> "sum++  at (81,3:6) 0x10287a828"
"sum++  at (81,3:6) 0x10287a828" -> "sum--  at (82,3:6) 0x10287a890"
"sum--  at (82,3:6) 0x10287a890" -> "int [100][100][100] array   at (85,2:26) 0x10287aaa8"
"int [100][100][100] array   at (85,2:26) 0x10287aaa8" -> "(sum = array[10][10][10])  at (86,2:24) 0x10287aca0"
"(sum = array[10][10][10])  at (86,2:24) 0x10287aca0" -> "ReturnStmt(0)  at (88,2:9) 0x10287ace8"
"ReturnStmt(0)  at (88,2:9) 0x10287ace8"
"3  at (77:78,2:8) 0x10287a758" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x10287a4b8"
"2  at (75:76,2:3) 0x10287a6f0" -> "int [100][100][100] array   at (85,2:26) 0x10287aaa8"
"1  at (70:74,2:4) 0x10287a610" -> "if 1 at (71:74,3:4) 0x10287a6a0"
"if 1 at (71:74,3:4) 0x10287a6a0" -> "int [100][100][100] array   at (85,2:26) 0x10287aaa8"
"if 1 at (71:74,3:4) 0x10287a6a0" -> "2  at (75:76,2:3) 0x10287a6f0"
"switch sum at (53:66,4:4) 0x1028797a0" -> "1  at (54:56,4:5) 0x1028797f0"
"switch sum at (53:66,4:4) 0x1028797a0" -> "3  at (57:58,4:8) 0x1028798b0"
"switch sum at (53:66,4:4) 0x1028797a0" -> "2  at (55:56,4:5) 0x102879848"
"1  at (54:56,4:5) 0x1028797f0" -> "2  at (55:56,4:5) 0x102879848"
"2  at (55:56,4:5) 0x102879848" -> "(sum += 2)  at (52,19:26) 0x102879728"
"(sum += 2)  at (52,19:26) 0x102879728" -> "for (sum > 0) at (52:66,3:4) 0x10287a458"
"3  at (57:58,4:8) 0x1028798b0" -> "sum++  at (58,5:8) 0x102879910"
"sum++  at (58,5:8) 0x102879910" -> "(i = 0)  at (59,10:14) 0x102879978"
"(i = 0)  at (59,10:14) 0x102879978" -> "for (i < (len - 1)) at (59:65,5:7) 0x10287a3e8"
"for (i < (len - 1)) at (59:65,5:7) 0x10287a3e8" -> "(sum += 2)  at (52,19:26) 0x102879728"
"for (i < (len - 1)) at (59:65,5:7) 0x10287a3e8" -> "(j = 0)  at (60,11:15) 0x102879b20"
"(j = 0)  at (60,11:15) 0x102879b20" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0x10287a3a8"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0x10287a3a8" -> "if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x10287a378"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0x10287a3a8" -> "i++  at (59,30:31) 0x102879ab8"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x10287a378" -> "(temp = arr[j])  at (62,8:20) 0x102879ff0"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x10287a378" -> "j++  at (60,35:36) 0x102879cc8"
"(temp = arr[j])  at (62,8:20) 0x102879ff0" -> "(arr[j] = arr[(j + 1)])  at (63,8:26) 0x10287a1c8"
"(arr[j] = arr[(j + 1)])  at (63,8:26) 0x10287a1c8" -> "(arr[(j + 1)] = temp)  at (64,8:21) 0x10287a320"
"(arr[(j + 1)] = temp)  at (64,8:21) 0x10287a320" -> "j++  at (60,35:36) 0x102879cc8"
"j++  at (60,35:36) 0x102879cc8" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0x10287a3a8"
"i++  at (59,30:31) 0x102879ab8" -> "for (i < (len - 1)) at (59:65,5:7) 0x10287a3e8"
"(sum = 10000)  at (50,3:9) 0x102879630" -> "switch sum at (69:83,2:2) 0x10287a588"
"1  at (39:40,2:9) 0x102873de8" -> "(sum = 20)  at (40,3:9) 0x102873e68"
"(sum = 20)  at (40,3:9) 0x102873e68" -> "self(sum)  at (47,2:10) 0x102874100"
"(sum = 100)  at (31,3:9) 0x1028739a8" -> "switch (sum / 10) at (38:46,2:2) 0x102873d98"
"void (int &, int) increment(int & value, int steps)  at (8:10,1:1) 0x1028725a0" -> "(value += steps)  at (9,2:11) 0x1028726b8"
"(value += steps)  at (9,2:11) 0x1028726b8"
"int globVar  = 0  at (2,1:15) 0x102825f70"
>>>>>>> c835b980f384f2a0617856cf0a4849f580ed5782
}