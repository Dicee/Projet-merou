TranslationUnitDecl 0x1028254d0 <<invalid sloc>>
|-TypedefDecl 0x102825a10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x102825a70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x102825e30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-FunctionDecl 0x102825f50 <unitary_tests/Model_checker/dead_code.cpp:1:1, line:3:1> f 'int (int)'
| |-ParmVarDecl 0x102825e90 <line:1:7, col:11> q 'int'
| `-CompoundStmt 0x1028260a0 <col:14, line:3:1>
|   `-ReturnStmt 0x102826080 <line:2:5, col:14>
|     `-BinaryOperator 0x102826058 <col:12, col:14> 'int' '+'
|       |-ImplicitCastExpr 0x102826040 <col:12> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x102825ff8 <col:12> 'int' lvalue ParmVar 0x102825e90 'q' 'int'
|       `-IntegerLiteral 0x102826020 <col:14> 'int' 2
`-FunctionDecl 0x102874280 <line:5:1, line:39:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1028260d0 <line:5:10, col:14> argc 'int'
  |-ParmVarDecl 0x1028261a0 <col:20, col:27> argv 'char **'
  `-CompoundStmt 0x102875450 <col:33, line:39:1>
    |-DeclStmt 0x102874460 <line:6:2, col:18>
    | |-VarDecl 0x102874340 <col:2, col:10> j 'int'
    | | `-IntegerLiteral 0x102874398 <col:10> 'int' 0
    | `-VarDecl 0x1028743d0 <col:2, col:17> q 'int'
    |   `-IntegerLiteral 0x102874428 <col:17> 'int' 2
    |-IfStmt 0x102874638 <line:7:5, line:8:9>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x1028744d8 <line:7:9, col:14> '_Bool' '=='
    | | |-ImplicitCastExpr 0x1028744c0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x102874478 <col:9> 'int' lvalue Var 0x102874340 'j' 'int'
    | | `-IntegerLiteral 0x1028744a0 <col:14> 'int' 2
    | |-CallExpr 0x1028745f0 <line:8:6, col:9> 'int'
    | | |-ImplicitCastExpr 0x1028745d8 <col:6> 'int (*)(int)' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x102874580 <col:6> 'int (int)' lvalue Function 0x102825f50 'f' 'int (int)'
    | | `-ImplicitCastExpr 0x102874620 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x102874558 <col:8> 'int' lvalue Var 0x1028743d0 'q' 'int'
    | `-<<<NULL>>>
    |-IfStmt 0x102874be0 <line:10:5, line:22:5>
    | |-<<<NULL>>>
    | |-CXXBoolLiteralExpr 0x102874668 <line:10:9> '_Bool' false
    | |-CompoundStmt 0x1028746f0 <col:15, line:12:5>
    | | `-BinaryOperator 0x1028746c8 <line:11:6, col:10> 'int' lvalue '='
    | |   |-DeclRefExpr 0x102874680 <col:6> 'int' lvalue Var 0x1028743d0 'q' 'int'
    | |   `-IntegerLiteral 0x1028746a8 <col:10> 'int' 7
    | `-CompoundStmt 0x102874bb0 <line:13:10, line:22:5>
    |   |-BinaryOperator 0x102874758 <line:14:6, col:10> 'int' lvalue '='
    |   | |-DeclRefExpr 0x102874710 <col:6> 'int' lvalue Var 0x102874340 'j' 'int'
    |   | `-IntegerLiteral 0x102874738 <col:10> 'int' 3
    |   |-ForStmt 0x102874a08 <line:15:6, line:18:7>
    |   | |-DeclStmt 0x102874808 <line:15:11, col:19>
    |   | | `-VarDecl 0x102874790 <col:11, col:17> r 'int'
    |   | |   `-IntegerLiteral 0x1028747e8 <col:17> 'int' 0
    |   | |-<<<NULL>>>
    |   | |-<<<NULL>>>
    |   | |-UnaryOperator 0x102874848 <col:23, col:24> 'int' postfix '++'
    |   | | `-DeclRefExpr 0x102874820 <col:23> 'int' lvalue Var 0x102874790 'r' 'int'
    |   | `-IfStmt 0x1028749d8 <line:16:7, line:18:7>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0x102874910 <line:16:11, col:15> '_Bool' <IntegralToBoolean>
    |   |   | `-ImplicitCastExpr 0x1028748f8 <col:11, col:15> 'int' <LValueToRValue>
    |   |   |   `-BinaryOperator 0x1028748d0 <col:11, col:15> 'int' lvalue '='
    |   |   |     |-DeclRefExpr 0x102874868 <col:11> 'int' lvalue Var 0x102874340 'j' 'int'
    |   |   |     `-ImplicitCastExpr 0x1028748b8 <col:15> 'int' <LValueToRValue>
    |   |   |       `-DeclRefExpr 0x102874890 <col:15> 'int' lvalue Var 0x1028743d0 'q' 'int'
    |   |   |-CompoundStmt 0x1028749b8 <col:18, line:18:7>
    |   |   | `-BinaryOperator 0x102874990 <line:17:8, col:12> 'int' lvalue '='
    |   |   |   |-DeclRefExpr 0x102874928 <col:8> 'int' lvalue Var 0x1028743d0 'q' 'int'
    |   |   |   `-ImplicitCastExpr 0x102874978 <col:12> 'int' <LValueToRValue>
    |   |   |     `-DeclRefExpr 0x102874950 <col:12> 'int' lvalue Var 0x102874340 'j' 'int'
    |   |   `-<<<NULL>>>
    |   `-SwitchStmt 0x102874af8 <line:19:6, line:21:6>
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x102874ad0 <line:19:14, col:22> 'int' '+'
    |     | |-IntegerLiteral 0x102874a48 <col:14> 'int' 5
    |     | `-BinaryOperator 0x102874aa8 <col:18, col:22> 'int' '*'
    |     |   |-IntegerLiteral 0x102874a68 <col:18> 'int' 6
    |     |   `-IntegerLiteral 0x102874a88 <col:22> 'int' 3
    |     `-CompoundStmt 0x102874b90 <col:25, line:21:6>
    |       `-CaseStmt 0x102874b48 <line:20:7, col:15>
    |         |-IntegerLiteral 0x102874b28 <col:12> 'int' 2
    |         |-<<<NULL>>>
    |         `-BreakStmt 0x102874b80 <col:15>
    |-WhileStmt 0x102874db8 <line:24:5, col:30>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x102874d90 <col:12, col:28> '_Bool' <IntegralToBoolean>
    | | `-ImplicitCastExpr 0x102874d78 <col:12, col:28> 'int' <LValueToRValue>
    | |   `-BinaryOperator 0x102874d50 <col:12, col:28> 'int' lvalue '='
    | |     |-DeclRefExpr 0x102874c10 <col:12> 'int' lvalue Var 0x102874340 'j' 'int'
    | |     `-BinaryOperator 0x102874d28 <col:16, col:28> 'int' '+'
    | |       |-IntegerLiteral 0x102874c38 <col:16> 'int' 3
    | |       `-BinaryOperator 0x102874d00 <col:20, col:28> 'int' '*'
    | |         |-IntegerLiteral 0x102874c58 <col:20> 'int' 4
    | |         `-ParenExpr 0x102874ce0 <col:22, col:28> 'int'
    | |           `-BinaryOperator 0x102874cb8 <col:23, col:27> 'int' '-'
    | |             |-IntegerLiteral 0x102874c78 <col:23> 'int' 6
    | |             `-IntegerLiteral 0x102874c98 <col:27> 'int' 7
    | `-NullStmt 0x102874da8 <col:30>
    |-WhileStmt 0x102875368 <line:26:5, line:34:5>
    | |-<<<NULL>>>
    | |-CXXBoolLiteralExpr 0x102874de0 <line:26:12> '_Bool' true
    | `-CompoundStmt 0x102875338 <col:18, line:34:5>
    |   |-IfStmt 0x102874e40 <line:27:6, col:12>
    |   | |-<<<NULL>>>
    |   | |-ImplicitCastExpr 0x102874e18 <col:10> '_Bool' <IntegralToBoolean>
    |   | | `-IntegerLiteral 0x102874df8 <col:10> 'int' 0
    |   | |-NullStmt 0x102874e30 <col:12>
    |   | `-<<<NULL>>>
    |   |-DeclStmt 0x102874ef8 <line:28:6, col:15>
    |   | `-VarDecl 0x102874e80 <col:6, col:14> x 'int'
    |   |   `-IntegerLiteral 0x102874ed8 <col:14> 'int' 5
    |   `-SwitchStmt 0x102874f50 <line:29:6, line:33:6>
    |     |-<<<NULL>>>
    |     |-ImplicitCastExpr 0x102874f38 <line:29:14> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x102874f10 <col:14> 'int' lvalue Var 0x102874e80 'x' 'int'
    |     `-CompoundStmt 0x102875310 <col:17, line:33:6>
    |       |-CaseStmt 0x102874fa0 <line:30:7, line:31:34>
    |       | |-IntegerLiteral 0x102874f80 <line:30:12> 'int' 4
    |       | |-<<<NULL>>>
    |       | `-CaseStmt 0x102874ff8 <line:31:7, col:34>
    |       |   |-IntegerLiteral 0x102874fd8 <col:12> 'int' 3
    |       |   |-<<<NULL>>>
    |       |   `-IfStmt 0x102875158 <col:17, col:34>
    |       |     |-<<<NULL>>>
    |       |     |-BinaryOperator 0x1028750b0 <col:21, col:26> '_Bool' '=='
    |       |     | |-ImplicitCastExpr 0x102875080 <col:21> 'int' <LValueToRValue>
    |       |     | | `-DeclRefExpr 0x102875030 <col:21> 'int' lvalue Var 0x1028743d0 'q' 'int'
    |       |     | `-ImplicitCastExpr 0x102875098 <col:26> 'int' <LValueToRValue>
    |       |     |   `-DeclRefExpr 0x102875058 <col:26> 'int' lvalue Var 0x1028743d0 'q' 'int'
    |       |     |-CompoundAssignOperator 0x102875120 <col:29, col:34> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |     | |-DeclRefExpr 0x1028750d8 <col:29> 'int' lvalue Var 0x102874e80 'x' 'int'
    |       |     | `-IntegerLiteral 0x102875100 <col:34> 'int' 2
    |       |     `-<<<NULL>>>
    |       `-DefaultStmt 0x1028752f0 <line:32:7, col:33>
    |         `-IfStmt 0x1028752c0 <col:17, col:33>
    |           |-<<<NULL>>>
    |           |-ImplicitCastExpr 0x102875228 <col:21, col:25> '_Bool' <IntegralToBoolean>
    |           | `-ImplicitCastExpr 0x102875210 <col:21, col:25> 'int' <LValueToRValue>
    |           |   `-BinaryOperator 0x1028751d0 <col:21, col:25> 'int' lvalue '='
    |           |     |-DeclRefExpr 0x102875188 <col:21> 'int' lvalue Var 0x1028743d0 'q' 'int'
    |           |     `-IntegerLiteral 0x1028751b0 <col:25> 'int' 6
    |           |-CompoundAssignOperator 0x102875288 <col:28, col:33> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |           | |-DeclRefExpr 0x102875240 <col:28> 'int' lvalue Var 0x102874e80 'x' 'int'
    |           | `-IntegerLiteral 0x102875268 <col:33> 'int' 5
    |           `-<<<NULL>>>
    |-DeclStmt 0x1028753f8 <line:36:5, col:10>
    | `-VarDecl 0x1028753a0 <col:5, col:9> d 'int'
    `-ReturnStmt 0x102875430 <line:38:5, col:12>
      `-IntegerLiteral 0x102875410 <col:12> 'int' 0
