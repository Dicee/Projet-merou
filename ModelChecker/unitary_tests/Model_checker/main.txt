TranslationUnitDecl 0x2520190 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x25206d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
|-TypedefDecl 0x2520730 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
|-TypedefDecl 0x2520af0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
|-FunctionDecl 0x2520c10 <ModelChecker/unitary_tests/Model_checker/main.cpp:1:1, line:3:1> line:1:5 used f 'int (int)'
| |-ParmVarDecl 0x2520b50 <col:7, col:11> col:11 used q 'int'
| `-CompoundStmt 0x2520d60 <col:14, line:3:1>
|   `-ReturnStmt 0x2520d40 <line:2:5, col:14>
|     `-BinaryOperator 0x2520d18 <col:12, col:14> 'int' '+'
|       |-ImplicitCastExpr 0x2520d00 <col:12> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x2520cb8 <col:12> 'int' lvalue ParmVar 0x2520b50 'q' 'int'
|       `-IntegerLiteral 0x2520ce0 <col:14> 'int' 2
`-FunctionDecl 0x255db00 <line:5:1, line:22:1> line:5:5 main 'int (int, char **)'
  |-ParmVarDecl 0x2520d90 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x2520e60 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x255e3b0 <col:33, line:22:1>
    |-DeclStmt 0x255dd78 <line:6:5, col:21>
    | `-VarDecl 0x255dbc0 <col:5, col:20> col:9 used j 'int' cinit
    |   `-BinaryOperator 0x255dd50 <col:13, col:20> 'int' '+'
    |     |-IntegerLiteral 0x255dc18 <col:13> 'int' 5
    |     `-CallExpr 0x255dd20 <col:17, col:20> 'int'
    |       |-ImplicitCastExpr 0x255dd08 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
    |       | `-DeclRefExpr 0x255dcb0 <col:17> 'int (int)' lvalue Function 0x2520c10 'f' 'int (int)'
    |       `-IntegerLiteral 0x255dc90 <col:19> 'int' 7
    |-IfStmt 0x255de90 <line:7:5, col:20>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x255de58 <col:9, col:18> '_Bool' '=='
    | | |-ImplicitCastExpr 0x255de40 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x255dd90 <col:9> 'int' lvalue Var 0x255dbc0 'j' 'int'
    | | `-ParenExpr 0x255de20 <col:14, col:18> 'int'
    | |   `-BinaryOperator 0x255ddf8 <col:15, col:17> 'int' '-'
    | |     |-IntegerLiteral 0x255ddb8 <col:15> 'int' 4
    | |     `-IntegerLiteral 0x255ddd8 <col:17> 'int' 6
    | |-NullStmt 0x255de80 <col:20>
    | `-<<<NULL>>>
    |-CallExpr 0x255df78 <line:8:5, col:8> 'int'
    | |-ImplicitCastExpr 0x255df60 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x255df38 <col:5> 'int (int)' lvalue Function 0x2520c10 'f' 'int (int)'
    | `-IntegerLiteral 0x255df18 <col:7> 'int' 6
    |-DeclStmt 0x255e018 <line:9:5, col:10>
    | `-VarDecl 0x255dfc0 <col:5, col:9> col:9 used q 'int'
    |-DeclStmt 0x255e0b8 <line:11:5, col:14>
    | `-VarDecl 0x255e040 <col:5, col:13> col:9 d 'int' cinit
    |   `-IntegerLiteral 0x255e098 <col:13> 'int' 0
    |-CallExpr 0x255e190 <line:14:5, col:8> 'int'
    | |-ImplicitCastExpr 0x255e178 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x255e150 <col:5> 'int (int)' lvalue Function 0x2520c10 'f' 'int (int)'
    | `-ImplicitCastExpr 0x255e1c0 <col:7> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x255e128 <col:7> 'int' lvalue Var 0x255dfc0 'q' 'int'
    `-IfStmt 0x255e380 <line:16:5, line:21:5>
      |-<<<NULL>>>
      |-BinaryOperator 0x255e238 <line:16:9, col:14> '_Bool' '=='
      | |-ImplicitCastExpr 0x255e220 <col:9> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x255e1d8 <col:9> 'int' lvalue Var 0x255dbc0 'j' 'int'
      | `-IntegerLiteral 0x255e200 <col:14> 'int' 2
      |-CompoundStmt 0x255e2d0 <col:16, line:18:5>
      | `-BinaryOperator 0x255e2a8 <line:17:6, col:10> 'int' lvalue '='
      |   |-DeclRefExpr 0x255e260 <col:6> 'int' lvalue Var 0x255dfc0 'q' 'int'
      |   `-IntegerLiteral 0x255e288 <col:10> 'int' 7
      `-CompoundStmt 0x255e360 <line:19:10, line:21:5>
        `-BinaryOperator 0x255e338 <line:20:6, col:10> 'int' lvalue '='
          |-DeclRefExpr 0x255e2f0 <col:6> 'int' lvalue Var 0x255dbc0 'j' 'int'
          `-IntegerLiteral 0x255e318 <col:10> 'int' 3
