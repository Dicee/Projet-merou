TranslationUnitDecl 0xadf0d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xadf3c0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-FunctionDecl 0xadf470 <ModelChecker\unitary_tests\Model_checker\redefinition.cpp:1:1, line:8:1> line:1:6 f 'void (int)'
| |-ParmVarDecl 0xadf400 <col:8, col:12> col:12 used i 'int'
| `-CompoundStmt 0xadf688 <col:15, line:8:1>
|   |-IfStmt 0xadf618 <line:2:1, line:6:1>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0xadf530 <line:2:5, col:9> '_Bool' '>'
|   | | |-ImplicitCastExpr 0xadf520 <col:5> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0xadf4e4 <col:5> 'int' lvalue ParmVar 0xadf400 'i' 'int'
|   | | `-IntegerLiteral 0xadf500 <col:9> 'int' 0
|   | |-CompoundStmt 0xadf598 <col:12, line:4:1>
|   | | `-BinaryOperator 0xadf580 <line:3:3, col:7> 'int' lvalue '='
|   | |   |-DeclRefExpr 0xadf548 <col:3> 'int' lvalue ParmVar 0xadf400 'i' 'int'
|   | |   `-IntegerLiteral 0xadf560 <col:7> 'int' 2
|   | `-CompoundStmt 0xadf600 <line:4:8, line:6:1>
|   |   `-BinaryOperator 0xadf5e8 <line:5:2, col:6> 'int' lvalue '='
|   |     |-DeclRefExpr 0xadf5ac <col:2> 'int' lvalue ParmVar 0xadf400 'i' 'int'
|   |     `-IntegerLiteral 0xadf5c8 <col:6> 'int' 3
|   `-BinaryOperator 0xadf670 <line:7:1, col:5> 'int' lvalue '='
|     |-DeclRefExpr 0xadf634 <col:1> 'int' lvalue ParmVar 0xadf400 'i' 'int'
|     `-IntegerLiteral 0xadf650 <col:5> 'int' 4
|-FunctionDecl 0xadf700 <line:10:1, line:17:1> line:10:6 g 'void (int)'
| |-ParmVarDecl 0xadf6b0 <col:8, col:12> col:12 used i 'int'
| `-CompoundStmt 0xadf8c8 <col:16, line:17:1>
|   `-IfStmt 0xadf8a8 <line:11:1, line:16:1>
|     |-<<<NULL>>>
|     |-BinaryOperator 0xadf7c0 <line:11:5, col:9> '_Bool' '>'
|     | |-ImplicitCastExpr 0xadf7b0 <col:5> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0xadf774 <col:5> 'int' lvalue ParmVar 0xadf6b0 'i' 'int'
|     | `-IntegerLiteral 0xadf790 <col:9> 'int' 0
|     |-CompoundStmt 0xadf828 <col:12, line:13:1>
|     | `-BinaryOperator 0xadf810 <line:12:3, col:7> 'int' lvalue '='
|     |   |-DeclRefExpr 0xadf7d8 <col:3> 'int' lvalue ParmVar 0xadf6b0 'i' 'int'
|     |   `-IntegerLiteral 0xadf7f0 <col:7> 'int' 2
|     `-CompoundStmt 0xadf890 <line:14:6, line:16:1>
|       `-BinaryOperator 0xadf878 <line:15:3, col:7> 'int' lvalue '='
|         |-DeclRefExpr 0xadf83c <col:3> 'int' lvalue ParmVar 0xadf6b0 'i' 'int'
|         `-IntegerLiteral 0xadf858 <col:7> 'int' 3
`-FunctionDecl 0xadf940 <line:19:1, line:24:1> line:19:6 h 'void (int)'
  |-ParmVarDecl 0xadf8f0 <col:8, col:12> col:12 used i 'int'
  `-CompoundStmt 0xadfaf0 <col:16, line:24:1>
    |-IfStmt 0xadfa80 <line:20:1, line:22:1>
    | |-<<<NULL>>>
    | |-BinaryOperator 0xadfa00 <line:20:5, col:9> '_Bool' '>'
    | | |-ImplicitCastExpr 0xadf9f0 <col:5> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0xadf9b4 <col:5> 'int' lvalue ParmVar 0xadf8f0 'i' 'int'
    | | `-IntegerLiteral 0xadf9d0 <col:9> 'int' 0
    | |-CompoundStmt 0xadfa68 <col:12, line:22:1>
    | | `-BinaryOperator 0xadfa50 <line:21:3, col:7> 'int' lvalue '='
    | |   |-DeclRefExpr 0xadfa18 <col:3> 'int' lvalue ParmVar 0xadf8f0 'i' 'int'
    | |   `-IntegerLiteral 0xadfa30 <col:7> 'int' 2
    | `-<<<NULL>>>
    `-BinaryOperator 0xadfad8 <line:23:2, col:6> 'int' lvalue '='
      |-DeclRefExpr 0xadfa9c <col:2> 'int' lvalue ParmVar 0xadf8f0 'i' 'int'
      `-IntegerLiteral 0xadfab8 <col:6> 'int' 3
