TranslationUnitDecl 0xbdbca0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xbdbf90 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-FunctionDecl 0xbdc090 <ModelChecker\unitary_tests\Model_checker\arith_pointer.cpp:1:1, line:3:1> line:1:5 f 'int (int, int)'
| |-ParmVarDecl 0xbdbfd0 <col:7, col:11> col:11 a 'int'
| |-ParmVarDecl 0xbdc010 <col:14, col:18> col:18 b 'int'
| `-CompoundStmt 0xbdc138 <col:20, line:3:1>
|   `-ReturnStmt 0xbdc128 <line:2:2, col:9>
|     `-IntegerLiteral 0xbdc108 <col:9> 'int' 1
`-FunctionDecl 0xbdc240 <line:5:1, line:26:1> line:5:5 main 'int (int, char **)'
  |-ParmVarDecl 0xbdc160 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0xbdc1c0 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0xc232b8 <col:33, line:26:1>
    |-DeclStmt 0xbdc380 <line:6:2, col:12>
    | |-VarDecl 0xbdc2f0 <col:2, col:7> col:7 used p 'int *'
    | `-VarDecl 0xbdc340 <col:2, col:11> col:11 q 'int *'
    |-BinaryOperator 0xbdc408 <line:7:2, col:10> 'int *' lvalue '='
    | |-DeclRefExpr 0xbdc390 <col:2> 'int *' lvalue Var 0xbdc2f0 'p' 'int *'
    | `-BinaryOperator 0xbdc3f0 <col:6, col:10> 'int *' '+'
    |   |-ImplicitCastExpr 0xbdc3e0 <col:6> 'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0xbdc3a8 <col:6> 'int *' lvalue Var 0xbdc2f0 'p' 'int *'
    |   `-IntegerLiteral 0xbdc3c0 <col:10> 'int' 1
    |-DeclStmt 0xbdc4d0 <line:9:2, col:16>
    | `-VarDecl 0xbdc440 <col:2, col:15> col:7 r 'int *' cinit
    |   `-BinaryOperator 0xbdc4b8 <col:11, col:15> 'int *' '+'
    |     |-ImplicitCastExpr 0xbdc4a8 <col:11> 'int *' <LValueToRValue>
    |     | `-DeclRefExpr 0xbdc470 <col:11> 'int *' lvalue Var 0xbdc2f0 'p' 'int *'
    |     `-IntegerLiteral 0xbdc488 <col:15> 'int' 1
    |-DeclStmt 0xbdc540 <line:11:2, col:14>
    | `-VarDecl 0xbdc510 <col:2, col:13> col:13 used s 'const int *'
    |-BinaryOperator 0xbdc648 <line:12:2, col:18> 'const int *' lvalue '='
    | |-DeclRefExpr 0xbdc550 <col:2> 'const int *' lvalue Var 0xbdc510 's' 'const int *'
    | `-ConditionalOperator 0xbdc628 <col:6, col:18> 'const int *'
    |   |-ImplicitCastExpr 0xbdc608 <col:6> '_Bool' <IntegralToBoolean>
    |   | `-IntegerLiteral 0xbdc568 <col:6> 'int' 0
    |   |-ImplicitCastExpr 0xbdc618 <col:10> 'const int *' <NullToPointer>
    |   | `-IntegerLiteral 0xbdc588 <col:10> 'int' 0
    |   `-BinaryOperator 0xbdc5f0 <col:14, col:18> 'const int *' '+'
    |     |-ImplicitCastExpr 0xbdc5e0 <col:14> 'const int *' <LValueToRValue>
    |     | `-DeclRefExpr 0xbdc5a8 <col:14> 'const int *' lvalue Var 0xbdc510 's' 'const int *'
    |     `-IntegerLiteral 0xbdc5c0 <col:18> 'int' 1
    |-DeclStmt 0xbdc6e8 <line:14:2, col:14>
    | `-VarDecl 0xbdc670 <col:2, col:13> col:8 used f 'float' cinit
    |   `-ImplicitCastExpr 0xbdc6d8 <col:12, col:13> 'float' <IntegralToFloating>
    |     `-UnaryOperator 0xbdc6c0 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0xbdc6a0 <col:13> 'int' 3
    |-CompoundAssignOperator 0xbdc740 <line:16:2, col:7> 'float' lvalue '+=' ComputeLHSTy='float' ComputeResultTy='float'
    | |-DeclRefExpr 0xbdc6f8 <col:2> 'float' lvalue Var 0xbdc670 'f' 'float'
    | `-ImplicitCastExpr 0xbdc730 <col:7> 'float' <IntegralToFloating>
    |   `-IntegerLiteral 0xbdc710 <col:7> 'int' 5
    |-DeclStmt 0xbdc938 <line:18:2, col:27>
    | `-VarDecl 0xbdc7a0 <col:2, col:26> col:9 used arr 'double [4]' cinit
    |   `-InitListExpr 0xbdc888 <col:17, col:26> 'double [4]'
    |     |-ImplicitCastExpr 0xbdc8b0 <col:19> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0xbdc7d0 <col:19> 'int' 3
    |     |-ImplicitCastExpr 0xbdc8c0 <col:21> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0xbdc7f0 <col:21> 'int' 2
    |     |-ImplicitCastExpr 0xbdc8d8 <col:23> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0xbdc810 <col:23> 'int' 1
    |     `-ImplicitCastExpr 0xbdc8f8 <col:25> 'double' <IntegralToFloating>
    |       `-IntegerLiteral 0xbdc830 <col:25> 'int' 4
    |-DeclStmt 0xbdca20 <line:19:2, col:19>
    | `-VarDecl 0xbdc960 <col:2, col:18> col:9 a 'double' cinit
    |   `-ImplicitCastExpr 0xbdca10 <col:13, col:18> 'double' <LValueToRValue>
    |     `-ArraySubscriptExpr 0xbdc9f8 <col:13, col:18> 'double' lvalue
    |       |-ImplicitCastExpr 0xbdc9e8 <col:13> 'double *' <ArrayToPointerDecay>
    |       | `-DeclRefExpr 0xbdc990 <col:13> 'double [4]' lvalue Var 0xbdc7a0 'arr' 'double [4]'
    |       `-IntegerLiteral 0xbdc9a8 <col:17> 'int' 0
    |-DeclStmt 0xbdca90 <line:20:2, col:10>
    | `-VarDecl 0xbdca60 <col:2, col:9> col:9 used z 'float *'
    |-DeclStmt 0xbdcb20 <line:21:2, col:16>
    | `-VarDecl 0xbdcac0 <col:2, col:14> col:9 y 'float *' cinit
    |   `-UnaryOperator 0xbdcb08 <col:13, col:14> 'float *' postfix '++'
    |     `-DeclRefExpr 0xbdcaf0 <col:13> 'float *' lvalue Var 0xbdca60 'z' 'float *'
    |-DeclStmt 0xc23190 <line:22:2, col:10>
    | `-VarDecl 0xc23160 <col:2, col:9> col:9 used x 'float *'
    |-CompoundAssignOperator 0xc231d8 <line:23:2, col:7> 'float *' lvalue '+=' ComputeLHSTy='float *' ComputeResultTy='float *'
    | |-DeclRefExpr 0xc231a0 <col:2> 'float *' lvalue Var 0xc23160 'x' 'float *'
    | `-IntegerLiteral 0xc231b8 <col:7> 'int' 3
    |-BinaryOperator 0xc23270 <line:24:2, col:10> 'float *' lvalue '='
    | |-DeclRefExpr 0xc231f8 <col:2> 'float *' lvalue Var 0xc23160 'x' 'float *'
    | `-BinaryOperator 0xc23258 <col:6, col:10> 'float *' '+'
    |   |-ImplicitCastExpr 0xc23248 <col:6> 'float *' <LValueToRValue>
    |   | `-DeclRefExpr 0xc23210 <col:6> 'float *' lvalue Var 0xc23160 'x' 'float *'
    |   `-IntegerLiteral 0xc23228 <col:10> 'int' 6
    `-ReturnStmt 0xc232a8 <line:25:2, col:9>
      `-IntegerLiteral 0xc23288 <col:9> 'int' 0
