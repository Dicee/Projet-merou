TranslationUnitDecl 0x1028254d0 <<invalid sloc>>
|-TypedefDecl 0x102825a10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x102825a70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x102825e30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-FunctionDecl 0x102825fd0 <unitary_tests/Model_checker/arith_pointer.cpp:1:1, line:3:1> f 'int (int, int)'
| |-ParmVarDecl 0x102825e90 <line:1:7, col:11> a 'int'
| |-ParmVarDecl 0x102825f00 <col:14, col:18> b 'int'
| `-CompoundStmt 0x1028260c0 <col:20, line:3:1>
|   `-ReturnStmt 0x1028260a0 <line:2:2, col:9>
|     `-IntegerLiteral 0x102826080 <col:9> 'int' 1
`-FunctionDecl 0x1028742e0 <line:5:1, line:26:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1028260f0 <line:5:10, col:14> argc 'int'
  |-ParmVarDecl 0x102874210 <col:20, col:27> argv 'char **'
  `-CompoundStmt 0x10287a430 <col:33, line:26:1>
    |-DeclStmt 0x1028744b0 <line:6:2, col:12>
    | |-VarDecl 0x1028743d0 <col:2, col:7> p 'int *'
    | `-VarDecl 0x102874440 <col:2, col:11> q 'int *'
    |-BinaryOperator 0x102874578 <line:7:2, col:10> 'int *' lvalue '='
    | |-DeclRefExpr 0x1028744c8 <col:2> 'int *' lvalue Var 0x1028743d0 'p' 'int *'
    | `-BinaryOperator 0x102874550 <col:6, col:10> 'int *' '+'
    |   |-ImplicitCastExpr 0x102874538 <col:6> 'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0x1028744f0 <col:6> 'int *' lvalue Var 0x1028743d0 'p' 'int *'
    |   `-IntegerLiteral 0x102874518 <col:10> 'int' 1
    |-DeclStmt 0x1028746a0 <line:9:2, col:16>
    | `-VarDecl 0x1028745c0 <col:2, col:15> r 'int *'
    |   `-BinaryOperator 0x102874678 <col:11, col:15> 'int *' '+'
    |     |-ImplicitCastExpr 0x102874660 <col:11> 'int *' <LValueToRValue>
    |     | `-DeclRefExpr 0x102874618 <col:11> 'int *' lvalue Var 0x1028743d0 'p' 'int *'
    |     `-IntegerLiteral 0x102874640 <col:15> 'int' 1
    |-DeclStmt 0x102874758 <line:11:2, col:14>
    | `-VarDecl 0x102874700 <col:2, col:13> s 'const int *'
    |-BinaryOperator 0x1028748c0 <line:12:2, col:18> 'const int *' lvalue '='
    | |-DeclRefExpr 0x102874770 <col:2> 'const int *' lvalue Var 0x102874700 's' 'const int *'
    | `-ConditionalOperator 0x102874890 <col:6, col:18> 'const int *'
    |   |-ImplicitCastExpr 0x102874860 <col:6> '_Bool' <IntegralToBoolean>
    |   | `-IntegerLiteral 0x102874798 <col:6> 'int' 0
    |   |-ImplicitCastExpr 0x102874878 <col:10> 'const int *' <NullToPointer>
    |   | `-IntegerLiteral 0x1028747b8 <col:10> 'int' 0
    |   `-BinaryOperator 0x102874838 <col:14, col:18> 'const int *' '+'
    |     |-ImplicitCastExpr 0x102874820 <col:14> 'const int *' <LValueToRValue>
    |     | `-DeclRefExpr 0x1028747d8 <col:14> 'const int *' lvalue Var 0x102874700 's' 'const int *'
    |     `-IntegerLiteral 0x102874800 <col:18> 'int' 1
    |-DeclStmt 0x1028749b0 <line:14:2, col:14>
    | `-VarDecl 0x102874900 <col:2, col:13> f 'float'
    |   `-ImplicitCastExpr 0x102874998 <col:12, col:13> 'float' <IntegralToFloating>
    |     `-UnaryOperator 0x102874978 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x102874958 <col:13> 'int' 3
    |-CompoundAssignOperator 0x102874a28 <line:16:2, col:7> 'float' lvalue '+=' ComputeLHSTy='float' ComputeResultTy='float'
    | |-DeclRefExpr 0x1028749c8 <col:2> 'float' lvalue Var 0x102874900 'f' 'float'
    | `-ImplicitCastExpr 0x102874a10 <col:7> 'float' <IntegralToFloating>
    |   `-IntegerLiteral 0x1028749f0 <col:7> 'int' 5
    |-DeclStmt 0x102874cf8 <line:18:2, col:27>
    | `-VarDecl 0x102874ab0 <col:2, col:26> arr 'double [4]'
    |   `-InitListExpr 0x102874be8 <col:17, col:26> 'double [4]'
    |     |-ImplicitCastExpr 0x102874c28 <col:19> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102874b08 <col:19> 'int' 3
    |     |-ImplicitCastExpr 0x102874c48 <col:21> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102874b28 <col:21> 'int' 2
    |     |-ImplicitCastExpr 0x102874c70 <col:23> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102874b48 <col:23> 'int' 1
    |     `-ImplicitCastExpr 0x102874ca8 <col:25> 'double' <IntegralToFloating>
    |       `-IntegerLiteral 0x102874b68 <col:25> 'int' 4
    |-DeclStmt 0x102874e40 <line:19:2, col:19>
    | `-VarDecl 0x102874d20 <col:2, col:18> a 'double'
    |   `-ImplicitCastExpr 0x102874e28 <col:13, col:18> 'double' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x102874e00 <col:13, col:18> 'double' lvalue
    |       |-ImplicitCastExpr 0x102874de8 <col:13> 'double *' <ArrayToPointerDecay>
    |       | `-DeclRefExpr 0x102874d78 <col:13> 'double [4]' lvalue Var 0x102874ab0 'arr' 'double [4]'
    |       `-IntegerLiteral 0x102874da0 <col:17> 'int' 0
    |-DeclStmt 0x102874ef8 <line:20:2, col:10>
    | `-VarDecl 0x102874ea0 <col:2, col:9> z 'float *'
    |-DeclStmt 0x102874fd0 <line:21:2, col:16>
    | `-VarDecl 0x102874f30 <col:2, col:14> y 'float *'
    |   `-UnaryOperator 0x102874fb0 <col:13, col:14> 'float *' postfix '++'
    |     `-DeclRefExpr 0x102874f88 <col:13> 'float *' lvalue Var 0x102874ea0 'z' 'float *'
    |-DeclStmt 0x102875058 <line:22:2, col:10>
    | `-VarDecl 0x102875000 <col:2, col:9> x 'float *'
    |-CompoundAssignOperator 0x1028750b8 <line:23:2, col:7> 'float *' lvalue '+=' ComputeLHSTy='float *' ComputeResultTy='float *'
    | |-DeclRefExpr 0x102875070 <col:2> 'float *' lvalue Var 0x102875000 'x' 'float *'
    | `-IntegerLiteral 0x102875098 <col:7> 'int' 3
    |-BinaryOperator 0x1028751a0 <line:24:2, col:10> 'float *' lvalue '='
    | |-DeclRefExpr 0x1028750f0 <col:2> 'float *' lvalue Var 0x102875000 'x' 'float *'
    | `-BinaryOperator 0x102875178 <col:6, col:10> 'float *' '+'
    |   |-ImplicitCastExpr 0x102875160 <col:6> 'float *' <LValueToRValue>
    |   | `-DeclRefExpr 0x102875118 <col:6> 'float *' lvalue Var 0x102875000 'x' 'float *'
    |   `-IntegerLiteral 0x102875140 <col:10> 'int' 6
    `-ReturnStmt 0x10287a410 <line:25:2, col:9>
      `-IntegerLiteral 0x1028751c8 <col:9> 'int' 0
