TranslationUnitDecl 0x1030090d0 <<invalid sloc>>
|-TypedefDecl 0x103009610 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x103009670 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x103009a30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-FunctionDecl 0x103009bd0 <unitary_tests/Model_checker/arith_pointer.cpp:1:1, line:3:1> f 'int (int, int)'
| |-ParmVarDecl 0x103009a90 <line:1:7, col:11> a 'int'
| |-ParmVarDecl 0x103009b00 <col:14, col:18> b 'int'
| `-CompoundStmt 0x103009cc0 <col:20, line:3:1>
|   `-ReturnStmt 0x103009ca0 <line:2:2, col:9>
|     `-IntegerLiteral 0x103009c80 <col:9> 'int' 1
`-FunctionDecl 0x1028388e0 <line:5:1, line:26:1> main 'int (int, char **)'
  |-ParmVarDecl 0x103009cf0 <line:5:10, col:14> argc 'int'
  |-ParmVarDecl 0x102838810 <col:20, col:27> argv 'char **'
  `-CompoundStmt 0x102839830 <col:33, line:26:1>
    |-DeclStmt 0x102838ab0 <line:6:2, col:12>
    | |-VarDecl 0x1028389d0 <col:2, col:7> p 'int *'
    | `-VarDecl 0x102838a40 <col:2, col:11> q 'int *'
    |-BinaryOperator 0x102838b78 <line:7:2, col:10> 'int *' lvalue '='
    | |-DeclRefExpr 0x102838ac8 <col:2> 'int *' lvalue Var 0x1028389d0 'p' 'int *'
    | `-BinaryOperator 0x102838b50 <col:6, col:10> 'int *' '+'
    |   |-ImplicitCastExpr 0x102838b38 <col:6> 'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0x102838af0 <col:6> 'int *' lvalue Var 0x1028389d0 'p' 'int *'
    |   `-IntegerLiteral 0x102838b18 <col:10> 'int' 1
    |-DeclStmt 0x102838ca0 <line:9:2, col:16>
    | `-VarDecl 0x102838bc0 <col:2, col:15> r 'int *'
    |   `-BinaryOperator 0x102838c78 <col:11, col:15> 'int *' '+'
    |     |-ImplicitCastExpr 0x102838c60 <col:11> 'int *' <LValueToRValue>
    |     | `-DeclRefExpr 0x102838c18 <col:11> 'int *' lvalue Var 0x1028389d0 'p' 'int *'
    |     `-IntegerLiteral 0x102838c40 <col:15> 'int' 1
    |-DeclStmt 0x102838d58 <line:11:2, col:14>
    | `-VarDecl 0x102838d00 <col:2, col:13> s 'const int *'
    |-BinaryOperator 0x102838ec0 <line:12:2, col:18> 'const int *' lvalue '='
    | |-DeclRefExpr 0x102838d70 <col:2> 'const int *' lvalue Var 0x102838d00 's' 'const int *'
    | `-ConditionalOperator 0x102838e90 <col:6, col:18> 'const int *'
    |   |-ImplicitCastExpr 0x102838e60 <col:6> '_Bool' <IntegralToBoolean>
    |   | `-IntegerLiteral 0x102838d98 <col:6> 'int' 0
    |   |-ImplicitCastExpr 0x102838e78 <col:10> 'const int *' <NullToPointer>
    |   | `-IntegerLiteral 0x102838db8 <col:10> 'int' 0
    |   `-BinaryOperator 0x102838e38 <col:14, col:18> 'const int *' '+'
    |     |-ImplicitCastExpr 0x102838e20 <col:14> 'const int *' <LValueToRValue>
    |     | `-DeclRefExpr 0x102838dd8 <col:14> 'const int *' lvalue Var 0x102838d00 's' 'const int *'
    |     `-IntegerLiteral 0x102838e00 <col:18> 'int' 1
    |-DeclStmt 0x102838fb0 <line:14:2, col:14>
    | `-VarDecl 0x102838f00 <col:2, col:13> f 'float'
    |   `-ImplicitCastExpr 0x102838f98 <col:12, col:13> 'float' <IntegralToFloating>
    |     `-UnaryOperator 0x102838f78 <col:12, col:13> 'int' prefix '-'
    |       `-IntegerLiteral 0x102838f58 <col:13> 'int' 3
    |-CompoundAssignOperator 0x102839028 <line:16:2, col:7> 'float' lvalue '+=' ComputeLHSTy='float' ComputeResultTy='float'
    | |-DeclRefExpr 0x102838fc8 <col:2> 'float' lvalue Var 0x102838f00 'f' 'float'
    | `-ImplicitCastExpr 0x102839010 <col:7> 'float' <IntegralToFloating>
    |   `-IntegerLiteral 0x102838ff0 <col:7> 'int' 5
    |-DeclStmt 0x1028392f8 <line:18:2, col:27>
    | `-VarDecl 0x1028390b0 <col:2, col:26> arr 'double [4]'
    |   `-InitListExpr 0x1028391e8 <col:17, col:26> 'double [4]'
    |     |-ImplicitCastExpr 0x102839228 <col:19> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102839108 <col:19> 'int' 3
    |     |-ImplicitCastExpr 0x102839248 <col:21> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102839128 <col:21> 'int' 2
    |     |-ImplicitCastExpr 0x102839270 <col:23> 'double' <IntegralToFloating>
    |     | `-IntegerLiteral 0x102839148 <col:23> 'int' 1
    |     `-ImplicitCastExpr 0x1028392a8 <col:25> 'double' <IntegralToFloating>
    |       `-IntegerLiteral 0x102839168 <col:25> 'int' 4
    |-DeclStmt 0x102839440 <line:19:2, col:19>
    | `-VarDecl 0x102839320 <col:2, col:18> a 'double'
    |   `-ImplicitCastExpr 0x102839428 <col:13, col:18> 'double' <LValueToRValue>
    |     `-ArraySubscriptExpr 0x102839400 <col:13, col:18> 'double' lvalue
    |       |-ImplicitCastExpr 0x1028393e8 <col:13> 'double *' <ArrayToPointerDecay>
    |       | `-DeclRefExpr 0x102839378 <col:13> 'double [4]' lvalue Var 0x1028390b0 'arr' 'double [4]'
    |       `-IntegerLiteral 0x1028393a0 <col:17> 'int' 0
    |-DeclStmt 0x1028394f8 <line:20:2, col:10>
    | `-VarDecl 0x1028394a0 <col:2, col:9> z 'float *'
    |-DeclStmt 0x1028395d0 <line:21:2, col:16>
    | `-VarDecl 0x102839530 <col:2, col:14> y 'float *'
    |   `-UnaryOperator 0x1028395b0 <col:13, col:14> 'float *' postfix '++'
    |     `-DeclRefExpr 0x102839588 <col:13> 'float *' lvalue Var 0x1028394a0 'z' 'float *'
    |-DeclStmt 0x102839658 <line:22:2, col:10>
    | `-VarDecl 0x102839600 <col:2, col:9> x 'float *'
    |-CompoundAssignOperator 0x1028396b8 <line:23:2, col:7> 'float *' lvalue '+=' ComputeLHSTy='float *' ComputeResultTy='float *'
    | |-DeclRefExpr 0x102839670 <col:2> 'float *' lvalue Var 0x102839600 'x' 'float *'
    | `-IntegerLiteral 0x102839698 <col:7> 'int' 3
    |-BinaryOperator 0x1028397a0 <line:24:2, col:10> 'float *' lvalue '='
    | |-DeclRefExpr 0x1028396f0 <col:2> 'float *' lvalue Var 0x102839600 'x' 'float *'
    | `-BinaryOperator 0x102839778 <col:6, col:10> 'float *' '+'
    |   |-ImplicitCastExpr 0x102839760 <col:6> 'float *' <LValueToRValue>
    |   | `-DeclRefExpr 0x102839718 <col:6> 'float *' lvalue Var 0x102839600 'x' 'float *'
    |   `-IntegerLiteral 0x102839740 <col:10> 'int' 6
    `-ReturnStmt 0x102839810 <line:25:2, col:9>
      `-IntegerLiteral 0x1028397c8 <col:9> 'int' 0
