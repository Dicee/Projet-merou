TranslationUnitDecl 0x2dcf140 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2dcf430 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-FunctionDecl 0x2dcf4f0 <ModelChecker\unitary_tests\Model_checker\hidden_var_def.cpp:1:1, line:3:1> line:1:5 used f 'int (int)'
| |-ParmVarDecl 0x2dcf470 <col:7, col:11> col:11 used q 'int'
| `-CompoundStmt 0x2dcf5d8 <col:14, line:3:1>
|   `-ReturnStmt 0x2dcf5c8 <line:2:5, col:14>
|     `-BinaryOperator 0x2dcf5b0 <col:12, col:14> 'int' '+'
|       |-ImplicitCastExpr 0x2dcf5a0 <col:12> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x2dcf564 <col:12> 'int' lvalue ParmVar 0x2dcf470 'q' 'int'
|       `-IntegerLiteral 0x2dcf580 <col:14> 'int' 2
`-FunctionDecl 0x2dcf6e0 <line:5:1, line:34:1> line:5:5 main 'int (int, char **)'
  |-ParmVarDecl 0x2dcf600 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x2dcf660 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x2dcfd70 <col:33, line:34:1>
    |-DeclStmt 0x2dcf830 <line:6:2, col:18>
    | |-VarDecl 0x2dcf770 <col:2, col:10> col:6 used j 'int' cinit
    | | `-IntegerLiteral 0x2dcf7a0 <col:10> 'int' 0
    | `-VarDecl 0x2dcf7d0 <col:2, col:17> col:13 used q 'int' cinit
    |   `-IntegerLiteral 0x2dcf800 <col:17> 'int' 2
    |-CompoundStmt 0x2dcfa28 <line:8:2, line:19:2>
    | |-DeclStmt 0x2dcf8a0 <line:9:3, col:12>
    | | `-VarDecl 0x2dcf850 <col:3, col:11> col:7 j 'int' cinit
    | |   `-IntegerLiteral 0x2dcf880 <col:11> 'int' 3
    | `-CompoundStmt 0x2dcfa10 <line:10:3, line:18:3>
    |   |-DeclStmt 0x2dcf910 <line:11:4, col:19>
    |   | `-VarDecl 0x2dcf8c0 <col:4, col:14> col:10 j 'float' cinit
    |   |   `-FloatingLiteral 0x2dcf8f0 <col:14> 'float' 1.500000e+01
    |   `-CompoundStmt 0x2dcf9f8 <line:12:4, line:17:4>
    |     |-DeclStmt 0x2dcf960 <line:13:5, col:12>
    |     | `-VarDecl 0x2dcf930 <col:5, col:11> col:11 j 'float'
    |     `-CompoundStmt 0x2dcf9e0 <line:14:5, line:16:5>
    |       `-DeclStmt 0x2dcf9d0 <line:15:6, col:16>
    |         `-VarDecl 0x2dcf980 <col:6, col:14> col:10 j 'int' cinit
    |           `-IntegerLiteral 0x2dcf9b0 <col:14> 'int' 18
    |-IfStmt 0x2dcfb68 <line:20:5, line:21:9>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x2dcfa88 <line:20:9, col:14> '_Bool' '=='
    | | |-ImplicitCastExpr 0x2dcfa78 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x2dcfa40 <col:9> 'int' lvalue Var 0x2dcf770 'j' 'int'
    | | `-IntegerLiteral 0x2dcfa58 <col:14> 'int' 2
    | |-CallExpr 0x2dcfb38 <line:21:6, col:9> 'int'
    | | |-ImplicitCastExpr 0x2dcfb28 <col:6> 'int (*)(int)' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x2dcfaf0 <col:6> 'int (int)' lvalue Function 0x2dcf4f0 'f' 'int (int)'
    | | `-ImplicitCastExpr 0x2dcfb58 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x2dcfad8 <col:8> 'int' lvalue Var 0x2dcf7d0 'q' 'int'
    | `-<<<NULL>>>
    |-IfStmt 0x2dcfcc8 <line:23:5, line:30:5>
    | |-<<<NULL>>>
    | |-CXXBoolLiteralExpr 0x2dcfb88 <line:23:9> '_Bool' false
    | |-CompoundStmt 0x2dcfbe8 <col:15, line:25:5>
    | | `-BinaryOperator 0x2dcfbd0 <line:24:6, col:10> 'int' lvalue '='
    | |   |-DeclRefExpr 0x2dcfb98 <col:6> 'int' lvalue Var 0x2dcf7d0 'q' 'int'
    | |   `-IntegerLiteral 0x2dcfbb0 <col:10> 'int' 7
    | `-CompoundStmt 0x2dcfcb0 <line:26:10, line:30:5>
    |   `-WhileStmt 0x2dcfc98 <line:27:6, line:29:6>
    |     |-<<<NULL>>>
    |     |-CXXBoolLiteralExpr 0x2dcfc00 <line:27:13> '_Bool' true
    |     `-CompoundStmt 0x2dcfc80 <col:19, line:29:6>
    |       `-DeclStmt 0x2dcfc70 <line:28:7, col:16>
    |         `-VarDecl 0x2dcfc20 <col:7, col:15> col:11 k 'int' cinit
    |           `-IntegerLiteral 0x2dcfc50 <col:15> 'int' 0
    |-DeclStmt 0x2dcfd30 <line:32:5, col:10>
    | `-VarDecl 0x2dcfd00 <col:5, col:9> col:9 k 'int'
    `-ReturnStmt 0x2dcfd60 <line:33:5, col:12>
      `-IntegerLiteral 0x2dcfd40 <col:12> 'int' 0
