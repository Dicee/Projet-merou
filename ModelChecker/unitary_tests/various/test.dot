digraph {
"static char [100]   at (0,23:23) 0xd1c420"
"int (int) self(int value)  at (12:14,1:1) 0xd1c860" -> "ReturnStmt(value)  at (13,2:9) 0xd1c900"
"ReturnStmt(value)  at (13,2:9) 0xd1c900"
"int (int, char **) main(int argc, char ** argv)  at (16:89,1:1) 0xd1ca20" -> "int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0xd1cdf8"
"int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0xd1cdf8" -> "int len  = 14  at (18,2:14) 0xd1ce70"
"int len  = 14  at (18,2:14) 0xd1ce70" -> "int i , int j , int temp   at (19,2:16) 0xd60820"
"int i , int j , int temp   at (19,2:16) 0xd60820" -> "int sum  = 0  at (20,2:13) 0xd60890"
"int sum  = 0  at (20,2:13) 0xd60890" -> "(sum = increment(sum))  at (21,2:21) 0xd60988"
"(sum = increment(sum))  at (21,2:21) 0xd60988" -> "int i  = 0  at (22,7:16) 0xd60a00"
"int i  = 0  at (22,7:16) 0xd60a00" -> "for no_cond at (22:29,2:2) 0xd60c00"
"for no_cond at (22:29,2:2) 0xd60c00" -> "if (sum > 100) at (30:36,2:25) 0xd60ef0"
"for no_cond at (22:29,2:2) 0xd60c00" -> "(sum += i)  at (23,3:10) 0xd60a50"
"if (sum > 100) at (30:36,2:25) 0xd60ef0" -> "if (sum > 50) at (32:36,7:25) 0xd60ed0"
"if (sum > 100) at (30:36,2:25) 0xd60ef0" -> "(sum = 100)  at (31,3:9) 0xd60cc0"
"if (sum > 50) at (32:36,7:25) 0xd60ed0" -> "(sum = 50)  at (33,3:9) 0xd60d70"
"if (sum > 50) at (32:36,7:25) 0xd60ed0" -> "((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0xd60eb8"
"(sum = 50)  at (33,3:9) 0xd60d70" -> "ReturnStmt(1)  at (34,3:10) 0xd60da8"
"ReturnStmt(1)  at (34,3:10) 0xd60da8"
"((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0xd60eb8" -> "switch (sum / 10) at (38:46,2:2) 0xd60f70"
"switch (sum / 10) at (38:46,2:2) 0xd60f70" -> "(sum += 10)  at (45,3:10) 0xd610f0"
"switch (sum / 10) at (38:46,2:2) 0xd60f70" -> "2  at (42:43,2:9) 0xd61048"
"switch (sum / 10) at (38:46,2:2) 0xd60f70" -> "1  at (39:40,2:9) 0xd60fb0"
"(sum += 10)  at (45,3:10) 0xd610f0" -> "self(sum)  at (47,2:10) 0xd611c0"
"self(sum)  at (47,2:10) 0xd611c0" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0xd61d90"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0xd61d90" -> "(sum = 10000)  at (50,3:9) 0xd613f0"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0xd61d90" -> "for (sum > 0) at (52:66,3:4) 0xd61d50"
"(sum = 10000)  at (50,3:9) 0xd613f0" -> "switch sum at (69:83,2:2) 0xd61e18"
"switch sum at (69:83,2:2) 0xd61e18" -> "4  at (79:81,2:6) 0xd61f98"
"switch sum at (69:83,2:2) 0xd61e18" -> "2  at (75:76,2:3) 0xd61f00"
"switch sum at (69:83,2:2) 0xd61e18" -> "sum++  at (81,3:6) 0xd61fd0"
"switch sum at (69:83,2:2) 0xd61e18" -> "1  at (70:74,2:4) 0xd61e58"
"switch sum at (69:83,2:2) 0xd61e18" -> "3  at (77:78,2:8) 0xd61f48"
"4  at (79:81,2:6) 0xd61f98" -> "sum++  at (81,3:6) 0xd61fd0"
"sum++  at (81,3:6) 0xd61fd0" -> "sum--  at (82,3:6) 0xd62018"
"sum--  at (82,3:6) 0xd62018" -> "int [100][100][100] array   at (85,2:26) 0xd621b0"
"int [100][100][100] array   at (85,2:26) 0xd621b0" -> "(sum = array[10][10][10])  at (86,2:24) 0xd62308"
"(sum = array[10][10][10])  at (86,2:24) 0xd62308" -> "ReturnStmt(0)  at (88,2:9) 0xd62340"
"ReturnStmt(0)  at (88,2:9) 0xd62340"
"2  at (75:76,2:3) 0xd61f00" -> "int [100][100][100] array   at (85,2:26) 0xd621b0"
"1  at (70:74,2:4) 0xd61e58" -> "if 1 at (71:74,3:4) 0xd61ec0"
"if 1 at (71:74,3:4) 0xd61ec0" -> "int [100][100][100] array   at (85,2:26) 0xd621b0"
"if 1 at (71:74,3:4) 0xd61ec0" -> "2  at (75:76,2:3) 0xd61f00"
"3  at (77:78,2:8) 0xd61f48" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0xd61d90"
"for (sum > 0) at (52:66,3:4) 0xd61d50" -> "switch sum at (53:66,4:4) 0xd614e8"
"for (sum > 0) at (52:66,3:4) 0xd61d50" -> "switch sum at (69:83,2:2) 0xd61e18"
"switch sum at (53:66,4:4) 0xd614e8" -> "3  at (57:58,4:8) 0xd615b0"
"switch sum at (53:66,4:4) 0xd614e8" -> "1  at (54:56,4:5) 0xd61528"
"switch sum at (53:66,4:4) 0xd614e8" -> "2  at (55:56,4:5) 0xd61568"
"3  at (57:58,4:8) 0xd615b0" -> "sum++  at (58,5:8) 0xd615e8"
"sum++  at (58,5:8) 0xd615e8" -> "(i = 0)  at (59,10:14) 0xd61638"
"(i = 0)  at (59,10:14) 0xd61638" -> "for (i < (len - 1)) at (59:65,5:7) 0xd61d08"
"for (i < (len - 1)) at (59:65,5:7) 0xd61d08" -> "(j = 0)  at (60,11:15) 0xd61758"
"for (i < (len - 1)) at (59:65,5:7) 0xd61d08" -> "(sum += 2)  at (52,19:26) 0xd614a0"
"(j = 0)  at (60,11:15) 0xd61758" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0xd61ce0"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0xd61ce0" -> "if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0xd61cc0"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0xd61ce0" -> "i++  at (59,30:31) 0xd61708"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0xd61cc0" -> "j++  at (60,35:36) 0xd61878"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0xd61cc0" -> "(temp = arr[j])  at (62,8:20) 0xd61a78"
"j++  at (60,35:36) 0xd61878" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0xd61ce0"
"(temp = arr[j])  at (62,8:20) 0xd61a78" -> "(arr[j] = arr[(j + 1)])  at (63,8:26) 0xd61ba8"
"(arr[j] = arr[(j + 1)])  at (63,8:26) 0xd61ba8" -> "(arr[(j + 1)] = temp)  at (64,8:21) 0xd61c88"
"(arr[(j + 1)] = temp)  at (64,8:21) 0xd61c88" -> "j++  at (60,35:36) 0xd61878"
"i++  at (59,30:31) 0xd61708" -> "for (i < (len - 1)) at (59:65,5:7) 0xd61d08"
"(sum += 2)  at (52,19:26) 0xd614a0" -> "for (sum > 0) at (52:66,3:4) 0xd61d50"
"1  at (54:56,4:5) 0xd61528" -> "2  at (55:56,4:5) 0xd61568"
"2  at (55:56,4:5) 0xd61568" -> "(sum += 2)  at (52,19:26) 0xd614a0"
"2  at (42:43,2:9) 0xd61048" -> "(sum = 30)  at (43,3:9) 0xd610a0"
"(sum = 30)  at (43,3:9) 0xd610a0" -> "(sum += 10)  at (45,3:10) 0xd610f0"
"1  at (39:40,2:9) 0xd60fb0" -> "(sum = 20)  at (40,3:9) 0xd61008"
"(sum = 20)  at (40,3:9) 0xd61008" -> "self(sum)  at (47,2:10) 0xd611c0"
"(sum = 100)  at (31,3:9) 0xd60cc0" -> "switch (sum / 10) at (38:46,2:2) 0xd60f70"
"(sum += i)  at (23,3:10) 0xd60a50" -> "if (i == 8) at (24:25,3:4) 0xd60ad8"
"if (i == 8) at (24:25,3:4) 0xd60ad8" -> "if (i < 8) at (26:27,3:4) 0xd60b60"
"if (i == 8) at (24:25,3:4) 0xd60ad8" -> "if (sum > 100) at (30:36,2:25) 0xd60ef0"
"if (i < 8) at (26:27,3:4) 0xd60b60" -> "(sum *= i)  at (28,3:10) 0xd60bc0"
"if (i < 8) at (26:27,3:4) 0xd60b60" -> "for no_cond at (22:29,2:2) 0xd60c00"
"(sum *= i)  at (28,3:10) 0xd60bc0" -> "for no_cond at (22:29,2:2) 0xd60c00"
"void (int &, int) increment(int & value, int steps)  at (8:10,1:1) 0xd1c700" -> "(value += steps)  at (9,2:11) 0xd1c7b8"
"(value += steps)  at (9,2:11) 0xd1c7b8"
"int globVar  = 0  at (2,1:15) 0xd1c460"
}