digraph {
"static char [100]   at (0,23:23) 0x2f9dbd0"
"int (int) self(int value)  at (12:14,1:1) 0x2f9e010" -> "ReturnStmt(value)  at (13,2:9) 0x2f9e0b0"
"ReturnStmt(value)  at (13,2:9) 0x2f9e0b0"
"int (int, char **) main(int argc, char ** argv)  at (16:89,1:1) 0x2f9e1d0" -> "int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0x2f9e5a8"
"int [14] arr  = { 22,34,3,32,82,55,89,50,37,5,64,35,9,70 }  at (17,2:69) 0x2f9e5a8" -> "int len  = 14  at (18,2:14) 0x2f9e620"
"int len  = 14  at (18,2:14) 0x2f9e620" -> "int i , int j , int temp   at (19,2:16) 0x2fe2608"
"int i , int j , int temp   at (19,2:16) 0x2fe2608" -> "int sum  = 0  at (20,2:13) 0x2fe2680"
"int sum  = 0  at (20,2:13) 0x2fe2680" -> "(sum = increment(sum))  at (21,2:21) 0x2fe2778"
"(sum = increment(sum))  at (21,2:21) 0x2fe2778" -> "int i  = 0  at (22,7:16) 0x2fe27f0"
"int i  = 0  at (22,7:16) 0x2fe27f0" -> "for no_cond at (22:29,2:2) 0x2fe29f0"
"for no_cond at (22:29,2:2) 0x2fe29f0" -> "if (sum > 100) at (30:36,2:25) 0x2fe2ce0"
"for no_cond at (22:29,2:2) 0x2fe29f0" -> "(sum += i)  at (23,3:10) 0x2fe2840"
"if (sum > 100) at (30:36,2:25) 0x2fe2ce0" -> "(sum = 100)  at (31,3:9) 0x2fe2ab0"
"if (sum > 100) at (30:36,2:25) 0x2fe2ce0" -> "if (sum > 50) at (32:36,7:25) 0x2fe2cc0"
"(sum = 100)  at (31,3:9) 0x2fe2ab0" -> "switch (sum / 10) at (38:46,2:2) 0x2fe2d60"
"switch (sum / 10) at (38:46,2:2) 0x2fe2d60" -> "(sum += 10)  at (45,3:10) 0x2fe2ee0"
"switch (sum / 10) at (38:46,2:2) 0x2fe2d60" -> "1  at (39:40,2:9) 0x2fe2da0"
"switch (sum / 10) at (38:46,2:2) 0x2fe2d60" -> "2  at (42:43,2:9) 0x2fe2e38"
"(sum += 10)  at (45,3:10) 0x2fe2ee0" -> "self(sum)  at (47,2:10) 0x2fe2fb0"
"self(sum)  at (47,2:10) 0x2fe2fb0" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x2fe5b90"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x2fe5b90" -> "(sum = 10000)  at (50,3:9) 0x2fe31e0"
"if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x2fe5b90" -> "for (sum > 0) at (52:66,3:4) 0x2fe5b50"
"(sum = 10000)  at (50,3:9) 0x2fe31e0" -> "switch sum at (69:83,2:2) 0x2fe5c18"
"switch sum at (69:83,2:2) 0x2fe5c18" -> "4  at (79:81,2:6) 0x2fe5d98"
"switch sum at (69:83,2:2) 0x2fe5c18" -> "2  at (75:76,2:3) 0x2fe5d00"
"switch sum at (69:83,2:2) 0x2fe5c18" -> "sum++  at (81,3:6) 0x2fe5dd0"
"switch sum at (69:83,2:2) 0x2fe5c18" -> "1  at (70:74,2:4) 0x2fe5c58"
"switch sum at (69:83,2:2) 0x2fe5c18" -> "3  at (77:78,2:8) 0x2fe5d48"
"4  at (79:81,2:6) 0x2fe5d98" -> "sum++  at (81,3:6) 0x2fe5dd0"
"sum++  at (81,3:6) 0x2fe5dd0" -> "sum--  at (82,3:6) 0x2fe5e18"
"sum--  at (82,3:6) 0x2fe5e18" -> "int [100][100][100] array   at (85,2:26) 0x2fe5fb0"
"int [100][100][100] array   at (85,2:26) 0x2fe5fb0" -> "(sum = array[10][10][10])  at (86,2:24) 0x2fe6108"
"(sum = array[10][10][10])  at (86,2:24) 0x2fe6108" -> "ReturnStmt(0)  at (88,2:9) 0x2fe6140"
"ReturnStmt(0)  at (88,2:9) 0x2fe6140"
"2  at (75:76,2:3) 0x2fe5d00" -> "int [100][100][100] array   at (85,2:26) 0x2fe5fb0"
"1  at (70:74,2:4) 0x2fe5c58" -> "if 1 at (71:74,3:4) 0x2fe5cc0"
"if 1 at (71:74,3:4) 0x2fe5cc0" -> "2  at (75:76,2:3) 0x2fe5d00"
"if 1 at (71:74,3:4) 0x2fe5cc0" -> "int [100][100][100] array   at (85,2:26) 0x2fe5fb0"
"3  at (77:78,2:8) 0x2fe5d48" -> "if ((sum == 19) ? ((sum = 20) , (sum -= 10)) : (sum = 30)) at (49:67,8:2) 0x2fe5b90"
"for (sum > 0) at (52:66,3:4) 0x2fe5b50" -> "switch sum at (69:83,2:2) 0x2fe5c18"
"for (sum > 0) at (52:66,3:4) 0x2fe5b50" -> "switch sum at (53:66,4:4) 0x2fe32d8"
"switch sum at (53:66,4:4) 0x2fe32d8" -> "1  at (54:56,4:5) 0x2fe3318"
"switch sum at (53:66,4:4) 0x2fe32d8" -> "2  at (55:56,4:5) 0x2fe3358"
"switch sum at (53:66,4:4) 0x2fe32d8" -> "3  at (57:58,4:8) 0x2fe33a0"
"1  at (54:56,4:5) 0x2fe3318" -> "2  at (55:56,4:5) 0x2fe3358"
"2  at (55:56,4:5) 0x2fe3358" -> "(sum += 2)  at (52,19:26) 0x2fe3290"
"(sum += 2)  at (52,19:26) 0x2fe3290" -> "for (sum > 0) at (52:66,3:4) 0x2fe5b50"
"3  at (57:58,4:8) 0x2fe33a0" -> "sum++  at (58,5:8) 0x2fe33d8"
"sum++  at (58,5:8) 0x2fe33d8" -> "(i = 0)  at (59,10:14) 0x2fe3428"
"(i = 0)  at (59,10:14) 0x2fe3428" -> "for (i < (len - 1)) at (59:65,5:7) 0x2fe5b08"
"for (i < (len - 1)) at (59:65,5:7) 0x2fe5b08" -> "(j = 0)  at (60,11:15) 0x2fe3548"
"for (i < (len - 1)) at (59:65,5:7) 0x2fe5b08" -> "(sum += 2)  at (52,19:26) 0x2fe3290"
"(j = 0)  at (60,11:15) 0x2fe3548" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0x2fe5ae0"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0x2fe5ae0" -> "i++  at (59,30:31) 0x2fe34f8"
"for (j < ((len - 1) - i)) at (60:65,6:7) 0x2fe5ae0" -> "if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x2fe5ac0"
"i++  at (59,30:31) 0x2fe34f8" -> "for (i < (len - 1)) at (59:65,5:7) 0x2fe5b08"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x2fe5ac0" -> "j++  at (60,35:36) 0x2fe5678"
"if (arr[j] > arr[(j + 1)]) at (61:65,7:7) 0x2fe5ac0" -> "(temp = arr[j])  at (62,8:20) 0x2fe5878"
"j++  at (60,35:36) 0x2fe5678" -> "for (j < ((len - 1) - i)) at (60:65,6:7) 0x2fe5ae0"
"(temp = arr[j])  at (62,8:20) 0x2fe5878" -> "(arr[j] = arr[(j + 1)])  at (63,8:26) 0x2fe59a8"
"(arr[j] = arr[(j + 1)])  at (63,8:26) 0x2fe59a8" -> "(arr[(j + 1)] = temp)  at (64,8:21) 0x2fe5a88"
"(arr[(j + 1)] = temp)  at (64,8:21) 0x2fe5a88" -> "j++  at (60,35:36) 0x2fe5678"
"1  at (39:40,2:9) 0x2fe2da0" -> "(sum = 20)  at (40,3:9) 0x2fe2df8"
"(sum = 20)  at (40,3:9) 0x2fe2df8" -> "self(sum)  at (47,2:10) 0x2fe2fb0"
"2  at (42:43,2:9) 0x2fe2e38" -> "(sum = 30)  at (43,3:9) 0x2fe2e90"
"(sum = 30)  at (43,3:9) 0x2fe2e90" -> "(sum += 10)  at (45,3:10) 0x2fe2ee0"
"if (sum > 50) at (32:36,7:25) 0x2fe2cc0" -> "((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0x2fe2ca8"
"if (sum > 50) at (32:36,7:25) 0x2fe2cc0" -> "(sum = 50)  at (33,3:9) 0x2fe2b60"
"((sum -= 5) , (sum = (sum + 10)))  at (36,3:25) 0x2fe2ca8" -> "switch (sum / 10) at (38:46,2:2) 0x2fe2d60"
"(sum = 50)  at (33,3:9) 0x2fe2b60" -> "ReturnStmt(1)  at (34,3:10) 0x2fe2b98"
"ReturnStmt(1)  at (34,3:10) 0x2fe2b98"
"(sum += i)  at (23,3:10) 0x2fe2840" -> "if (i == 8) at (24:25,3:4) 0x2fe28c8"
"if (i == 8) at (24:25,3:4) 0x2fe28c8" -> "if (sum > 100) at (30:36,2:25) 0x2fe2ce0"
"if (i == 8) at (24:25,3:4) 0x2fe28c8" -> "if (i < 8) at (26:27,3:4) 0x2fe2950"
"if (i < 8) at (26:27,3:4) 0x2fe2950" -> "(sum *= i)  at (28,3:10) 0x2fe29b0"
"if (i < 8) at (26:27,3:4) 0x2fe2950" -> "for no_cond at (22:29,2:2) 0x2fe29f0"
"(sum *= i)  at (28,3:10) 0x2fe29b0" -> "for no_cond at (22:29,2:2) 0x2fe29f0"
"void (int &, int) increment(int & value, int steps)  at (8:10,1:1) 0x2f9deb0" -> "(value += steps)  at (9,2:11) 0x2f9df68"
"(value += steps)  at (9,2:11) 0x2f9df68"
"int globVar  = 0  at (2,1:15) 0x2f9dc10"
}