TranslationUnitDecl 0x2f2f080 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2f2f370 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-FunctionDecl 0x2f2f3e0 <ModelChecker\unitary_tests\ast\for\for_x_x_x_x.cpp:1:1, line:3:1> line:1:5 used f 'int (void)'
| `-CompoundStmt 0x2f2f480 <col:9, line:3:1>
|   `-ReturnStmt 0x2f2f470 <line:2:5, col:12>
|     `-IntegerLiteral 0x2f2f450 <col:12> 'int' 3
`-FunctionDecl 0x2f2f590 <line:5:1, line:10:1> line:5:5 main 'int (int, char **)'
  |-ParmVarDecl 0x2f2f4b0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x2f2f510 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x2f2f900 <col:33, line:10:1>
    |-DeclStmt 0x2f2f6e8 <line:6:5, col:16>
    | `-VarDecl 0x2f2f620 <col:5, col:15> col:9 j 'int' cinit
    |   `-CallExpr 0x2f2f6c8 <col:13, col:15> 'int'
    |     `-ImplicitCastExpr 0x2f2f6b8 <col:13> 'int (*)(void)' <FunctionToPointerDecay>
    |       `-DeclRefExpr 0x2f2f688 <col:13> 'int (void)' lvalue Function 0x2f2f3e0 'f' 'int (void)'
    |-ForStmt 0x2f2f858 <line:7:5, line:8:14>
    | |-DeclStmt 0x2f2f760 <line:7:10, col:18>
    | | `-VarDecl 0x2f2f710 <col:10, col:16> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x2f2f740 <col:16> 'int' 3
    | |-<<<NULL>>>
    | |-BinaryOperator 0x2f2f7b8 <col:20, col:22> '_Bool' '<'
    | | |-ImplicitCastExpr 0x2f2f7a8 <col:20> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x2f2f770 <col:20> 'int' lvalue Var 0x2f2f710 'i' 'int'
    | | `-IntegerLiteral 0x2f2f788 <col:22> 'int' 5
    | |-UnaryOperator 0x2f2f7e8 <col:26, col:27> 'int' postfix '++'
    | | `-DeclRefExpr 0x2f2f7d0 <col:26> 'int' lvalue Var 0x2f2f710 'i' 'int'
    | `-CompoundAssignOperator 0x2f2f838 <line:8:9, col:14> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |-DeclRefExpr 0x2f2f7fc <col:9> 'int' lvalue Var 0x2f2f710 'i' 'int'
    |   `-IntegerLiteral 0x2f2f818 <col:14> 'int' 2
    `-CallExpr 0x2f2f8e0 <line:9:5, col:7> 'int'
      `-ImplicitCastExpr 0x2f2f8d0 <col:5> 'int (*)(void)' <FunctionToPointerDecay>
        `-DeclRefExpr 0x2f2f8b8 <col:5> 'int (void)' lvalue Function 0x2f2f3e0 'f' 'int (void)'
