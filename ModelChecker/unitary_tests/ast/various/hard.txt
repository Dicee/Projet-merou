TranslationUnitDecl 0x327bc00 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x327bef0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-VarDecl 0x327bf80 <ModelChecker\unitary_tests\ast\various\hard.cpp:1:1, col:23> col:13 staVar 'char [100]' static
|-VarDecl 0x327bfc0 <line:2:1, col:15> col:5 globVar 'int' cinit
| `-IntegerLiteral 0x327bff0 <col:15> 'int' 0
|-FunctionDecl 0x327c0a0 <line:4:1, line:6:1> line:4:5 used increment 'int (int)'
| |-ParmVarDecl 0x327c020 <col:15, col:19> col:19 used value 'int'
| `-CompoundStmt 0x327c168 <col:26, line:6:1>
|   `-ReturnStmt 0x327c158 <line:5:5, col:14>
|     `-ImplicitCastExpr 0x327c148 <col:12, col:14> 'int' <LValueToRValue>
|       `-UnaryOperator 0x327c130 <col:12, col:14> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x327c114 <col:14> 'int' lvalue ParmVar 0x327c020 'value' 'int'
|-FunctionDecl 0x327c260 <line:8:1, line:10:1> line:8:6 increment 'void (int &, int)'
| |-ParmVarDecl 0x327c1b0 <col:16, col:21> col:21 used value 'int &'
| |-ParmVarDecl 0x327c1f0 <col:28, col:32> col:32 used steps 'int'
| `-CompoundStmt 0x327c338 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x327c318 <line:9:5, col:14> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x327c2d8 <col:5> 'int' lvalue ParmVar 0x327c1b0 'value' 'int &'
|     `-ImplicitCastExpr 0x327c308 <col:14> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x327c2f0 <col:14> 'int' lvalue ParmVar 0x327c1f0 'steps' 'int'
|-FunctionDecl 0x327c3c0 <line:12:1, line:14:1> line:12:5 used self 'int (int)'
| |-ParmVarDecl 0x327c360 <col:10, col:14> col:14 used value 'int'
| `-CompoundStmt 0x327c470 <col:21, line:14:1>
|   `-ReturnStmt 0x327c460 <line:13:5, col:12>
|     `-ImplicitCastExpr 0x327c450 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x327c434 <col:12> 'int' lvalue ParmVar 0x327c360 'value' 'int'
`-FunctionDecl 0x327c580 <line:16:1, line:89:1> line:16:5 main 'int (int, char **)'
  |-ParmVarDecl 0x327c4a0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x327c500 <col:20, col:28> col:28 argv 'char **'
  `-CompoundStmt 0x32c49e0 <col:34, line:89:1>
    |-DeclStmt 0x327c958 <line:17:5, col:72>
    | `-VarDecl 0x327c640 <col:5, col:71> col:9 used arr 'int [14]' cinit
    |   `-InitListExpr 0x327c890 <col:17, col:71> 'int [14]'
    |     |-IntegerLiteral 0x327c670 <col:19> 'int' 22
    |     |-IntegerLiteral 0x327c690 <col:23> 'int' 34
    |     |-IntegerLiteral 0x327c6b0 <col:27> 'int' 3
    |     |-IntegerLiteral 0x327c6d0 <col:30> 'int' 32
    |     |-IntegerLiteral 0x327c6f0 <col:34> 'int' 82
    |     |-IntegerLiteral 0x327c710 <col:38> 'int' 55
    |     |-IntegerLiteral 0x327c730 <col:42> 'int' 89
    |     |-IntegerLiteral 0x327c750 <col:46> 'int' 50
    |     |-IntegerLiteral 0x327c770 <col:50> 'int' 37
    |     |-IntegerLiteral 0x327c790 <col:54> 'int' 5
    |     |-IntegerLiteral 0x327c7b0 <col:57> 'int' 64
    |     |-IntegerLiteral 0x327c7d0 <col:61> 'int' 35
    |     |-IntegerLiteral 0x327c7f0 <col:65> 'int' 9
    |     `-IntegerLiteral 0x327c810 <col:68> 'int' 70
    |-DeclStmt 0x327c9d0 <line:18:5, col:17>
    | `-VarDecl 0x327c980 <col:5, col:15> col:9 used len 'int' cinit
    |   `-IntegerLiteral 0x327c9b0 <col:15> 'int' 14
    |-DeclStmt 0x32c2ea0 <line:19:5, col:19>
    | |-VarDecl 0x327c9f0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x327ca30 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x32c2e60 <col:5, col:15> col:15 used temp 'int'
    |-DeclStmt 0x32c2f10 <line:20:5, col:16>
    | `-VarDecl 0x32c2ec0 <col:5, col:15> col:9 used sum 'int' cinit
    |   `-IntegerLiteral 0x32c2ef0 <col:15> 'int' 0
    |-BinaryOperator 0x32c3008 <line:21:5, col:24> 'int' lvalue '='
    | |-DeclRefExpr 0x32c2f20 <col:5> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | `-CallExpr 0x32c2fd8 <col:11, col:24> 'int'
    |   |-ImplicitCastExpr 0x32c2fc8 <col:11> 'int (*)(int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x32c2f8c <col:11> 'int (int)' lvalue Function 0x327c0a0 'increment' 'int (int)'
    |   `-ImplicitCastExpr 0x32c2ff8 <col:21> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x32c2f74 <col:21> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |-ForStmt 0x32c3280 <line:22:5, line:29:5>
    | |-DeclStmt 0x32c3080 <line:22:10, col:19>
    | | `-VarDecl 0x32c3030 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x32c3060 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x32c3260 <col:23, line:29:5>
    |   |-CompoundAssignOperator 0x32c30d0 <line:23:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x32c3090 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   | `-ImplicitCastExpr 0x32c30c0 <col:16> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x32c30a8 <col:16> 'int' lvalue Var 0x32c3030 'i' 'int'
    |   |-IfStmt 0x32c3158 <line:24:9, line:25:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x32c3138 <line:24:13, col:18> '_Bool' '=='
    |   | | |-ImplicitCastExpr 0x32c3128 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x32c30f0 <col:13> 'int' lvalue Var 0x32c3030 'i' 'int'
    |   | | `-IntegerLiteral 0x32c3108 <col:18> 'int' 8
    |   | |-BreakStmt 0x32c3150 <line:25:13>
    |   | `-<<<NULL>>>
    |   |-IfStmt 0x32c31e0 <line:26:9, line:27:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x32c31c0 <line:26:13, col:17> '_Bool' '<'
    |   | | |-ImplicitCastExpr 0x32c31b0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x32c3174 <col:13> 'int' lvalue Var 0x32c3030 'i' 'int'
    |   | | `-IntegerLiteral 0x32c3190 <col:17> 'int' 8
    |   | |-ContinueStmt 0x32c31d8 <line:27:13>
    |   | `-<<<NULL>>>
    |   `-CompoundAssignOperator 0x32c3240 <line:28:9, col:16> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x32c31fc <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |     `-ImplicitCastExpr 0x32c3230 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x32c3214 <col:16> 'int' lvalue Var 0x32c3030 'i' 'int'
    |-IfStmt 0x32c3570 <line:30:5, line:36:31>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x32c32f0 <line:30:9, col:15> '_Bool' '>'
    | | |-ImplicitCastExpr 0x32c32e0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x32c32a4 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | | `-IntegerLiteral 0x32c32c0 <col:15> 'int' 100
    | |-BinaryOperator 0x32c3340 <line:31:9, col:15> 'int' lvalue '='
    | | |-DeclRefExpr 0x32c3308 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | | `-IntegerLiteral 0x32c3320 <col:15> 'int' 100
    | `-IfStmt 0x32c3550 <line:32:10, line:36:31>
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0x32c33a0 <line:32:14, col:20> '_Bool' '>'
    |   | |-ImplicitCastExpr 0x32c3390 <col:14> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x32c3358 <col:14> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   | `-IntegerLiteral 0x32c3370 <col:20> 'int' 50
    |   |-CompoundStmt 0x32c3438 <col:24, line:35:5>
    |   | |-BinaryOperator 0x32c33f0 <line:33:9, col:15> 'int' lvalue '='
    |   | | |-DeclRefExpr 0x32c33b8 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   | | `-IntegerLiteral 0x32c33d0 <col:15> 'int' 50
    |   | `-ReturnStmt 0x32c3428 <line:34:9, col:16>
    |   |   `-IntegerLiteral 0x32c3408 <col:16> 'int' 1
    |   `-BinaryOperator 0x32c3538 <line:36:9, col:31> 'int' lvalue ','
    |     |-CompoundAssignOperator 0x32c3488 <col:9, col:16> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |-DeclRefExpr 0x32c3450 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |     | `-IntegerLiteral 0x32c3468 <col:16> 'int' 5
    |     `-BinaryOperator 0x32c3520 <col:19, col:31> 'int' lvalue '='
    |       |-DeclRefExpr 0x32c34a8 <col:19> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |       `-BinaryOperator 0x32c3508 <col:25, col:31> 'int' '+'
    |         |-ImplicitCastExpr 0x32c34f8 <col:25> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x32c34c0 <col:25> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |         `-IntegerLiteral 0x32c34d8 <col:31> 'int' 10
    |-SwitchStmt 0x32c35f0 <line:38:5, line:46:5>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x32c35d8 <line:38:13, col:19> 'int' '/'
    | | |-ImplicitCastExpr 0x32c35c8 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x32c358c <col:13> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | | `-IntegerLiteral 0x32c35a8 <col:19> 'int' 10
    | `-CompoundStmt 0x32c37a8 <col:23, line:46:5>
    |   |-CaseStmt 0x32c3630 <line:39:5, line:40:15>
    |   | |-IntegerLiteral 0x32c3610 <line:39:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x32c3688 <line:40:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x32c3650 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |   `-IntegerLiteral 0x32c3668 <col:15> 'int' 20
    |   |-BreakStmt 0x32c36a0 <line:41:9>
    |   |-CaseStmt 0x32c36c8 <line:42:5, line:43:15>
    |   | |-IntegerLiteral 0x32c36a8 <line:42:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x32c3720 <line:43:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x32c36e8 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |   `-IntegerLiteral 0x32c3700 <col:15> 'int' 30
    |   `-DefaultStmt 0x32c3790 <line:44:5, line:45:16>
    |     `-CompoundAssignOperator 0x32c3770 <col:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |-DeclRefExpr 0x32c3738 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |       `-IntegerLiteral 0x32c3750 <col:16> 'int' 10
    |-CallExpr 0x32c3840 <line:47:5, col:13> 'int'
    | |-ImplicitCastExpr 0x32c3830 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x32c3818 <col:5> 'int (int)' lvalue Function 0x327c3c0 'self' 'int (int)'
    | `-ImplicitCastExpr 0x32c3860 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x32c3800 <col:10> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |-LabelStmt 0x32c4470 <line:49:1, line:67:5> 'label'
    | `-IfStmt 0x32c4420 <line:49:8, line:67:5>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0x32c3a28 <line:49:12, col:54> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0x32c3a18 <col:12, col:54> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0x32c39f8 <col:12, col:54> 'int' lvalue
    |   |     |-BinaryOperator 0x32c38b8 <col:12, col:19> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0x32c38a8 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x32c386c <col:12> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |     | `-IntegerLiteral 0x32c3888 <col:19> 'int' 19
    |   |     |-ParenExpr 0x32c3990 <col:24, col:44> 'int' lvalue
    |   |     | `-BinaryOperator 0x32c3978 <col:25, col:42> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0x32c3908 <col:25, col:31> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0x32c38d0 <col:25> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0x32c38e8 <col:31> 'int' 20
    |   |     |   `-CompoundAssignOperator 0x32c3958 <col:35, col:42> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0x32c3920 <col:35> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0x32c3938 <col:42> 'int' 10
    |   |     `-BinaryOperator 0x32c39e0 <col:48, col:54> 'int' lvalue '='
    |   |       |-DeclRefExpr 0x32c39a4 <col:48> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   |       `-IntegerLiteral 0x32c39c0 <col:54> 'int' 30
    |   |-BinaryOperator 0x32c3a70 <line:50:9, col:15> 'int' lvalue '='
    |   | |-DeclRefExpr 0x32c3a34 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   | `-IntegerLiteral 0x32c3a50 <col:15> 'int' 10000
    |   `-CompoundStmt 0x32c4408 <line:51:10, line:67:5>
    |     `-ForStmt 0x32c43e0 <line:52:9, line:66:13>
    |       |-<<<NULL>>>
    |       |-<<<NULL>>>
    |       |-BinaryOperator 0x32c3ad0 <line:52:16, col:22> '_Bool' '>'
    |       | |-ImplicitCastExpr 0x32c3ac0 <col:16> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x32c3a88 <col:16> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |       | `-IntegerLiteral 0x32c3aa0 <col:22> 'int' 0
    |       |-CompoundAssignOperator 0x32c3b20 <col:25, col:32> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0x32c3ae8 <col:25> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |       | `-IntegerLiteral 0x32c3b00 <col:32> 'int' 2
    |       `-SwitchStmt 0x32c3b68 <line:53:13, line:66:13>
    |         |-<<<NULL>>>
    |         |-ImplicitCastExpr 0x32c3b58 <line:53:21> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x32c3b40 <col:21> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |         `-CompoundStmt 0x32c43c0 <col:26, line:66:13>
    |           |-CaseStmt 0x32c3ba8 <line:54:13, line:56:17>
    |           | |-IntegerLiteral 0x32c3b88 <line:54:18> 'int' 1
    |           | |-<<<NULL>>>
    |           | `-CaseStmt 0x32c3be8 <line:55:13, line:56:17>
    |           |   |-IntegerLiteral 0x32c3bc8 <line:55:18> 'int' 2
    |           |   |-<<<NULL>>>
    |           |   `-BreakStmt 0x32c3c08 <line:56:17>
    |           |-CaseStmt 0x32c3c30 <line:57:13, line:58:20>
    |           | |-IntegerLiteral 0x32c3c10 <line:57:18> 'int' 3
    |           | |-<<<NULL>>>
    |           | `-UnaryOperator 0x32c3c68 <line:58:17, col:20> 'int' postfix '++'
    |           |   `-DeclRefExpr 0x32c3c50 <col:17> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |           `-ForStmt 0x32c4398 <line:59:17, line:65:25>
    |             |-BinaryOperator 0x32c3cb8 <line:59:22, col:26> 'int' lvalue '='
    |             | |-DeclRefExpr 0x32c3c7c <col:22> 'int' lvalue Var 0x327c9f0 'i' 'int'
    |             | `-IntegerLiteral 0x32c3c98 <col:26> 'int' 0
    |             |-<<<NULL>>>
    |             |-BinaryOperator 0x32c3d58 <col:29, col:39> '_Bool' '<'
    |             | |-ImplicitCastExpr 0x32c3d48 <col:29> 'int' <LValueToRValue>
    |             | | `-DeclRefExpr 0x32c3cd0 <col:29> 'int' lvalue Var 0x327c9f0 'i' 'int'
    |             | `-BinaryOperator 0x32c3d30 <col:33, col:39> 'int' '-'
    |             |   |-ImplicitCastExpr 0x32c3d20 <col:33> 'int' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x32c3ce8 <col:33> 'int' lvalue Var 0x327c980 'len' 'int'
    |             |   `-IntegerLiteral 0x32c3d00 <col:39> 'int' 1
    |             |-UnaryOperator 0x32c3d88 <col:42, col:43> 'int' postfix '++'
    |             | `-DeclRefExpr 0x32c3d70 <col:42> 'int' lvalue Var 0x327c9f0 'i' 'int'
    |             `-ForStmt 0x32c4370 <line:60:21, line:65:25>
    |               |-BinaryOperator 0x32c3dd8 <line:60:26, col:30> 'int' lvalue '='
    |               | |-DeclRefExpr 0x32c3d9c <col:26> 'int' lvalue Var 0x327ca30 'j' 'int'
    |               | `-IntegerLiteral 0x32c3db8 <col:30> 'int' 0
    |               |-<<<NULL>>>
    |               |-BinaryOperator 0x32c3ed0 <col:33, col:47> '_Bool' '<'
    |               | |-ImplicitCastExpr 0x32c3ec0 <col:33> 'int' <LValueToRValue>
    |               | | `-DeclRefExpr 0x32c3df0 <col:33> 'int' lvalue Var 0x327ca30 'j' 'int'
    |               | `-BinaryOperator 0x32c3ea8 <col:37, col:47> 'int' '-'
    |               |   |-BinaryOperator 0x32c3e68 <col:37, col:43> 'int' '-'
    |               |   | |-ImplicitCastExpr 0x32c3e40 <col:37> 'int' <LValueToRValue>
    |               |   | | `-DeclRefExpr 0x32c3e08 <col:37> 'int' lvalue Var 0x327c980 'len' 'int'
    |               |   | `-IntegerLiteral 0x32c3e20 <col:43> 'int' 1
    |               |   `-ImplicitCastExpr 0x32c3e98 <col:47> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0x32c3e80 <col:47> 'int' lvalue Var 0x327c9f0 'i' 'int'
    |               |-UnaryOperator 0x32c3f00 <col:50, col:51> 'int' postfix '++'
    |               | `-DeclRefExpr 0x32c3ee8 <col:50> 'int' lvalue Var 0x327ca30 'j' 'int'
    |               `-IfStmt 0x32c4350 <line:61:25, line:65:25>
    |                 |-<<<NULL>>>
    |                 |-BinaryOperator 0x32c4060 <line:61:29, col:47> '_Bool' '>'
    |                 | |-ImplicitCastExpr 0x32c4040 <col:29, col:34> 'int' <LValueToRValue>
    |                 | | `-ArraySubscriptExpr 0x32c3f88 <col:29, col:34> 'int' lvalue
    |                 | |   |-ImplicitCastExpr 0x32c3f68 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | |   | `-DeclRefExpr 0x32c3f14 <col:29> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 | |   `-ImplicitCastExpr 0x32c3f78 <col:33> 'int' <LValueToRValue>
    |                 | |     `-DeclRefExpr 0x32c3f2c <col:33> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 | `-ImplicitCastExpr 0x32c4050 <col:38, col:47> 'int' <LValueToRValue>
    |                 |   `-ArraySubscriptExpr 0x32c4028 <col:38, col:47> 'int' lvalue
    |                 |     |-ImplicitCastExpr 0x32c4018 <col:38> 'int *' <ArrayToPointerDecay>
    |                 |     | `-DeclRefExpr 0x32c3f9c <col:38> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 |     `-BinaryOperator 0x32c4000 <col:42, col:46> 'int' '+'
    |                 |       |-ImplicitCastExpr 0x32c3ff0 <col:42> 'int' <LValueToRValue>
    |                 |       | `-DeclRefExpr 0x32c3fb4 <col:42> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 |       `-IntegerLiteral 0x32c3fd0 <col:46> 'int' 1
    |                 |-CompoundStmt 0x32c4330 <col:50, line:65:25>
    |                 | |-BinaryOperator 0x32c4108 <line:62:29, col:41> 'int' lvalue '='
    |                 | | |-DeclRefExpr 0x32c4078 <col:29> 'int' lvalue Var 0x32c2e60 'temp' 'int'
    |                 | | `-ImplicitCastExpr 0x32c40f8 <col:36, col:41> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x32c40e0 <col:36, col:41> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x32c40c0 <col:36> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x32c4090 <col:36> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 | |     `-ImplicitCastExpr 0x32c40d0 <col:40> 'int' <LValueToRValue>
    |                 | |       `-DeclRefExpr 0x32c40a8 <col:40> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 | |-BinaryOperator 0x32c4238 <line:63:29, col:47> 'int' lvalue '='
    |                 | | |-ArraySubscriptExpr 0x32c4170 <col:29, col:34> 'int' lvalue
    |                 | | | |-ImplicitCastExpr 0x32c4150 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | | | | `-DeclRefExpr 0x32c4120 <col:29> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 | | | `-ImplicitCastExpr 0x32c4160 <col:33> 'int' <LValueToRValue>
    |                 | | |   `-DeclRefExpr 0x32c4138 <col:33> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 | | `-ImplicitCastExpr 0x32c4228 <col:38, col:47> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x32c4210 <col:38, col:47> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x32c4200 <col:38> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x32c4184 <col:38> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 | |     `-BinaryOperator 0x32c41e8 <col:42, col:46> 'int' '+'
    |                 | |       |-ImplicitCastExpr 0x32c41d8 <col:42> 'int' <LValueToRValue>
    |                 | |       | `-DeclRefExpr 0x32c419c <col:42> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 | |       `-IntegerLiteral 0x32c41b8 <col:46> 'int' 1
    |                 | `-BinaryOperator 0x32c4318 <line:64:29, col:42> 'int' lvalue '='
    |                 |   |-ArraySubscriptExpr 0x32c42d8 <col:29, col:38> 'int' lvalue
    |                 |   | |-ImplicitCastExpr 0x32c42c8 <col:29> 'int *' <ArrayToPointerDecay>
    |                 |   | | `-DeclRefExpr 0x32c4250 <col:29> 'int [14]' lvalue Var 0x327c640 'arr' 'int [14]'
    |                 |   | `-BinaryOperator 0x32c42b0 <col:33, col:37> 'int' '+'
    |                 |   |   |-ImplicitCastExpr 0x32c42a0 <col:33> 'int' <LValueToRValue>
    |                 |   |   | `-DeclRefExpr 0x32c4268 <col:33> 'int' lvalue Var 0x327ca30 'j' 'int'
    |                 |   |   `-IntegerLiteral 0x32c4280 <col:37> 'int' 1
    |                 |   `-ImplicitCastExpr 0x32c4308 <col:42> 'int' <LValueToRValue>
    |                 |     `-DeclRefExpr 0x32c42ec <col:42> 'int' lvalue Var 0x32c2e60 'temp' 'int'
    |                 `-<<<NULL>>>
    |-SwitchStmt 0x32c44a8 <line:69:5, line:83:5>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x32c4498 <line:69:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x32c4480 <col:13> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | `-CompoundStmt 0x32c46c0 <col:18, line:83:5>
    |   |-CaseStmt 0x32c44e8 <line:70:5, line:74:13>
    |   | |-IntegerLiteral 0x32c44c8 <line:70:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-IfStmt 0x32c4550 <line:71:9, line:74:13>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0x32c4528 <line:71:13> '_Bool' <IntegralToBoolean>
    |   |   | `-IntegerLiteral 0x32c4508 <col:13> 'int' 1
    |   |   |-NullStmt 0x32c4538 <line:72:13>
    |   |   `-BreakStmt 0x32c4548 <line:74:13>
    |   |-CaseStmt 0x32c4590 <line:75:5, line:76:9>
    |   | |-IntegerLiteral 0x32c4570 <line:75:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BreakStmt 0x32c45b0 <line:76:9>
    |   |-CaseStmt 0x32c45d8 <line:77:5, line:78:14>
    |   | |-IntegerLiteral 0x32c45b8 <line:77:10> 'int' 3
    |   | |-<<<NULL>>>
    |   | `-GotoStmt 0x32c45f8 <line:78:9, col:14> 'label' 0x32c4440
    |   |-CaseStmt 0x32c4628 <line:79:5, line:81:12>
    |   | |-IntegerLiteral 0x32c4608 <line:79:10> 'int' 4
    |   | |-<<<NULL>>>
    |   | `-DefaultStmt 0x32c4678 <line:80:5, line:81:12>
    |   |   `-UnaryOperator 0x32c4660 <col:9, col:12> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x32c4648 <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |   `-UnaryOperator 0x32c46a8 <line:82:9, col:12> 'int' postfix '--'
    |     `-DeclRefExpr 0x32c468c <col:9> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    |-DeclStmt 0x32c4840 <line:85:5, col:29>
    | `-VarDecl 0x32c4810 <col:5, col:28> col:9 used array 'int [100][100][100]'
    |-BinaryOperator 0x32c4998 <line:86:5, col:27> 'int' lvalue '='
    | |-DeclRefExpr 0x32c4850 <col:5> 'int' lvalue Var 0x32c2ec0 'sum' 'int'
    | `-ImplicitCastExpr 0x32c4988 <col:11, col:27> 'int' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x32c4970 <col:11, col:27> 'int' lvalue
    |     |-ImplicitCastExpr 0x32c4960 <col:11, col:23> 'int *' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0x32c4928 <col:11, col:23> 'int [100]' lvalue
    |     |   |-ImplicitCastExpr 0x32c4918 <col:11, col:19> 'int (*)[100]' <ArrayToPointerDecay>
    |     |   | `-ArraySubscriptExpr 0x32c48c8 <col:11, col:19> 'int [100][100]' lvalue
    |     |   |   |-ImplicitCastExpr 0x32c48b8 <col:11> 'int (*)[100][100]' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x32c4868 <col:11> 'int [100][100][100]' lvalue Var 0x32c4810 'array' 'int [100][100][100]'
    |     |   |   `-IntegerLiteral 0x32c4880 <col:17> 'int' 10
    |     |   `-IntegerLiteral 0x32c48e0 <col:21> 'int' 10
    |     `-IntegerLiteral 0x32c4940 <col:25> 'int' 10
    `-ReturnStmt 0x32c49d0 <line:88:5, col:12>
      `-IntegerLiteral 0x32c49b0 <col:12> 'int' 0
