TranslationUnitDecl 0xdbbc00 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xdbbef0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-VarDecl 0xdbbf80 <ModelChecker\unitary_tests\ast\various\hard.cpp:1:1, col:23> col:13 staVar 'char [100]' static
|-VarDecl 0xdbbfc0 <line:2:1, col:15> col:5 globVar 'int' cinit
| `-IntegerLiteral 0xdbbff0 <col:15> 'int' 0
|-FunctionDecl 0xdbc0a0 <line:4:1, line:6:1> line:4:5 used increment 'int (int)'
| |-ParmVarDecl 0xdbc020 <col:15, col:19> col:19 used value 'int'
| `-CompoundStmt 0xdbc168 <col:26, line:6:1>
|   `-ReturnStmt 0xdbc158 <line:5:5, col:14>
|     `-ImplicitCastExpr 0xdbc148 <col:12, col:14> 'int' <LValueToRValue>
|       `-UnaryOperator 0xdbc130 <col:12, col:14> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0xdbc114 <col:14> 'int' lvalue ParmVar 0xdbc020 'value' 'int'
|-FunctionDecl 0xdbc260 <line:8:1, line:10:1> line:8:6 increment 'void (int &, int)'
| |-ParmVarDecl 0xdbc1b0 <col:16, col:21> col:21 used value 'int &'
| |-ParmVarDecl 0xdbc1f0 <col:28, col:32> col:32 used steps 'int'
| `-CompoundStmt 0xdbc338 <col:39, line:10:1>
|   `-CompoundAssignOperator 0xdbc318 <line:9:5, col:14> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0xdbc2d8 <col:5> 'int' lvalue ParmVar 0xdbc1b0 'value' 'int &'
|     `-ImplicitCastExpr 0xdbc308 <col:14> 'int' <LValueToRValue>
|       `-DeclRefExpr 0xdbc2f0 <col:14> 'int' lvalue ParmVar 0xdbc1f0 'steps' 'int'
|-FunctionDecl 0xdbc3c0 <line:12:1, line:14:1> line:12:5 used self 'int (int)'
| |-ParmVarDecl 0xdbc360 <col:10, col:14> col:14 used value 'int'
| `-CompoundStmt 0xdbc470 <col:21, line:14:1>
|   `-ReturnStmt 0xdbc460 <line:13:5, col:12>
|     `-ImplicitCastExpr 0xdbc450 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0xdbc434 <col:12> 'int' lvalue ParmVar 0xdbc360 'value' 'int'
`-FunctionDecl 0xdbc580 <line:16:1, line:89:1> line:16:5 main 'int (int, char **)'
  |-ParmVarDecl 0xdbc4a0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0xdbc500 <col:20, col:28> col:28 argv 'char **'
  `-CompoundStmt 0xe049e0 <col:34, line:89:1>
    |-DeclStmt 0xdbc958 <line:17:5, col:72>
    | `-VarDecl 0xdbc640 <col:5, col:71> col:9 used arr 'int [14]' cinit
    |   `-InitListExpr 0xdbc890 <col:17, col:71> 'int [14]'
    |     |-IntegerLiteral 0xdbc670 <col:19> 'int' 22
    |     |-IntegerLiteral 0xdbc690 <col:23> 'int' 34
    |     |-IntegerLiteral 0xdbc6b0 <col:27> 'int' 3
    |     |-IntegerLiteral 0xdbc6d0 <col:30> 'int' 32
    |     |-IntegerLiteral 0xdbc6f0 <col:34> 'int' 82
    |     |-IntegerLiteral 0xdbc710 <col:38> 'int' 55
    |     |-IntegerLiteral 0xdbc730 <col:42> 'int' 89
    |     |-IntegerLiteral 0xdbc750 <col:46> 'int' 50
    |     |-IntegerLiteral 0xdbc770 <col:50> 'int' 37
    |     |-IntegerLiteral 0xdbc790 <col:54> 'int' 5
    |     |-IntegerLiteral 0xdbc7b0 <col:57> 'int' 64
    |     |-IntegerLiteral 0xdbc7d0 <col:61> 'int' 35
    |     |-IntegerLiteral 0xdbc7f0 <col:65> 'int' 9
    |     `-IntegerLiteral 0xdbc810 <col:68> 'int' 70
    |-DeclStmt 0xdbc9d0 <line:18:5, col:17>
    | `-VarDecl 0xdbc980 <col:5, col:15> col:9 used len 'int' cinit
    |   `-IntegerLiteral 0xdbc9b0 <col:15> 'int' 14
    |-DeclStmt 0xe02ea0 <line:19:5, col:19>
    | |-VarDecl 0xdbc9f0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0xdbca30 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0xe02e60 <col:5, col:15> col:15 used temp 'int'
    |-DeclStmt 0xe02f10 <line:20:5, col:16>
    | `-VarDecl 0xe02ec0 <col:5, col:15> col:9 used sum 'int' cinit
    |   `-IntegerLiteral 0xe02ef0 <col:15> 'int' 0
    |-BinaryOperator 0xe03008 <line:21:5, col:24> 'int' lvalue '='
    | |-DeclRefExpr 0xe02f20 <col:5> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | `-CallExpr 0xe02fd8 <col:11, col:24> 'int'
    |   |-ImplicitCastExpr 0xe02fc8 <col:11> 'int (*)(int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0xe02f8c <col:11> 'int (int)' lvalue Function 0xdbc0a0 'increment' 'int (int)'
    |   `-ImplicitCastExpr 0xe02ff8 <col:21> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0xe02f74 <col:21> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |-ForStmt 0xe03280 <line:22:5, line:29:5>
    | |-DeclStmt 0xe03080 <line:22:10, col:19>
    | | `-VarDecl 0xe03030 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0xe03060 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0xe03260 <col:23, line:29:5>
    |   |-CompoundAssignOperator 0xe030d0 <line:23:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0xe03090 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   | `-ImplicitCastExpr 0xe030c0 <col:16> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0xe030a8 <col:16> 'int' lvalue Var 0xe03030 'i' 'int'
    |   |-IfStmt 0xe03158 <line:24:9, line:25:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0xe03138 <line:24:13, col:18> '_Bool' '=='
    |   | | |-ImplicitCastExpr 0xe03128 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0xe030f0 <col:13> 'int' lvalue Var 0xe03030 'i' 'int'
    |   | | `-IntegerLiteral 0xe03108 <col:18> 'int' 8
    |   | |-BreakStmt 0xe03150 <line:25:13>
    |   | `-<<<NULL>>>
    |   |-IfStmt 0xe031e0 <line:26:9, line:27:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0xe031c0 <line:26:13, col:17> '_Bool' '<'
    |   | | |-ImplicitCastExpr 0xe031b0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0xe03174 <col:13> 'int' lvalue Var 0xe03030 'i' 'int'
    |   | | `-IntegerLiteral 0xe03190 <col:17> 'int' 8
    |   | |-ContinueStmt 0xe031d8 <line:27:13>
    |   | `-<<<NULL>>>
    |   `-CompoundAssignOperator 0xe03240 <line:28:9, col:16> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0xe031fc <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |     `-ImplicitCastExpr 0xe03230 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0xe03214 <col:16> 'int' lvalue Var 0xe03030 'i' 'int'
    |-IfStmt 0xe03570 <line:30:5, line:36:31>
    | |-<<<NULL>>>
    | |-BinaryOperator 0xe032f0 <line:30:9, col:15> '_Bool' '>'
    | | |-ImplicitCastExpr 0xe032e0 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0xe032a4 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | | `-IntegerLiteral 0xe032c0 <col:15> 'int' 100
    | |-BinaryOperator 0xe03340 <line:31:9, col:15> 'int' lvalue '='
    | | |-DeclRefExpr 0xe03308 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | | `-IntegerLiteral 0xe03320 <col:15> 'int' 100
    | `-IfStmt 0xe03550 <line:32:10, line:36:31>
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0xe033a0 <line:32:14, col:20> '_Bool' '>'
    |   | |-ImplicitCastExpr 0xe03390 <col:14> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0xe03358 <col:14> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   | `-IntegerLiteral 0xe03370 <col:20> 'int' 50
    |   |-CompoundStmt 0xe03438 <col:24, line:35:5>
    |   | |-BinaryOperator 0xe033f0 <line:33:9, col:15> 'int' lvalue '='
    |   | | |-DeclRefExpr 0xe033b8 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   | | `-IntegerLiteral 0xe033d0 <col:15> 'int' 50
    |   | `-ReturnStmt 0xe03428 <line:34:9, col:16>
    |   |   `-IntegerLiteral 0xe03408 <col:16> 'int' 1
    |   `-BinaryOperator 0xe03538 <line:36:9, col:31> 'int' lvalue ','
    |     |-CompoundAssignOperator 0xe03488 <col:9, col:16> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |-DeclRefExpr 0xe03450 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |     | `-IntegerLiteral 0xe03468 <col:16> 'int' 5
    |     `-BinaryOperator 0xe03520 <col:19, col:31> 'int' lvalue '='
    |       |-DeclRefExpr 0xe034a8 <col:19> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |       `-BinaryOperator 0xe03508 <col:25, col:31> 'int' '+'
    |         |-ImplicitCastExpr 0xe034f8 <col:25> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0xe034c0 <col:25> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |         `-IntegerLiteral 0xe034d8 <col:31> 'int' 10
    |-SwitchStmt 0xe035f0 <line:38:5, line:46:5>
    | |-<<<NULL>>>
    | |-BinaryOperator 0xe035d8 <line:38:13, col:19> 'int' '/'
    | | |-ImplicitCastExpr 0xe035c8 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0xe0358c <col:13> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | | `-IntegerLiteral 0xe035a8 <col:19> 'int' 10
    | `-CompoundStmt 0xe037a8 <col:23, line:46:5>
    |   |-CaseStmt 0xe03630 <line:39:5, line:40:15>
    |   | |-IntegerLiteral 0xe03610 <line:39:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0xe03688 <line:40:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0xe03650 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |   `-IntegerLiteral 0xe03668 <col:15> 'int' 20
    |   |-BreakStmt 0xe036a0 <line:41:9>
    |   |-CaseStmt 0xe036c8 <line:42:5, line:43:15>
    |   | |-IntegerLiteral 0xe036a8 <line:42:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0xe03720 <line:43:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0xe036e8 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |   `-IntegerLiteral 0xe03700 <col:15> 'int' 30
    |   `-DefaultStmt 0xe03790 <line:44:5, line:45:16>
    |     `-CompoundAssignOperator 0xe03770 <col:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |-DeclRefExpr 0xe03738 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |       `-IntegerLiteral 0xe03750 <col:16> 'int' 10
    |-CallExpr 0xe03840 <line:47:5, col:13> 'int'
    | |-ImplicitCastExpr 0xe03830 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0xe03818 <col:5> 'int (int)' lvalue Function 0xdbc3c0 'self' 'int (int)'
    | `-ImplicitCastExpr 0xe03860 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0xe03800 <col:10> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |-LabelStmt 0xe04470 <line:49:1, line:67:5> 'label'
    | `-IfStmt 0xe04420 <line:49:8, line:67:5>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0xe03a28 <line:49:12, col:54> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0xe03a18 <col:12, col:54> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0xe039f8 <col:12, col:54> 'int' lvalue
    |   |     |-BinaryOperator 0xe038b8 <col:12, col:19> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0xe038a8 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0xe0386c <col:12> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |     | `-IntegerLiteral 0xe03888 <col:19> 'int' 19
    |   |     |-ParenExpr 0xe03990 <col:24, col:44> 'int' lvalue
    |   |     | `-BinaryOperator 0xe03978 <col:25, col:42> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0xe03908 <col:25, col:31> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0xe038d0 <col:25> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0xe038e8 <col:31> 'int' 20
    |   |     |   `-CompoundAssignOperator 0xe03958 <col:35, col:42> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0xe03920 <col:35> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0xe03938 <col:42> 'int' 10
    |   |     `-BinaryOperator 0xe039e0 <col:48, col:54> 'int' lvalue '='
    |   |       |-DeclRefExpr 0xe039a4 <col:48> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   |       `-IntegerLiteral 0xe039c0 <col:54> 'int' 30
    |   |-BinaryOperator 0xe03a70 <line:50:9, col:15> 'int' lvalue '='
    |   | |-DeclRefExpr 0xe03a34 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   | `-IntegerLiteral 0xe03a50 <col:15> 'int' 10000
    |   `-CompoundStmt 0xe04408 <line:51:10, line:67:5>
    |     `-ForStmt 0xe043e0 <line:52:9, line:66:13>
    |       |-<<<NULL>>>
    |       |-<<<NULL>>>
    |       |-BinaryOperator 0xe03ad0 <line:52:16, col:22> '_Bool' '>'
    |       | |-ImplicitCastExpr 0xe03ac0 <col:16> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0xe03a88 <col:16> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |       | `-IntegerLiteral 0xe03aa0 <col:22> 'int' 0
    |       |-CompoundAssignOperator 0xe03b20 <col:25, col:32> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0xe03ae8 <col:25> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |       | `-IntegerLiteral 0xe03b00 <col:32> 'int' 2
    |       `-SwitchStmt 0xe03b68 <line:53:13, line:66:13>
    |         |-<<<NULL>>>
    |         |-ImplicitCastExpr 0xe03b58 <line:53:21> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0xe03b40 <col:21> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |         `-CompoundStmt 0xe043c0 <col:26, line:66:13>
    |           |-CaseStmt 0xe03ba8 <line:54:13, line:56:17>
    |           | |-IntegerLiteral 0xe03b88 <line:54:18> 'int' 1
    |           | |-<<<NULL>>>
    |           | `-CaseStmt 0xe03be8 <line:55:13, line:56:17>
    |           |   |-IntegerLiteral 0xe03bc8 <line:55:18> 'int' 2
    |           |   |-<<<NULL>>>
    |           |   `-BreakStmt 0xe03c08 <line:56:17>
    |           |-CaseStmt 0xe03c30 <line:57:13, line:58:20>
    |           | |-IntegerLiteral 0xe03c10 <line:57:18> 'int' 3
    |           | |-<<<NULL>>>
    |           | `-UnaryOperator 0xe03c68 <line:58:17, col:20> 'int' postfix '++'
    |           |   `-DeclRefExpr 0xe03c50 <col:17> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |           `-ForStmt 0xe04398 <line:59:17, line:65:25>
    |             |-BinaryOperator 0xe03cb8 <line:59:22, col:26> 'int' lvalue '='
    |             | |-DeclRefExpr 0xe03c7c <col:22> 'int' lvalue Var 0xdbc9f0 'i' 'int'
    |             | `-IntegerLiteral 0xe03c98 <col:26> 'int' 0
    |             |-<<<NULL>>>
    |             |-BinaryOperator 0xe03d58 <col:29, col:39> '_Bool' '<'
    |             | |-ImplicitCastExpr 0xe03d48 <col:29> 'int' <LValueToRValue>
    |             | | `-DeclRefExpr 0xe03cd0 <col:29> 'int' lvalue Var 0xdbc9f0 'i' 'int'
    |             | `-BinaryOperator 0xe03d30 <col:33, col:39> 'int' '-'
    |             |   |-ImplicitCastExpr 0xe03d20 <col:33> 'int' <LValueToRValue>
    |             |   | `-DeclRefExpr 0xe03ce8 <col:33> 'int' lvalue Var 0xdbc980 'len' 'int'
    |             |   `-IntegerLiteral 0xe03d00 <col:39> 'int' 1
    |             |-UnaryOperator 0xe03d88 <col:42, col:43> 'int' postfix '++'
    |             | `-DeclRefExpr 0xe03d70 <col:42> 'int' lvalue Var 0xdbc9f0 'i' 'int'
    |             `-ForStmt 0xe04370 <line:60:21, line:65:25>
    |               |-BinaryOperator 0xe03dd8 <line:60:26, col:30> 'int' lvalue '='
    |               | |-DeclRefExpr 0xe03d9c <col:26> 'int' lvalue Var 0xdbca30 'j' 'int'
    |               | `-IntegerLiteral 0xe03db8 <col:30> 'int' 0
    |               |-<<<NULL>>>
    |               |-BinaryOperator 0xe03ed0 <col:33, col:47> '_Bool' '<'
    |               | |-ImplicitCastExpr 0xe03ec0 <col:33> 'int' <LValueToRValue>
    |               | | `-DeclRefExpr 0xe03df0 <col:33> 'int' lvalue Var 0xdbca30 'j' 'int'
    |               | `-BinaryOperator 0xe03ea8 <col:37, col:47> 'int' '-'
    |               |   |-BinaryOperator 0xe03e68 <col:37, col:43> 'int' '-'
    |               |   | |-ImplicitCastExpr 0xe03e40 <col:37> 'int' <LValueToRValue>
    |               |   | | `-DeclRefExpr 0xe03e08 <col:37> 'int' lvalue Var 0xdbc980 'len' 'int'
    |               |   | `-IntegerLiteral 0xe03e20 <col:43> 'int' 1
    |               |   `-ImplicitCastExpr 0xe03e98 <col:47> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0xe03e80 <col:47> 'int' lvalue Var 0xdbc9f0 'i' 'int'
    |               |-UnaryOperator 0xe03f00 <col:50, col:51> 'int' postfix '++'
    |               | `-DeclRefExpr 0xe03ee8 <col:50> 'int' lvalue Var 0xdbca30 'j' 'int'
    |               `-IfStmt 0xe04350 <line:61:25, line:65:25>
    |                 |-<<<NULL>>>
    |                 |-BinaryOperator 0xe04060 <line:61:29, col:47> '_Bool' '>'
    |                 | |-ImplicitCastExpr 0xe04040 <col:29, col:34> 'int' <LValueToRValue>
    |                 | | `-ArraySubscriptExpr 0xe03f88 <col:29, col:34> 'int' lvalue
    |                 | |   |-ImplicitCastExpr 0xe03f68 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | |   | `-DeclRefExpr 0xe03f14 <col:29> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 | |   `-ImplicitCastExpr 0xe03f78 <col:33> 'int' <LValueToRValue>
    |                 | |     `-DeclRefExpr 0xe03f2c <col:33> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 | `-ImplicitCastExpr 0xe04050 <col:38, col:47> 'int' <LValueToRValue>
    |                 |   `-ArraySubscriptExpr 0xe04028 <col:38, col:47> 'int' lvalue
    |                 |     |-ImplicitCastExpr 0xe04018 <col:38> 'int *' <ArrayToPointerDecay>
    |                 |     | `-DeclRefExpr 0xe03f9c <col:38> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 |     `-BinaryOperator 0xe04000 <col:42, col:46> 'int' '+'
    |                 |       |-ImplicitCastExpr 0xe03ff0 <col:42> 'int' <LValueToRValue>
    |                 |       | `-DeclRefExpr 0xe03fb4 <col:42> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 |       `-IntegerLiteral 0xe03fd0 <col:46> 'int' 1
    |                 |-CompoundStmt 0xe04330 <col:50, line:65:25>
    |                 | |-BinaryOperator 0xe04108 <line:62:29, col:41> 'int' lvalue '='
    |                 | | |-DeclRefExpr 0xe04078 <col:29> 'int' lvalue Var 0xe02e60 'temp' 'int'
    |                 | | `-ImplicitCastExpr 0xe040f8 <col:36, col:41> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0xe040e0 <col:36, col:41> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0xe040c0 <col:36> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0xe04090 <col:36> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 | |     `-ImplicitCastExpr 0xe040d0 <col:40> 'int' <LValueToRValue>
    |                 | |       `-DeclRefExpr 0xe040a8 <col:40> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 | |-BinaryOperator 0xe04238 <line:63:29, col:47> 'int' lvalue '='
    |                 | | |-ArraySubscriptExpr 0xe04170 <col:29, col:34> 'int' lvalue
    |                 | | | |-ImplicitCastExpr 0xe04150 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | | | | `-DeclRefExpr 0xe04120 <col:29> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 | | | `-ImplicitCastExpr 0xe04160 <col:33> 'int' <LValueToRValue>
    |                 | | |   `-DeclRefExpr 0xe04138 <col:33> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 | | `-ImplicitCastExpr 0xe04228 <col:38, col:47> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0xe04210 <col:38, col:47> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0xe04200 <col:38> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0xe04184 <col:38> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 | |     `-BinaryOperator 0xe041e8 <col:42, col:46> 'int' '+'
    |                 | |       |-ImplicitCastExpr 0xe041d8 <col:42> 'int' <LValueToRValue>
    |                 | |       | `-DeclRefExpr 0xe0419c <col:42> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 | |       `-IntegerLiteral 0xe041b8 <col:46> 'int' 1
    |                 | `-BinaryOperator 0xe04318 <line:64:29, col:42> 'int' lvalue '='
    |                 |   |-ArraySubscriptExpr 0xe042d8 <col:29, col:38> 'int' lvalue
    |                 |   | |-ImplicitCastExpr 0xe042c8 <col:29> 'int *' <ArrayToPointerDecay>
    |                 |   | | `-DeclRefExpr 0xe04250 <col:29> 'int [14]' lvalue Var 0xdbc640 'arr' 'int [14]'
    |                 |   | `-BinaryOperator 0xe042b0 <col:33, col:37> 'int' '+'
    |                 |   |   |-ImplicitCastExpr 0xe042a0 <col:33> 'int' <LValueToRValue>
    |                 |   |   | `-DeclRefExpr 0xe04268 <col:33> 'int' lvalue Var 0xdbca30 'j' 'int'
    |                 |   |   `-IntegerLiteral 0xe04280 <col:37> 'int' 1
    |                 |   `-ImplicitCastExpr 0xe04308 <col:42> 'int' <LValueToRValue>
    |                 |     `-DeclRefExpr 0xe042ec <col:42> 'int' lvalue Var 0xe02e60 'temp' 'int'
    |                 `-<<<NULL>>>
    |-SwitchStmt 0xe044a8 <line:69:5, line:83:5>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0xe04498 <line:69:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0xe04480 <col:13> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | `-CompoundStmt 0xe046c0 <col:18, line:83:5>
    |   |-CaseStmt 0xe044e8 <line:70:5, line:74:13>
    |   | |-IntegerLiteral 0xe044c8 <line:70:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-IfStmt 0xe04550 <line:71:9, line:74:13>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0xe04528 <line:71:13> '_Bool' <IntegralToBoolean>
    |   |   | `-IntegerLiteral 0xe04508 <col:13> 'int' 1
    |   |   |-NullStmt 0xe04538 <line:72:13>
    |   |   `-BreakStmt 0xe04548 <line:74:13>
    |   |-CaseStmt 0xe04590 <line:75:5, line:76:9>
    |   | |-IntegerLiteral 0xe04570 <line:75:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BreakStmt 0xe045b0 <line:76:9>
    |   |-CaseStmt 0xe045d8 <line:77:5, line:78:14>
    |   | |-IntegerLiteral 0xe045b8 <line:77:10> 'int' 3
    |   | |-<<<NULL>>>
    |   | `-GotoStmt 0xe045f8 <line:78:9, col:14> 'label' 0xe04440
    |   |-CaseStmt 0xe04628 <line:79:5, line:81:12>
    |   | |-IntegerLiteral 0xe04608 <line:79:10> 'int' 4
    |   | |-<<<NULL>>>
    |   | `-DefaultStmt 0xe04678 <line:80:5, line:81:12>
    |   |   `-UnaryOperator 0xe04660 <col:9, col:12> 'int' postfix '++'
    |   |     `-DeclRefExpr 0xe04648 <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |   `-UnaryOperator 0xe046a8 <line:82:9, col:12> 'int' postfix '--'
    |     `-DeclRefExpr 0xe0468c <col:9> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    |-DeclStmt 0xe04840 <line:85:5, col:29>
    | `-VarDecl 0xe04810 <col:5, col:28> col:9 used array 'int [100][100][100]'
    |-BinaryOperator 0xe04998 <line:86:5, col:27> 'int' lvalue '='
    | |-DeclRefExpr 0xe04850 <col:5> 'int' lvalue Var 0xe02ec0 'sum' 'int'
    | `-ImplicitCastExpr 0xe04988 <col:11, col:27> 'int' <LValueToRValue>
    |   `-ArraySubscriptExpr 0xe04970 <col:11, col:27> 'int' lvalue
    |     |-ImplicitCastExpr 0xe04960 <col:11, col:23> 'int *' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0xe04928 <col:11, col:23> 'int [100]' lvalue
    |     |   |-ImplicitCastExpr 0xe04918 <col:11, col:19> 'int (*)[100]' <ArrayToPointerDecay>
    |     |   | `-ArraySubscriptExpr 0xe048c8 <col:11, col:19> 'int [100][100]' lvalue
    |     |   |   |-ImplicitCastExpr 0xe048b8 <col:11> 'int (*)[100][100]' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0xe04868 <col:11> 'int [100][100][100]' lvalue Var 0xe04810 'array' 'int [100][100][100]'
    |     |   |   `-IntegerLiteral 0xe04880 <col:17> 'int' 10
    |     |   `-IntegerLiteral 0xe048e0 <col:21> 'int' 10
    |     `-IntegerLiteral 0xe04940 <col:25> 'int' 10
    `-ReturnStmt 0xe049d0 <line:88:5, col:12>
      `-IntegerLiteral 0xe049b0 <col:12> 'int' 0
