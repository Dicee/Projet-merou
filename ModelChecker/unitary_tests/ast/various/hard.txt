TranslationUnitDecl 0x2fdd0f0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x2fdd3e0 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
|-VarDecl 0x2fdd470 <ModelChecker\unitary_tests\ast\various\hard.cpp:1:1, col:23> col:13 staVar 'char [100]' static
|-VarDecl 0x2fdd4b0 <line:2:1, col:15> col:5 globVar 'int' cinit
| `-IntegerLiteral 0x2fdd4e0 <col:15> 'int' 0
|-FunctionDecl 0x2fdd590 <line:4:1, line:6:1> line:4:5 used increment 'int (int)'
| |-ParmVarDecl 0x2fdd510 <col:15, col:19> col:19 used value 'int'
| `-CompoundStmt 0x2fdd658 <col:26, line:6:1>
|   `-ReturnStmt 0x2fdd648 <line:5:5, col:14>
|     `-ImplicitCastExpr 0x2fdd638 <col:12, col:14> 'int' <LValueToRValue>
|       `-UnaryOperator 0x2fdd620 <col:12, col:14> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x2fdd604 <col:14> 'int' lvalue ParmVar 0x2fdd510 'value' 'int'
|-FunctionDecl 0x2fdd750 <line:8:1, line:10:1> line:8:6 increment 'void (int &, int)'
| |-ParmVarDecl 0x2fdd6a0 <col:16, col:21> col:21 used value 'int &'
| |-ParmVarDecl 0x2fdd6e0 <col:28, col:32> col:32 used steps 'int'
| `-CompoundStmt 0x2fdd828 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x2fdd808 <line:9:5, col:14> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x2fdd7c8 <col:5> 'int' lvalue ParmVar 0x2fdd6a0 'value' 'int &'
|     `-ImplicitCastExpr 0x2fdd7f8 <col:14> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2fdd7e0 <col:14> 'int' lvalue ParmVar 0x2fdd6e0 'steps' 'int'
|-FunctionDecl 0x2fdd8b0 <line:12:1, line:14:1> line:12:5 used self 'int (int)'
| |-ParmVarDecl 0x2fdd850 <col:10, col:14> col:14 used value 'int'
| `-CompoundStmt 0x2fdd960 <col:21, line:14:1>
|   `-ReturnStmt 0x2fdd950 <line:13:5, col:12>
|     `-ImplicitCastExpr 0x2fdd940 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x2fdd924 <col:12> 'int' lvalue ParmVar 0x2fdd850 'value' 'int'
`-FunctionDecl 0x2fdda70 <line:16:1, line:89:1> line:16:5 main 'int (int, char **)'
  |-ParmVarDecl 0x2fdd990 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x2fdd9f0 <col:20, col:28> col:28 argv 'char **'
  `-CompoundStmt 0x3024bf0 <col:34, line:89:1>
    |-DeclStmt 0x2fdde48 <line:17:5, col:72>
    | `-VarDecl 0x2fddb30 <col:5, col:71> col:9 used arr 'int [14]' cinit
    |   `-InitListExpr 0x2fddd80 <col:17, col:71> 'int [14]'
    |     |-IntegerLiteral 0x2fddb60 <col:19> 'int' 22
    |     |-IntegerLiteral 0x2fddb80 <col:23> 'int' 34
    |     |-IntegerLiteral 0x2fddba0 <col:27> 'int' 3
    |     |-IntegerLiteral 0x2fddbc0 <col:30> 'int' 32
    |     |-IntegerLiteral 0x2fddbe0 <col:34> 'int' 82
    |     |-IntegerLiteral 0x2fddc00 <col:38> 'int' 55
    |     |-IntegerLiteral 0x2fddc20 <col:42> 'int' 89
    |     |-IntegerLiteral 0x2fddc40 <col:46> 'int' 50
    |     |-IntegerLiteral 0x2fddc60 <col:50> 'int' 37
    |     |-IntegerLiteral 0x2fddc80 <col:54> 'int' 5
    |     |-IntegerLiteral 0x2fddca0 <col:57> 'int' 64
    |     |-IntegerLiteral 0x2fddcc0 <col:61> 'int' 35
    |     |-IntegerLiteral 0x2fddce0 <col:65> 'int' 9
    |     `-IntegerLiteral 0x2fddd00 <col:68> 'int' 70
    |-DeclStmt 0x2fddec0 <line:18:5, col:17>
    | `-VarDecl 0x2fdde70 <col:5, col:15> col:9 used len 'int' cinit
    |   `-IntegerLiteral 0x2fddea0 <col:15> 'int' 14
    |-DeclStmt 0x30230b8 <line:19:5, col:19>
    | |-VarDecl 0x2fddee0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x2fddf20 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x2fddf60 <col:5, col:15> col:15 used temp 'int'
    |-DeclStmt 0x3023130 <line:20:5, col:16>
    | `-VarDecl 0x30230e0 <col:5, col:15> col:9 used sum 'int' cinit
    |   `-IntegerLiteral 0x3023110 <col:15> 'int' 0
    |-BinaryOperator 0x3023228 <line:21:5, col:24> 'int' lvalue '='
    | |-DeclRefExpr 0x3023140 <col:5> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | `-CallExpr 0x30231f8 <col:11, col:24> 'int'
    |   |-ImplicitCastExpr 0x30231e8 <col:11> 'int (*)(int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x30231ac <col:11> 'int (int)' lvalue Function 0x2fdd590 'increment' 'int (int)'
    |   `-ImplicitCastExpr 0x3023218 <col:21> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x3023194 <col:21> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |-ForStmt 0x30234a0 <line:22:5, line:29:5>
    | |-DeclStmt 0x30232a0 <line:22:10, col:19>
    | | `-VarDecl 0x3023250 <col:10, col:18> col:14 used i 'int' cinit
    | |   `-IntegerLiteral 0x3023280 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x3023480 <col:23, line:29:5>
    |   |-CompoundAssignOperator 0x30232f0 <line:23:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x30232b0 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   | `-ImplicitCastExpr 0x30232e0 <col:16> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x30232c8 <col:16> 'int' lvalue Var 0x3023250 'i' 'int'
    |   |-IfStmt 0x3023378 <line:24:9, line:25:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x3023358 <line:24:13, col:18> '_Bool' '=='
    |   | | |-ImplicitCastExpr 0x3023348 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x3023310 <col:13> 'int' lvalue Var 0x3023250 'i' 'int'
    |   | | `-IntegerLiteral 0x3023328 <col:18> 'int' 8
    |   | |-BreakStmt 0x3023370 <line:25:13>
    |   | `-<<<NULL>>>
    |   |-IfStmt 0x3023400 <line:26:9, line:27:13>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x30233e0 <line:26:13, col:17> '_Bool' '<'
    |   | | |-ImplicitCastExpr 0x30233d0 <col:13> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x3023394 <col:13> 'int' lvalue Var 0x3023250 'i' 'int'
    |   | | `-IntegerLiteral 0x30233b0 <col:17> 'int' 8
    |   | |-ContinueStmt 0x30233f8 <line:27:13>
    |   | `-<<<NULL>>>
    |   `-CompoundAssignOperator 0x3023460 <line:28:9, col:16> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x302341c <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |     `-ImplicitCastExpr 0x3023450 <col:16> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x3023434 <col:16> 'int' lvalue Var 0x3023250 'i' 'int'
    |-IfStmt 0x3023790 <line:30:5, line:36:31>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x3023510 <line:30:9, col:15> '_Bool' '>'
    | | |-ImplicitCastExpr 0x3023500 <col:9> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x30234c4 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | | `-IntegerLiteral 0x30234e0 <col:15> 'int' 100
    | |-BinaryOperator 0x3023560 <line:31:9, col:15> 'int' lvalue '='
    | | |-DeclRefExpr 0x3023528 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | | `-IntegerLiteral 0x3023540 <col:15> 'int' 100
    | `-IfStmt 0x3023770 <line:32:10, line:36:31>
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0x30235c0 <line:32:14, col:20> '_Bool' '>'
    |   | |-ImplicitCastExpr 0x30235b0 <col:14> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x3023578 <col:14> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   | `-IntegerLiteral 0x3023590 <col:20> 'int' 50
    |   |-CompoundStmt 0x3023658 <col:24, line:35:5>
    |   | |-BinaryOperator 0x3023610 <line:33:9, col:15> 'int' lvalue '='
    |   | | |-DeclRefExpr 0x30235d8 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   | | `-IntegerLiteral 0x30235f0 <col:15> 'int' 50
    |   | `-ReturnStmt 0x3023648 <line:34:9, col:16>
    |   |   `-IntegerLiteral 0x3023628 <col:16> 'int' 1
    |   `-BinaryOperator 0x3023758 <line:36:9, col:31> 'int' lvalue ','
    |     |-CompoundAssignOperator 0x30236a8 <col:9, col:16> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |-DeclRefExpr 0x3023670 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |     | `-IntegerLiteral 0x3023688 <col:16> 'int' 5
    |     `-BinaryOperator 0x3023740 <col:19, col:31> 'int' lvalue '='
    |       |-DeclRefExpr 0x30236c8 <col:19> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |       `-BinaryOperator 0x3023728 <col:25, col:31> 'int' '+'
    |         |-ImplicitCastExpr 0x3023718 <col:25> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x30236e0 <col:25> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |         `-IntegerLiteral 0x30236f8 <col:31> 'int' 10
    |-SwitchStmt 0x3023810 <line:38:5, line:46:5>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x30237f8 <line:38:13, col:19> 'int' '/'
    | | |-ImplicitCastExpr 0x30237e8 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x30237ac <col:13> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | | `-IntegerLiteral 0x30237c8 <col:19> 'int' 10
    | `-CompoundStmt 0x30239c8 <col:23, line:46:5>
    |   |-CaseStmt 0x3023850 <line:39:5, line:40:15>
    |   | |-IntegerLiteral 0x3023830 <line:39:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x30238a8 <line:40:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x3023870 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |   `-IntegerLiteral 0x3023888 <col:15> 'int' 20
    |   |-BreakStmt 0x30238c0 <line:41:9>
    |   |-CaseStmt 0x30238e8 <line:42:5, line:43:15>
    |   | |-IntegerLiteral 0x30238c8 <line:42:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x3023940 <line:43:9, col:15> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x3023908 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |   `-IntegerLiteral 0x3023920 <col:15> 'int' 30
    |   `-DefaultStmt 0x30239b0 <line:44:5, line:45:16>
    |     `-CompoundAssignOperator 0x3023990 <col:9, col:16> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |-DeclRefExpr 0x3023958 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |       `-IntegerLiteral 0x3023970 <col:16> 'int' 10
    |-CallExpr 0x3023a60 <line:47:5, col:13> 'int'
    | |-ImplicitCastExpr 0x3023a50 <col:5> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x3023a38 <col:5> 'int (int)' lvalue Function 0x2fdd8b0 'self' 'int (int)'
    | `-ImplicitCastExpr 0x3023a80 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x3023a20 <col:10> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |-LabelStmt 0x3024680 <line:49:1, line:67:5> 'label'
    | `-IfStmt 0x3024630 <line:49:8, line:67:5>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0x3023c48 <line:49:12, col:54> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0x3023c38 <col:12, col:54> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0x3023c18 <col:12, col:54> 'int' lvalue
    |   |     |-BinaryOperator 0x3023ad8 <col:12, col:19> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0x3023ac8 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x3023a8c <col:12> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |     | `-IntegerLiteral 0x3023aa8 <col:19> 'int' 19
    |   |     |-ParenExpr 0x3023bb0 <col:24, col:44> 'int' lvalue
    |   |     | `-BinaryOperator 0x3023b98 <col:25, col:42> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0x3023b28 <col:25, col:31> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0x3023af0 <col:25> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0x3023b08 <col:31> 'int' 20
    |   |     |   `-CompoundAssignOperator 0x3023b78 <col:35, col:42> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0x3023b40 <col:35> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0x3023b58 <col:42> 'int' 10
    |   |     `-BinaryOperator 0x3023c00 <col:48, col:54> 'int' lvalue '='
    |   |       |-DeclRefExpr 0x3023bc4 <col:48> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   |       `-IntegerLiteral 0x3023be0 <col:54> 'int' 30
    |   |-BinaryOperator 0x3023c90 <line:50:9, col:15> 'int' lvalue '='
    |   | |-DeclRefExpr 0x3023c54 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   | `-IntegerLiteral 0x3023c70 <col:15> 'int' 10000
    |   `-CompoundStmt 0x3024618 <line:51:10, line:67:5>
    |     `-ForStmt 0x30245f0 <line:52:9, line:66:13>
    |       |-<<<NULL>>>
    |       |-<<<NULL>>>
    |       |-BinaryOperator 0x3023cf0 <line:52:16, col:22> '_Bool' '>'
    |       | |-ImplicitCastExpr 0x3023ce0 <col:16> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x3023ca8 <col:16> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |       | `-IntegerLiteral 0x3023cc0 <col:22> 'int' 0
    |       |-CompoundAssignOperator 0x3023d40 <col:25, col:32> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0x3023d08 <col:25> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |       | `-IntegerLiteral 0x3023d20 <col:32> 'int' 2
    |       `-SwitchStmt 0x3023d88 <line:53:13, line:66:13>
    |         |-<<<NULL>>>
    |         |-ImplicitCastExpr 0x3023d78 <line:53:21> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x3023d60 <col:21> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |         `-CompoundStmt 0x30245d0 <col:26, line:66:13>
    |           |-CaseStmt 0x3023dc8 <line:54:13, line:56:17>
    |           | |-IntegerLiteral 0x3023da8 <line:54:18> 'int' 1
    |           | |-<<<NULL>>>
    |           | `-CaseStmt 0x3023e08 <line:55:13, line:56:17>
    |           |   |-IntegerLiteral 0x3023de8 <line:55:18> 'int' 2
    |           |   |-<<<NULL>>>
    |           |   `-BreakStmt 0x3023e28 <line:56:17>
    |           |-CaseStmt 0x3023e50 <line:57:13, line:58:20>
    |           | |-IntegerLiteral 0x3023e30 <line:57:18> 'int' 3
    |           | |-<<<NULL>>>
    |           | `-UnaryOperator 0x3023e88 <line:58:17, col:20> 'int' postfix '++'
    |           |   `-DeclRefExpr 0x3023e70 <col:17> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |           `-ForStmt 0x30245a8 <line:59:17, line:65:25>
    |             |-BinaryOperator 0x3023ed8 <line:59:22, col:26> 'int' lvalue '='
    |             | |-DeclRefExpr 0x3023e9c <col:22> 'int' lvalue Var 0x2fddee0 'i' 'int'
    |             | `-IntegerLiteral 0x3023eb8 <col:26> 'int' 0
    |             |-<<<NULL>>>
    |             |-BinaryOperator 0x3023f78 <col:29, col:39> '_Bool' '<'
    |             | |-ImplicitCastExpr 0x3023f68 <col:29> 'int' <LValueToRValue>
    |             | | `-DeclRefExpr 0x3023ef0 <col:29> 'int' lvalue Var 0x2fddee0 'i' 'int'
    |             | `-BinaryOperator 0x3023f50 <col:33, col:39> 'int' '-'
    |             |   |-ImplicitCastExpr 0x3023f40 <col:33> 'int' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x3023f08 <col:33> 'int' lvalue Var 0x2fdde70 'len' 'int'
    |             |   `-IntegerLiteral 0x3023f20 <col:39> 'int' 1
    |             |-UnaryOperator 0x3023fa8 <col:42, col:43> 'int' postfix '++'
    |             | `-DeclRefExpr 0x3023f90 <col:42> 'int' lvalue Var 0x2fddee0 'i' 'int'
    |             `-ForStmt 0x3024580 <line:60:21, line:65:25>
    |               |-BinaryOperator 0x3023ff8 <line:60:26, col:30> 'int' lvalue '='
    |               | |-DeclRefExpr 0x3023fbc <col:26> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |               | `-IntegerLiteral 0x3023fd8 <col:30> 'int' 0
    |               |-<<<NULL>>>
    |               |-BinaryOperator 0x30240e8 <col:33, col:47> '_Bool' '<'
    |               | |-ImplicitCastExpr 0x30240d8 <col:33> 'int' <LValueToRValue>
    |               | | `-DeclRefExpr 0x3024010 <col:33> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |               | `-BinaryOperator 0x30240c0 <col:37, col:47> 'int' '-'
    |               |   |-BinaryOperator 0x3024070 <col:37, col:43> 'int' '-'
    |               |   | |-ImplicitCastExpr 0x3024060 <col:37> 'int' <LValueToRValue>
    |               |   | | `-DeclRefExpr 0x3024028 <col:37> 'int' lvalue Var 0x2fdde70 'len' 'int'
    |               |   | `-IntegerLiteral 0x3024040 <col:43> 'int' 1
    |               |   `-ImplicitCastExpr 0x30240b0 <col:47> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0x3024088 <col:47> 'int' lvalue Var 0x2fddee0 'i' 'int'
    |               |-UnaryOperator 0x3024118 <col:50, col:51> 'int' postfix '++'
    |               | `-DeclRefExpr 0x3024100 <col:50> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |               `-IfStmt 0x3024560 <line:61:25, line:65:25>
    |                 |-<<<NULL>>>
    |                 |-BinaryOperator 0x3024270 <line:61:29, col:47> '_Bool' '>'
    |                 | |-ImplicitCastExpr 0x3024250 <col:29, col:34> 'int' <LValueToRValue>
    |                 | | `-ArraySubscriptExpr 0x3024198 <col:29, col:34> 'int' lvalue
    |                 | |   |-ImplicitCastExpr 0x3024178 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | |   | `-DeclRefExpr 0x302412c <col:29> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 | |   `-ImplicitCastExpr 0x3024188 <col:33> 'int' <LValueToRValue>
    |                 | |     `-DeclRefExpr 0x3024144 <col:33> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 | `-ImplicitCastExpr 0x3024260 <col:38, col:47> 'int' <LValueToRValue>
    |                 |   `-ArraySubscriptExpr 0x3024238 <col:38, col:47> 'int' lvalue
    |                 |     |-ImplicitCastExpr 0x3024228 <col:38> 'int *' <ArrayToPointerDecay>
    |                 |     | `-DeclRefExpr 0x30241ac <col:38> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 |     `-BinaryOperator 0x3024210 <col:42, col:46> 'int' '+'
    |                 |       |-ImplicitCastExpr 0x3024200 <col:42> 'int' <LValueToRValue>
    |                 |       | `-DeclRefExpr 0x30241c4 <col:42> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 |       `-IntegerLiteral 0x30241e0 <col:46> 'int' 1
    |                 |-CompoundStmt 0x3024540 <col:50, line:65:25>
    |                 | |-BinaryOperator 0x3024318 <line:62:29, col:41> 'int' lvalue '='
    |                 | | |-DeclRefExpr 0x3024288 <col:29> 'int' lvalue Var 0x2fddf60 'temp' 'int'
    |                 | | `-ImplicitCastExpr 0x3024308 <col:36, col:41> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x30242f0 <col:36, col:41> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x30242d0 <col:36> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x30242a0 <col:36> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 | |     `-ImplicitCastExpr 0x30242e0 <col:40> 'int' <LValueToRValue>
    |                 | |       `-DeclRefExpr 0x30242b8 <col:40> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 | |-BinaryOperator 0x3024448 <line:63:29, col:47> 'int' lvalue '='
    |                 | | |-ArraySubscriptExpr 0x3024380 <col:29, col:34> 'int' lvalue
    |                 | | | |-ImplicitCastExpr 0x3024360 <col:29> 'int *' <ArrayToPointerDecay>
    |                 | | | | `-DeclRefExpr 0x3024330 <col:29> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 | | | `-ImplicitCastExpr 0x3024370 <col:33> 'int' <LValueToRValue>
    |                 | | |   `-DeclRefExpr 0x3024348 <col:33> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 | | `-ImplicitCastExpr 0x3024438 <col:38, col:47> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x3024420 <col:38, col:47> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x3024410 <col:38> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x3024394 <col:38> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 | |     `-BinaryOperator 0x30243f8 <col:42, col:46> 'int' '+'
    |                 | |       |-ImplicitCastExpr 0x30243e8 <col:42> 'int' <LValueToRValue>
    |                 | |       | `-DeclRefExpr 0x30243ac <col:42> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 | |       `-IntegerLiteral 0x30243c8 <col:46> 'int' 1
    |                 | `-BinaryOperator 0x3024528 <line:64:29, col:42> 'int' lvalue '='
    |                 |   |-ArraySubscriptExpr 0x30244e8 <col:29, col:38> 'int' lvalue
    |                 |   | |-ImplicitCastExpr 0x30244d8 <col:29> 'int *' <ArrayToPointerDecay>
    |                 |   | | `-DeclRefExpr 0x3024460 <col:29> 'int [14]' lvalue Var 0x2fddb30 'arr' 'int [14]'
    |                 |   | `-BinaryOperator 0x30244c0 <col:33, col:37> 'int' '+'
    |                 |   |   |-ImplicitCastExpr 0x30244b0 <col:33> 'int' <LValueToRValue>
    |                 |   |   | `-DeclRefExpr 0x3024478 <col:33> 'int' lvalue Var 0x2fddf20 'j' 'int'
    |                 |   |   `-IntegerLiteral 0x3024490 <col:37> 'int' 1
    |                 |   `-ImplicitCastExpr 0x3024518 <col:42> 'int' <LValueToRValue>
    |                 |     `-DeclRefExpr 0x30244fc <col:42> 'int' lvalue Var 0x2fddf60 'temp' 'int'
    |                 `-<<<NULL>>>
    |-SwitchStmt 0x30246b8 <line:69:5, line:83:5>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x30246a8 <line:69:13> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x3024690 <col:13> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | `-CompoundStmt 0x30248d0 <col:18, line:83:5>
    |   |-CaseStmt 0x30246f8 <line:70:5, line:74:13>
    |   | |-IntegerLiteral 0x30246d8 <line:70:10> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-IfStmt 0x3024760 <line:71:9, line:74:13>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0x3024738 <line:71:13> '_Bool' <IntegralToBoolean>
    |   |   | `-IntegerLiteral 0x3024718 <col:13> 'int' 1
    |   |   |-NullStmt 0x3024748 <line:72:13>
    |   |   `-BreakStmt 0x3024758 <line:74:13>
    |   |-CaseStmt 0x30247a0 <line:75:5, line:76:9>
    |   | |-IntegerLiteral 0x3024780 <line:75:10> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BreakStmt 0x30247c0 <line:76:9>
    |   |-CaseStmt 0x30247e8 <line:77:5, line:78:14>
    |   | |-IntegerLiteral 0x30247c8 <line:77:10> 'int' 3
    |   | |-<<<NULL>>>
    |   | `-GotoStmt 0x3024808 <line:78:9, col:14> 'label' 0x3024650
    |   |-CaseStmt 0x3024838 <line:79:5, line:81:12>
    |   | |-IntegerLiteral 0x3024818 <line:79:10> 'int' 4
    |   | |-<<<NULL>>>
    |   | `-DefaultStmt 0x3024888 <line:80:5, line:81:12>
    |   |   `-UnaryOperator 0x3024870 <col:9, col:12> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x3024858 <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |   `-UnaryOperator 0x30248b8 <line:82:9, col:12> 'int' postfix '--'
    |     `-DeclRefExpr 0x302489c <col:9> 'int' lvalue Var 0x30230e0 'sum' 'int'
    |-DeclStmt 0x3024a50 <line:85:5, col:29>
    | `-VarDecl 0x3024a20 <col:5, col:28> col:9 used array 'int [100][100][100]'
    |-BinaryOperator 0x3024ba8 <line:86:5, col:27> 'int' lvalue '='
    | |-DeclRefExpr 0x3024a60 <col:5> 'int' lvalue Var 0x30230e0 'sum' 'int'
    | `-ImplicitCastExpr 0x3024b98 <col:11, col:27> 'int' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x3024b80 <col:11, col:27> 'int' lvalue
    |     |-ImplicitCastExpr 0x3024b70 <col:11, col:23> 'int *' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0x3024b38 <col:11, col:23> 'int [100]' lvalue
    |     |   |-ImplicitCastExpr 0x3024b28 <col:11, col:19> 'int (*)[100]' <ArrayToPointerDecay>
    |     |   | `-ArraySubscriptExpr 0x3024ad8 <col:11, col:19> 'int [100][100]' lvalue
    |     |   |   |-ImplicitCastExpr 0x3024ac8 <col:11> 'int (*)[100][100]' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x3024a78 <col:11> 'int [100][100][100]' lvalue Var 0x3024a20 'array' 'int [100][100][100]'
    |     |   |   `-IntegerLiteral 0x3024a90 <col:17> 'int' 10
    |     |   `-IntegerLiteral 0x3024af0 <col:21> 'int' 10
    |     `-IntegerLiteral 0x3024b50 <col:25> 'int' 10
    `-ReturnStmt 0x3024be0 <line:88:5, col:12>
      `-IntegerLiteral 0x3024bc0 <col:12> 'int' 0
