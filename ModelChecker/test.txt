TranslationUnitDecl 0x1028254d0 <<invalid sloc>>
|-TypedefDecl 0x102825a10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x102825a70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x102825e30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-VarDecl 0x102825f00 <./test.cpp:1:1, col:23> staVar 'char [100]' static
|-VarDecl 0x102825f70 <line:2:1, col:15> globVar 'int'
| `-IntegerLiteral 0x102825fc8 <col:15> 'int' 0
|-FunctionDecl 0x1028260c0 <line:4:1, line:6:1> increment 'int (int)'
| |-ParmVarDecl 0x102826000 <line:4:15, col:19> value 'int'
| `-CompoundStmt 0x1028261e8 <col:26, line:6:1>
|   `-ReturnStmt 0x1028261c8 <line:5:2, col:11>
|     `-ImplicitCastExpr 0x1028261b0 <col:9, col:11> 'int' <LValueToRValue>
|       `-UnaryOperator 0x102826190 <col:9, col:11> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x102826168 <col:11> 'int' lvalue ParmVar 0x102826000 'value' 'int'
|-FunctionDecl 0x1028725a0 <line:8:1, line:10:1> increment 'void (int &, int)'
| |-ParmVarDecl 0x102872460 <line:8:16, col:21> value 'int &'
| |-ParmVarDecl 0x1028724d0 <col:28, col:32> steps 'int'
| `-CompoundStmt 0x1028726f0 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x1028726b8 <line:9:2, col:11> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x102872650 <col:2> 'int' lvalue ParmVar 0x102872460 'value' 'int &'
|     `-ImplicitCastExpr 0x1028726a0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102872678 <col:11> 'int' lvalue ParmVar 0x1028724d0 'steps' 'int'
|-FunctionDecl 0x1028727a0 <line:12:1, line:14:1> self 'int (int)'
| |-ParmVarDecl 0x102872720 <line:12:10, col:14> value 'int'
| `-CompoundStmt 0x1028728a8 <col:21, line:14:1>
|   `-ReturnStmt 0x102872888 <line:13:2, col:9>
|     `-ImplicitCastExpr 0x102872870 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102872848 <col:9> 'int' lvalue ParmVar 0x102872720 'value' 'int'
`-FunctionDecl 0x102872b30 <line:16:1, line:89:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1028728e0 <line:16:10, col:14> argc 'int'
  |-ParmVarDecl 0x102872a20 <col:20, col:31> argv 'char **':'char **'
  `-CompoundStmt 0x102879bb8 <col:34, line:89:1>
    |-DeclStmt 0x102873068 <line:17:2, col:69>
    | `-VarDecl 0x102872c30 <col:2, col:68> arr 'int [14]'
    |   `-InitListExpr 0x102872ef8 <col:14, col:68> 'int [14]'
    |     |-IntegerLiteral 0x102872c88 <col:16> 'int' 22
    |     |-IntegerLiteral 0x102872ca8 <col:20> 'int' 34
    |     |-IntegerLiteral 0x102872cc8 <col:24> 'int' 3
    |     |-IntegerLiteral 0x102872ce8 <col:27> 'int' 32
    |     |-IntegerLiteral 0x102872d08 <col:31> 'int' 82
    |     |-IntegerLiteral 0x102872d28 <col:35> 'int' 55
    |     |-IntegerLiteral 0x102872d48 <col:39> 'int' 89
    |     |-IntegerLiteral 0x102872d68 <col:43> 'int' 50
    |     |-IntegerLiteral 0x102872d88 <col:47> 'int' 37
    |     |-IntegerLiteral 0x102872da8 <col:51> 'int' 5
    |     |-IntegerLiteral 0x102872dc8 <col:54> 'int' 64
    |     |-IntegerLiteral 0x102872de8 <col:58> 'int' 35
    |     |-IntegerLiteral 0x102872e08 <col:62> 'int' 9
    |     `-IntegerLiteral 0x102872e28 <col:65> 'int' 70
    |-DeclStmt 0x102873108 <line:18:2, col:14>
    | `-VarDecl 0x102873090 <col:2, col:12> len 'int'
    |   `-IntegerLiteral 0x1028730e8 <col:12> 'int' 14
    |-DeclStmt 0x102873288 <line:19:2, col:16>
    | |-VarDecl 0x102873130 <col:2, col:6> i 'int'
    | |-VarDecl 0x1028731a0 <col:2, col:9> j 'int'
    | `-VarDecl 0x102873210 <col:2, col:12> temp 'int'
    |-DeclStmt 0x102873328 <line:20:2, col:13>
    | `-VarDecl 0x1028732b0 <col:2, col:12> sum 'int'
    |   `-IntegerLiteral 0x102873308 <col:12> 'int' 0
    |-LabelStmt 0x1028797e8 <line:49:1, line:70:2> 'label'
    | `-IfStmt 0x102879778 <line:49:8, line:70:2>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0x1028735d8 <line:49:12, col:54> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0x1028735c0 <col:12, col:54> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0x102873590 <col:12, col:54> 'int' lvalue
    |   |     |-BinaryOperator 0x1028733a0 <col:12, col:19> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0x102873388 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x102873340 <col:12> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   |     | `-IntegerLiteral 0x102873368 <col:19> 'int' 19
    |   |     |-ParenExpr 0x102873500 <col:24, col:44> 'int' lvalue
    |   |     | `-BinaryOperator 0x1028734d8 <col:25, col:42> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0x102873430 <col:25, col:31> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0x1028733c8 <col:25> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0x102873410 <col:31> 'int' 20
    |   |     |   `-CompoundAssignOperator 0x1028734a0 <col:35, col:42> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0x102873458 <col:35> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0x102873480 <col:42> 'int' 10
    |   |     `-BinaryOperator 0x102873568 <col:48, col:54> 'int' lvalue '='
    |   |       |-DeclRefExpr 0x102873520 <col:48> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   |       `-IntegerLiteral 0x102873548 <col:54> 'int' 30
    |   |-BinaryOperator 0x102873638 <line:50:3, col:9> 'int' lvalue '='
    |   | |-DeclRefExpr 0x1028735f0 <col:3> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   | `-IntegerLiteral 0x102873618 <col:9> 'int' 10000
    |   `-CompoundStmt 0x102879750 <line:51:7, line:70:2>
    |     |-ForStmt 0x102879680 <line:52:3, line:66:4>
    |     | |-<<<NULL>>>
    |     | |-<<<NULL>>>
    |     | |-BinaryOperator 0x1028736c0 <line:52:10, col:16> '_Bool' '>'
    |     | | |-ImplicitCastExpr 0x1028736a8 <col:10> 'int' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x102873660 <col:10> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |     | | `-IntegerLiteral 0x102873688 <col:16> 'int' 0
    |     | |-CompoundAssignOperator 0x102873730 <col:19, col:26> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | | |-DeclRefExpr 0x1028736e8 <col:19> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |     | | `-IntegerLiteral 0x102873710 <col:26> 'int' 2
    |     | `-SwitchStmt 0x1028737a8 <line:53:4, line:66:4>
    |     |   |-<<<NULL>>>
    |     |   |-ImplicitCastExpr 0x102873790 <line:53:12> 'int' <LValueToRValue>
    |     |   | `-DeclRefExpr 0x102873768 <col:12> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |     |   `-CompoundStmt 0x102879650 <col:17, line:66:4>
    |     |     |-CaseStmt 0x1028737f8 <line:54:4, line:56:5>
    |     |     | |-IntegerLiteral 0x1028737d8 <line:54:9> 'int' 1
    |     |     | |-<<<NULL>>>
    |     |     | `-CaseStmt 0x102873850 <line:55:4, line:56:5>
    |     |     |   |-IntegerLiteral 0x102873830 <line:55:9> 'int' 2
    |     |     |   |-<<<NULL>>>
    |     |     |   `-BreakStmt 0x102873888 <line:56:5>
    |     |     |-CaseStmt 0x1028738b8 <line:57:4, line:58:8>
    |     |     | |-IntegerLiteral 0x102873898 <line:57:9> 'int' 3
    |     |     | |-<<<NULL>>>
    |     |     | `-UnaryOperator 0x102873918 <line:58:5, col:8> 'int' postfix '++'
    |     |     |   `-DeclRefExpr 0x1028738f0 <col:5> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |     |     `-ForStmt 0x102879610 <line:59:5, line:65:7>
    |     |       |-BinaryOperator 0x102873980 <line:59:10, col:14> 'int' lvalue '='
    |     |       | |-DeclRefExpr 0x102873938 <col:10> 'int' lvalue Var 0x102873130 'i' 'int'
    |     |       | `-IntegerLiteral 0x102873960 <col:14> 'int' 0
    |     |       |-<<<NULL>>>
    |     |       |-BinaryOperator 0x102873a70 <col:17, col:27> '_Bool' '<'
    |     |       | |-ImplicitCastExpr 0x102873a58 <col:17> 'int' <LValueToRValue>
    |     |       | | `-DeclRefExpr 0x1028739a8 <col:17> 'int' lvalue Var 0x102873130 'i' 'int'
    |     |       | `-BinaryOperator 0x102873a30 <col:21, col:27> 'int' '-'
    |     |       |   |-ImplicitCastExpr 0x102873a18 <col:21> 'int' <LValueToRValue>
    |     |       |   | `-DeclRefExpr 0x1028739d0 <col:21> 'int' lvalue Var 0x102873090 'len' 'int'
    |     |       |   `-IntegerLiteral 0x1028739f8 <col:27> 'int' 1
    |     |       |-UnaryOperator 0x102873ac0 <col:30, col:31> 'int' postfix '++'
    |     |       | `-DeclRefExpr 0x102873a98 <col:30> 'int' lvalue Var 0x102873130 'i' 'int'
    |     |       `-ForStmt 0x1028743a8 <line:60:6, line:65:7>
    |     |         |-BinaryOperator 0x102873b28 <line:60:11, col:15> 'int' lvalue '='
    |     |         | |-DeclRefExpr 0x102873ae0 <col:11> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |         | `-IntegerLiteral 0x102873b08 <col:15> 'int' 0
    |     |         |-<<<NULL>>>
    |     |         |-BinaryOperator 0x102873c80 <col:18, col:32> '_Bool' '<'
    |     |         | |-ImplicitCastExpr 0x102873c68 <col:18> 'int' <LValueToRValue>
    |     |         | | `-DeclRefExpr 0x102873b50 <col:18> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |         | `-BinaryOperator 0x102873c40 <col:22, col:32> 'int' '-'
    |     |         |   |-BinaryOperator 0x102873bd8 <col:22, col:28> 'int' '-'
    |     |         |   | |-ImplicitCastExpr 0x102873bc0 <col:22> 'int' <LValueToRValue>
    |     |         |   | | `-DeclRefExpr 0x102873b78 <col:22> 'int' lvalue Var 0x102873090 'len' 'int'
    |     |         |   | `-IntegerLiteral 0x102873ba0 <col:28> 'int' 1
    |     |         |   `-ImplicitCastExpr 0x102873c28 <col:32> 'int' <LValueToRValue>
    |     |         |     `-DeclRefExpr 0x102873c00 <col:32> 'int' lvalue Var 0x102873130 'i' 'int'
    |     |         |-UnaryOperator 0x102873cd0 <col:35, col:36> 'int' postfix '++'
    |     |         | `-DeclRefExpr 0x102873ca8 <col:35> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |         `-IfStmt 0x102874378 <line:61:7, line:65:7>
    |     |           |-<<<NULL>>>
    |     |           |-BinaryOperator 0x102873ee0 <line:61:11, col:29> '_Bool' '>'
    |     |           | |-ImplicitCastExpr 0x102873eb0 <col:11, col:16> 'int' <LValueToRValue>
    |     |           | | `-ArraySubscriptExpr 0x102873d98 <col:11, col:16> 'int' lvalue
    |     |           | |   |-ImplicitCastExpr 0x102873d68 <col:11> 'int *' <ArrayToPointerDecay>
    |     |           | |   | `-DeclRefExpr 0x102873cf0 <col:11> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           | |   `-ImplicitCastExpr 0x102873d80 <col:15> 'int' <LValueToRValue>
    |     |           | |     `-DeclRefExpr 0x102873d18 <col:15> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           | `-ImplicitCastExpr 0x102873ec8 <col:20, col:29> 'int' <LValueToRValue>
    |     |           |   `-ArraySubscriptExpr 0x102873e88 <col:20, col:29> 'int' lvalue
    |     |           |     |-ImplicitCastExpr 0x102873e70 <col:20> 'int *' <ArrayToPointerDecay>
    |     |           |     | `-DeclRefExpr 0x102873dc0 <col:20> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           |     `-BinaryOperator 0x102873e48 <col:24, col:28> 'int' '+'
    |     |           |       |-ImplicitCastExpr 0x102873e30 <col:24> 'int' <LValueToRValue>
    |     |           |       | `-DeclRefExpr 0x102873de8 <col:24> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           |       `-IntegerLiteral 0x102873e10 <col:28> 'int' 1
    |     |           |-CompoundStmt 0x102874348 <col:32, line:65:7>
    |     |           | |-BinaryOperator 0x102873ff0 <line:62:8, col:20> 'int' lvalue '='
    |     |           | | |-DeclRefExpr 0x102873f08 <col:8> 'int' lvalue Var 0x102873210 'temp' 'int'
    |     |           | | `-ImplicitCastExpr 0x102873fd8 <col:15, col:20> 'int' <LValueToRValue>
    |     |           | |   `-ArraySubscriptExpr 0x102873fb0 <col:15, col:20> 'int' lvalue
    |     |           | |     |-ImplicitCastExpr 0x102873f80 <col:15> 'int *' <ArrayToPointerDecay>
    |     |           | |     | `-DeclRefExpr 0x102873f30 <col:15> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           | |     `-ImplicitCastExpr 0x102873f98 <col:19> 'int' <LValueToRValue>
    |     |           | |       `-DeclRefExpr 0x102873f58 <col:19> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           | |-BinaryOperator 0x1028741c8 <line:63:8, col:26> 'int' lvalue '='
    |     |           | | |-ArraySubscriptExpr 0x102874098 <col:8, col:13> 'int' lvalue
    |     |           | | | |-ImplicitCastExpr 0x102874068 <col:8> 'int *' <ArrayToPointerDecay>
    |     |           | | | | `-DeclRefExpr 0x102874018 <col:8> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           | | | `-ImplicitCastExpr 0x102874080 <col:12> 'int' <LValueToRValue>
    |     |           | | |   `-DeclRefExpr 0x102874040 <col:12> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           | | `-ImplicitCastExpr 0x1028741b0 <col:17, col:26> 'int' <LValueToRValue>
    |     |           | |   `-ArraySubscriptExpr 0x102874188 <col:17, col:26> 'int' lvalue
    |     |           | |     |-ImplicitCastExpr 0x102874170 <col:17> 'int *' <ArrayToPointerDecay>
    |     |           | |     | `-DeclRefExpr 0x1028740c0 <col:17> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           | |     `-BinaryOperator 0x102874148 <col:21, col:25> 'int' '+'
    |     |           | |       |-ImplicitCastExpr 0x102874130 <col:21> 'int' <LValueToRValue>
    |     |           | |       | `-DeclRefExpr 0x1028740e8 <col:21> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           | |       `-IntegerLiteral 0x102874110 <col:25> 'int' 1
    |     |           | `-BinaryOperator 0x102874320 <line:64:8, col:21> 'int' lvalue '='
    |     |           |   |-ArraySubscriptExpr 0x1028742b8 <col:8, col:17> 'int' lvalue
    |     |           |   | |-ImplicitCastExpr 0x1028742a0 <col:8> 'int *' <ArrayToPointerDecay>
    |     |           |   | | `-DeclRefExpr 0x1028741f0 <col:8> 'int [14]' lvalue Var 0x102872c30 'arr' 'int [14]'
    |     |           |   | `-BinaryOperator 0x102874278 <col:12, col:16> 'int' '+'
    |     |           |   |   |-ImplicitCastExpr 0x102874260 <col:12> 'int' <LValueToRValue>
    |     |           |   |   | `-DeclRefExpr 0x102874218 <col:12> 'int' lvalue Var 0x1028731a0 'j' 'int'
    |     |           |   |   `-IntegerLiteral 0x102874240 <col:16> 'int' 1
    |     |           |   `-ImplicitCastExpr 0x102874308 <col:21> 'int' <LValueToRValue>
    |     |           |     `-DeclRefExpr 0x1028742e0 <col:21> 'int' lvalue Var 0x102873210 'temp' 'int'
    |     |           `-<<<NULL>>>
    |     `-WhileStmt 0x102879728 <line:67:3, line:69:3>
    |       |-<<<NULL>>>
    |       |-ImplicitCastExpr 0x1028796e0 <line:67:10> '_Bool' <IntegralToBoolean>
    |       | `-IntegerLiteral 0x1028796c0 <col:10> 'int' 1
    |       `-CompoundStmt 0x102879708 <col:13, line:69:3>
    |         `-NullStmt 0x1028796f8 <line:68:4>
    |-SwitchStmt 0x102879848 <line:72:2, line:86:2>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x102879830 <line:72:10> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x102879808 <col:10> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    | `-CompoundStmt 0x102879b38 <col:15, line:86:2>
    |   |-CaseStmt 0x102879898 <line:73:2, line:77:4>
    |   | |-IntegerLiteral 0x102879878 <line:73:7> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-IfStmt 0x102879928 <line:74:3, line:77:4>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0x1028798f0 <line:74:7> '_Bool' <IntegralToBoolean>
    |   |   | `-IntegerLiteral 0x1028798d0 <col:7> 'int' 1
    |   |   |-NullStmt 0x102879908 <line:75:4>
    |   |   `-BreakStmt 0x102879918 <line:77:4>
    |   |-CaseStmt 0x102879978 <line:78:2, line:79:3>
    |   | |-IntegerLiteral 0x102879958 <line:78:7> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BreakStmt 0x1028799b0 <line:79:3>
    |   |-CaseStmt 0x1028799e0 <line:80:2, line:81:8>
    |   | |-IntegerLiteral 0x1028799c0 <line:80:7> 'int' 3
    |   | |-<<<NULL>>>
    |   | `-GotoStmt 0x102879a18 <line:81:3, col:8> 'label' 0x1028797b0
    |   |-CaseStmt 0x102879a50 <line:82:2, line:84:6>
    |   | |-IntegerLiteral 0x102879a30 <line:82:7> 'int' 4
    |   | |-<<<NULL>>>
    |   | `-DefaultStmt 0x102879ad0 <line:83:2, line:84:6>
    |   |   `-UnaryOperator 0x102879ab0 <col:3, col:6> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x102879a88 <col:3> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   `-UnaryOperator 0x102879b18 <line:85:3, col:6> 'int' postfix '--'
    |     `-DeclRefExpr 0x102879af0 <col:3> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    `-ReturnStmt 0x102879b98 <line:88:2, col:9>
      `-IntegerLiteral 0x102879b78 <col:9> 'int' 0
