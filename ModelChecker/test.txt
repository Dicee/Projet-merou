TranslationUnitDecl 0x1038058d0 <<invalid sloc>>
|-TypedefDecl 0x103805e10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x103805e70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x103806230 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-VarDecl 0x103806300 <./test.cpp:1:1, col:23> staVar 'char [100]' static
|-VarDecl 0x103806370 <line:2:1, col:15> globVar 'int'
| `-IntegerLiteral 0x1038063c8 <col:15> 'int' 0
|-FunctionDecl 0x1038064c0 <line:4:1, line:6:1> increment 'int (int)'
| |-ParmVarDecl 0x103806400 <line:4:15, col:19> value 'int'
| `-CompoundStmt 0x1038065e8 <col:26, line:6:1>
|   `-ReturnStmt 0x1038065c8 <line:5:2, col:11>
|     `-ImplicitCastExpr 0x1038065b0 <col:9, col:11> 'int' <LValueToRValue>
|       `-UnaryOperator 0x103806590 <col:9, col:11> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x103806568 <col:11> 'int' lvalue ParmVar 0x103806400 'value' 'int'
|-FunctionDecl 0x1030483a0 <line:8:1, line:10:1> increment 'void (int &, int)'
| |-ParmVarDecl 0x103048260 <line:8:16, col:21> value 'int &'
| |-ParmVarDecl 0x1030482d0 <col:28, col:32> steps 'int'
| `-CompoundStmt 0x1030484f0 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x1030484b8 <line:9:2, col:11> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x103048450 <col:2> 'int' lvalue ParmVar 0x103048260 'value' 'int &'
|     `-ImplicitCastExpr 0x1030484a0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x103048478 <col:11> 'int' lvalue ParmVar 0x1030482d0 'steps' 'int'
|-FunctionDecl 0x1030485a0 <line:12:1, line:14:1> self 'int (int)'
| |-ParmVarDecl 0x103048520 <line:12:10, col:14> value 'int'
| `-CompoundStmt 0x1030486a8 <col:21, line:14:1>
|   `-ReturnStmt 0x103048688 <line:13:2, col:9>
|     `-ImplicitCastExpr 0x103048670 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x103048648 <col:9> 'int' lvalue ParmVar 0x103048520 'value' 'int'
`-FunctionDecl 0x103048930 <line:16:1, line:89:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1030486e0 <line:16:10, col:14> argc 'int'
  |-ParmVarDecl 0x103048820 <col:20, col:31> argv 'char **':'char **'
  `-CompoundStmt 0x10304bd08 <col:34, line:89:1>
    |-DeclStmt 0x103048e68 <line:17:2, col:69>
    | `-VarDecl 0x103048a30 <col:2, col:68> arr 'int [14]'
    |   `-InitListExpr 0x103048cf8 <col:14, col:68> 'int [14]'
    |     |-IntegerLiteral 0x103048a88 <col:16> 'int' 22
    |     |-IntegerLiteral 0x103048aa8 <col:20> 'int' 34
    |     |-IntegerLiteral 0x103048ac8 <col:24> 'int' 3
    |     |-IntegerLiteral 0x103048ae8 <col:27> 'int' 32
    |     |-IntegerLiteral 0x103048b08 <col:31> 'int' 82
    |     |-IntegerLiteral 0x103048b28 <col:35> 'int' 55
    |     |-IntegerLiteral 0x103048b48 <col:39> 'int' 89
    |     |-IntegerLiteral 0x103048b68 <col:43> 'int' 50
    |     |-IntegerLiteral 0x103048b88 <col:47> 'int' 37
    |     |-IntegerLiteral 0x103048ba8 <col:51> 'int' 5
    |     |-IntegerLiteral 0x103048bc8 <col:54> 'int' 64
    |     |-IntegerLiteral 0x103048be8 <col:58> 'int' 35
    |     |-IntegerLiteral 0x103048c08 <col:62> 'int' 9
    |     `-IntegerLiteral 0x103048c28 <col:65> 'int' 70
    |-DeclStmt 0x103048f08 <line:18:2, col:14>
    | `-VarDecl 0x103048e90 <col:2, col:12> len 'int'
    |   `-IntegerLiteral 0x103048ee8 <col:12> 'int' 14
    |-DeclStmt 0x103049088 <line:19:2, col:16>
    | |-VarDecl 0x103048f30 <col:2, col:6> i 'int'
    | |-VarDecl 0x103048fa0 <col:2, col:9> j 'int'
    | `-VarDecl 0x103049010 <col:2, col:12> temp 'int'
    |-DeclStmt 0x103049128 <line:20:2, col:13>
    | `-VarDecl 0x1030490b0 <col:2, col:12> sum 'int'
    |   `-IntegerLiteral 0x103049108 <col:12> 'int' 0
    |-BinaryOperator 0x1030496c8 <line:21:2, col:21> 'int' lvalue '='
    | |-DeclRefExpr 0x103049140 <col:2> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | `-CallExpr 0x103049680 <col:8, col:21> 'int'
    |   |-ImplicitCastExpr 0x103049668 <col:8> 'int (*)(int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x103049610 <col:8> 'int (int)' lvalue Function 0x1038064c0 'increment' 'int (int)'
    |   `-ImplicitCastExpr 0x1030496b0 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1030491c8 <col:18> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |-ForStmt 0x103049a98 <line:22:2, line:29:2>
    | |-DeclStmt 0x103049778 <line:22:7, col:16>
    | | `-VarDecl 0x103049700 <col:7, col:15> i 'int'
    | |   `-IntegerLiteral 0x103049758 <col:15> 'int' 0
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x103049a60 <col:20, line:29:2>
    |   |-CompoundAssignOperator 0x1030497f8 <line:23:3, col:10> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x103049790 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   | `-ImplicitCastExpr 0x1030497e0 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1030497b8 <col:10> 'int' lvalue Var 0x103049700 'i' 'int'
    |   |-IfStmt 0x1030498c8 <line:24:3, line:25:4>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x103049890 <line:24:7, col:12> '_Bool' '=='
    |   | | |-ImplicitCastExpr 0x103049878 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x103049830 <col:7> 'int' lvalue Var 0x103049700 'i' 'int'
    |   | | `-IntegerLiteral 0x103049858 <col:12> 'int' 8
    |   | |-BreakStmt 0x1030498b8 <line:25:4>
    |   | `-<<<NULL>>>
    |   |-IfStmt 0x103049990 <line:26:3, line:27:4>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x103049958 <line:26:7, col:11> '_Bool' '<'
    |   | | |-ImplicitCastExpr 0x103049940 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1030498f8 <col:7> 'int' lvalue Var 0x103049700 'i' 'int'
    |   | | `-IntegerLiteral 0x103049920 <col:11> 'int' 8
    |   | |-ContinueStmt 0x103049980 <line:27:4>
    |   | `-<<<NULL>>>
    |   `-CompoundAssignOperator 0x103049a28 <line:28:3, col:10> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x1030499c0 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |     `-ImplicitCastExpr 0x103049a10 <col:10> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1030499e8 <col:10> 'int' lvalue Var 0x103049700 'i' 'int'
    |-IfStmt 0x103049ee0 <line:30:2, line:36:25>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x103049b38 <line:30:6, col:12> '_Bool' '>'
    | | |-ImplicitCastExpr 0x103049b20 <col:6> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x103049ad8 <col:6> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | | `-IntegerLiteral 0x103049b00 <col:12> 'int' 100
    | |-BinaryOperator 0x103049ba8 <line:31:3, col:9> 'int' lvalue '='
    | | |-DeclRefExpr 0x103049b60 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | | `-IntegerLiteral 0x103049b88 <col:9> 'int' 100
    | `-IfStmt 0x103049eb0 <line:32:7, line:36:25>
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0x103049c30 <line:32:11, col:17> '_Bool' '>'
    |   | |-ImplicitCastExpr 0x103049c18 <col:11> 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x103049bd0 <col:11> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   | `-IntegerLiteral 0x103049bf8 <col:17> 'int' 50
    |   |-CompoundStmt 0x103049d08 <col:21, line:35:2>
    |   | |-BinaryOperator 0x103049ca0 <line:33:3, col:9> 'int' lvalue '='
    |   | | |-DeclRefExpr 0x103049c58 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   | | `-IntegerLiteral 0x103049c80 <col:9> 'int' 50
    |   | `-ReturnStmt 0x103049ce8 <line:34:3, col:10>
    |   |   `-IntegerLiteral 0x103049cc8 <col:10> 'int' 1
    |   `-BinaryOperator 0x103049e88 <line:36:3, col:25> 'int' lvalue ','
    |     |-CompoundAssignOperator 0x103049d78 <col:3, col:10> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |     | |-DeclRefExpr 0x103049d30 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |     | `-IntegerLiteral 0x103049d58 <col:10> 'int' 5
    |     `-BinaryOperator 0x103049e60 <col:13, col:25> 'int' lvalue '='
    |       |-DeclRefExpr 0x103049db0 <col:13> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |       `-BinaryOperator 0x103049e38 <col:19, col:25> 'int' '+'
    |         |-ImplicitCastExpr 0x103049e20 <col:19> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x103049dd8 <col:19> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |         `-IntegerLiteral 0x103049e00 <col:25> 'int' 10
    |-SwitchStmt 0x103049f98 <line:38:2, line:46:2>
    | |-<<<NULL>>>
    | |-BinaryOperator 0x103049f70 <line:38:10, col:16> 'int' '/'
    | | |-ImplicitCastExpr 0x103049f58 <col:10> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x103049f10 <col:10> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | | `-IntegerLiteral 0x103049f38 <col:16> 'int' 10
    | `-CompoundStmt 0x10304a208 <col:20, line:46:2>
    |   |-CaseStmt 0x103049fe8 <line:39:2, line:40:9>
    |   | |-IntegerLiteral 0x103049fc8 <line:39:7> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x10304a068 <line:40:3, col:9> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x10304a020 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |   `-IntegerLiteral 0x10304a048 <col:9> 'int' 20
    |   |-BreakStmt 0x10304a090 <line:41:3>
    |   |-CaseStmt 0x10304a0c0 <line:42:2, line:43:9>
    |   | |-IntegerLiteral 0x10304a0a0 <line:42:7> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BinaryOperator 0x10304a140 <line:43:3, col:9> 'int' lvalue '='
    |   |   |-DeclRefExpr 0x10304a0f8 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |   `-IntegerLiteral 0x10304a120 <col:9> 'int' 30
    |   `-DefaultStmt 0x10304a1e8 <line:44:2, line:45:10>
    |     `-CompoundAssignOperator 0x10304a1b0 <col:3, col:10> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       |-DeclRefExpr 0x10304a168 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |       `-IntegerLiteral 0x10304a190 <col:10> 'int' 10
    |-CallExpr 0x10304a300 <line:47:2, col:10> 'int'
    | |-ImplicitCastExpr 0x10304a2e8 <col:2> 'int (*)(int)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x10304a2c0 <col:2> 'int (int)' lvalue Function 0x1030485a0 'self' 'int (int)'
    | `-ImplicitCastExpr 0x10304a330 <col:7> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x10304a298 <col:7> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |-LabelStmt 0x10304b528 <line:49:1, line:67:2> 'label'
    | `-IfStmt 0x10304b4b8 <line:49:8, line:67:2>
    |   |-<<<NULL>>>
    |   |-ImplicitCastExpr 0x10304a5c0 <line:49:12, col:54> '_Bool' <IntegralToBoolean>
    |   | `-ImplicitCastExpr 0x10304a5a8 <col:12, col:54> 'int' <LValueToRValue>
    |   |   `-ConditionalOperator 0x10304a578 <col:12, col:54> 'int' lvalue
    |   |     |-BinaryOperator 0x10304a3a8 <col:12, col:19> '_Bool' '=='
    |   |     | |-ImplicitCastExpr 0x10304a390 <col:12> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x10304a348 <col:12> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |     | `-IntegerLiteral 0x10304a370 <col:19> 'int' 19
    |   |     |-ParenExpr 0x10304a4e8 <col:24, col:44> 'int' lvalue
    |   |     | `-BinaryOperator 0x10304a4c0 <col:25, col:42> 'int' lvalue ','
    |   |     |   |-BinaryOperator 0x10304a418 <col:25, col:31> 'int' lvalue '='
    |   |     |   | |-DeclRefExpr 0x10304a3d0 <col:25> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |     |   | `-IntegerLiteral 0x10304a3f8 <col:31> 'int' 20
    |   |     |   `-CompoundAssignOperator 0x10304a488 <col:35, col:42> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
    |   |     |     |-DeclRefExpr 0x10304a440 <col:35> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |     |     `-IntegerLiteral 0x10304a468 <col:42> 'int' 10
    |   |     `-BinaryOperator 0x10304a550 <col:48, col:54> 'int' lvalue '='
    |   |       |-DeclRefExpr 0x10304a508 <col:48> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   |       `-IntegerLiteral 0x10304a530 <col:54> 'int' 30
    |   |-BinaryOperator 0x10304a630 <line:50:3, col:9> 'int' lvalue '='
    |   | |-DeclRefExpr 0x10304a5d8 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   | `-IntegerLiteral 0x10304a610 <col:9> 'int' 10000
    |   `-CompoundStmt 0x10304b498 <line:51:7, line:67:2>
    |     `-ForStmt 0x10304b458 <line:52:3, line:66:4>
    |       |-<<<NULL>>>
    |       |-<<<NULL>>>
    |       |-BinaryOperator 0x10304a6b8 <line:52:10, col:16> '_Bool' '>'
    |       | |-ImplicitCastExpr 0x10304a6a0 <col:10> 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x10304a658 <col:10> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |       | `-IntegerLiteral 0x10304a680 <col:16> 'int' 0
    |       |-CompoundAssignOperator 0x10304a728 <col:19, col:26> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |       | |-DeclRefExpr 0x10304a6e0 <col:19> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |       | `-IntegerLiteral 0x10304a708 <col:26> 'int' 2
    |       `-SwitchStmt 0x10304a7a0 <line:53:4, line:66:4>
    |         |-<<<NULL>>>
    |         |-ImplicitCastExpr 0x10304a788 <line:53:12> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x10304a760 <col:12> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |         `-CompoundStmt 0x10304b428 <col:17, line:66:4>
    |           |-CaseStmt 0x10304a7f0 <line:54:4, line:56:5>
    |           | |-IntegerLiteral 0x10304a7d0 <line:54:9> 'int' 1
    |           | |-<<<NULL>>>
    |           | `-CaseStmt 0x10304a848 <line:55:4, line:56:5>
    |           |   |-IntegerLiteral 0x10304a828 <line:55:9> 'int' 2
    |           |   |-<<<NULL>>>
    |           |   `-BreakStmt 0x10304a880 <line:56:5>
    |           |-CaseStmt 0x10304a8b0 <line:57:4, line:58:8>
    |           | |-IntegerLiteral 0x10304a890 <line:57:9> 'int' 3
    |           | |-<<<NULL>>>
    |           | `-UnaryOperator 0x10304a910 <line:58:5, col:8> 'int' postfix '++'
    |           |   `-DeclRefExpr 0x10304a8e8 <col:5> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |           `-ForStmt 0x10304b3e8 <line:59:5, line:65:7>
    |             |-BinaryOperator 0x10304a978 <line:59:10, col:14> 'int' lvalue '='
    |             | |-DeclRefExpr 0x10304a930 <col:10> 'int' lvalue Var 0x103048f30 'i' 'int'
    |             | `-IntegerLiteral 0x10304a958 <col:14> 'int' 0
    |             |-<<<NULL>>>
    |             |-BinaryOperator 0x10304aa68 <col:17, col:27> '_Bool' '<'
    |             | |-ImplicitCastExpr 0x10304aa50 <col:17> 'int' <LValueToRValue>
    |             | | `-DeclRefExpr 0x10304a9a0 <col:17> 'int' lvalue Var 0x103048f30 'i' 'int'
    |             | `-BinaryOperator 0x10304aa28 <col:21, col:27> 'int' '-'
    |             |   |-ImplicitCastExpr 0x10304aa10 <col:21> 'int' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x10304a9c8 <col:21> 'int' lvalue Var 0x103048e90 'len' 'int'
    |             |   `-IntegerLiteral 0x10304a9f0 <col:27> 'int' 1
    |             |-UnaryOperator 0x10304aab8 <col:30, col:31> 'int' postfix '++'
    |             | `-DeclRefExpr 0x10304aa90 <col:30> 'int' lvalue Var 0x103048f30 'i' 'int'
    |             `-ForStmt 0x10304b3a8 <line:60:6, line:65:7>
    |               |-BinaryOperator 0x10304ab20 <line:60:11, col:15> 'int' lvalue '='
    |               | |-DeclRefExpr 0x10304aad8 <col:11> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |               | `-IntegerLiteral 0x10304ab00 <col:15> 'int' 0
    |               |-<<<NULL>>>
    |               |-BinaryOperator 0x10304ac78 <col:18, col:32> '_Bool' '<'
    |               | |-ImplicitCastExpr 0x10304ac60 <col:18> 'int' <LValueToRValue>
    |               | | `-DeclRefExpr 0x10304ab48 <col:18> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |               | `-BinaryOperator 0x10304ac38 <col:22, col:32> 'int' '-'
    |               |   |-BinaryOperator 0x10304abd0 <col:22, col:28> 'int' '-'
    |               |   | |-ImplicitCastExpr 0x10304abb8 <col:22> 'int' <LValueToRValue>
    |               |   | | `-DeclRefExpr 0x10304ab70 <col:22> 'int' lvalue Var 0x103048e90 'len' 'int'
    |               |   | `-IntegerLiteral 0x10304ab98 <col:28> 'int' 1
    |               |   `-ImplicitCastExpr 0x10304ac20 <col:32> 'int' <LValueToRValue>
    |               |     `-DeclRefExpr 0x10304abf8 <col:32> 'int' lvalue Var 0x103048f30 'i' 'int'
    |               |-UnaryOperator 0x10304acc8 <col:35, col:36> 'int' postfix '++'
    |               | `-DeclRefExpr 0x10304aca0 <col:35> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |               `-IfStmt 0x10304b378 <line:61:7, line:65:7>
    |                 |-<<<NULL>>>
    |                 |-BinaryOperator 0x10304aee0 <line:61:11, col:29> '_Bool' '>'
    |                 | |-ImplicitCastExpr 0x10304aeb0 <col:11, col:16> 'int' <LValueToRValue>
    |                 | | `-ArraySubscriptExpr 0x10304ad98 <col:11, col:16> 'int' lvalue
    |                 | |   |-ImplicitCastExpr 0x10304ad68 <col:11> 'int *' <ArrayToPointerDecay>
    |                 | |   | `-DeclRefExpr 0x10304ace8 <col:11> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 | |   `-ImplicitCastExpr 0x10304ad80 <col:15> 'int' <LValueToRValue>
    |                 | |     `-DeclRefExpr 0x10304ad10 <col:15> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 | `-ImplicitCastExpr 0x10304aec8 <col:20, col:29> 'int' <LValueToRValue>
    |                 |   `-ArraySubscriptExpr 0x10304ae88 <col:20, col:29> 'int' lvalue
    |                 |     |-ImplicitCastExpr 0x10304ae70 <col:20> 'int *' <ArrayToPointerDecay>
    |                 |     | `-DeclRefExpr 0x10304adc0 <col:20> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 |     `-BinaryOperator 0x10304ae48 <col:24, col:28> 'int' '+'
    |                 |       |-ImplicitCastExpr 0x10304ae30 <col:24> 'int' <LValueToRValue>
    |                 |       | `-DeclRefExpr 0x10304ade8 <col:24> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 |       `-IntegerLiteral 0x10304ae10 <col:28> 'int' 1
    |                 |-CompoundStmt 0x10304b348 <col:32, line:65:7>
    |                 | |-BinaryOperator 0x10304aff0 <line:62:8, col:20> 'int' lvalue '='
    |                 | | |-DeclRefExpr 0x10304af08 <col:8> 'int' lvalue Var 0x103049010 'temp' 'int'
    |                 | | `-ImplicitCastExpr 0x10304afd8 <col:15, col:20> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x10304afb0 <col:15, col:20> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x10304af80 <col:15> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x10304af30 <col:15> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 | |     `-ImplicitCastExpr 0x10304af98 <col:19> 'int' <LValueToRValue>
    |                 | |       `-DeclRefExpr 0x10304af58 <col:19> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 | |-BinaryOperator 0x10304b1c8 <line:63:8, col:26> 'int' lvalue '='
    |                 | | |-ArraySubscriptExpr 0x10304b098 <col:8, col:13> 'int' lvalue
    |                 | | | |-ImplicitCastExpr 0x10304b068 <col:8> 'int *' <ArrayToPointerDecay>
    |                 | | | | `-DeclRefExpr 0x10304b018 <col:8> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 | | | `-ImplicitCastExpr 0x10304b080 <col:12> 'int' <LValueToRValue>
    |                 | | |   `-DeclRefExpr 0x10304b040 <col:12> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 | | `-ImplicitCastExpr 0x10304b1b0 <col:17, col:26> 'int' <LValueToRValue>
    |                 | |   `-ArraySubscriptExpr 0x10304b188 <col:17, col:26> 'int' lvalue
    |                 | |     |-ImplicitCastExpr 0x10304b170 <col:17> 'int *' <ArrayToPointerDecay>
    |                 | |     | `-DeclRefExpr 0x10304b0c0 <col:17> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 | |     `-BinaryOperator 0x10304b148 <col:21, col:25> 'int' '+'
    |                 | |       |-ImplicitCastExpr 0x10304b130 <col:21> 'int' <LValueToRValue>
    |                 | |       | `-DeclRefExpr 0x10304b0e8 <col:21> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 | |       `-IntegerLiteral 0x10304b110 <col:25> 'int' 1
    |                 | `-BinaryOperator 0x10304b320 <line:64:8, col:21> 'int' lvalue '='
    |                 |   |-ArraySubscriptExpr 0x10304b2b8 <col:8, col:17> 'int' lvalue
    |                 |   | |-ImplicitCastExpr 0x10304b2a0 <col:8> 'int *' <ArrayToPointerDecay>
    |                 |   | | `-DeclRefExpr 0x10304b1f0 <col:8> 'int [14]' lvalue Var 0x103048a30 'arr' 'int [14]'
    |                 |   | `-BinaryOperator 0x10304b278 <col:12, col:16> 'int' '+'
    |                 |   |   |-ImplicitCastExpr 0x10304b260 <col:12> 'int' <LValueToRValue>
    |                 |   |   | `-DeclRefExpr 0x10304b218 <col:12> 'int' lvalue Var 0x103048fa0 'j' 'int'
    |                 |   |   `-IntegerLiteral 0x10304b240 <col:16> 'int' 1
    |                 |   `-ImplicitCastExpr 0x10304b308 <col:21> 'int' <LValueToRValue>
    |                 |     `-DeclRefExpr 0x10304b2e0 <col:21> 'int' lvalue Var 0x103049010 'temp' 'int'
    |                 `-<<<NULL>>>
    |-SwitchStmt 0x10304b588 <line:69:2, line:83:2>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x10304b570 <line:69:10> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x10304b548 <col:10> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | `-CompoundStmt 0x10304b8b0 <col:15, line:83:2>
    |   |-CaseStmt 0x10304b610 <line:70:2, line:74:4>
    |   | |-IntegerLiteral 0x10304b5b8 <line:70:7> 'int' 1
    |   | |-<<<NULL>>>
    |   | `-IfStmt 0x10304b6a0 <line:71:3, line:74:4>
    |   |   |-<<<NULL>>>
    |   |   |-ImplicitCastExpr 0x10304b668 <line:71:7> '_Bool' <IntegralToBoolean>
    |   |   | `-IntegerLiteral 0x10304b648 <col:7> 'int' 1
    |   |   |-NullStmt 0x10304b680 <line:72:4>
    |   |   `-BreakStmt 0x10304b690 <line:74:4>
    |   |-CaseStmt 0x10304b6f0 <line:75:2, line:76:3>
    |   | |-IntegerLiteral 0x10304b6d0 <line:75:7> 'int' 2
    |   | |-<<<NULL>>>
    |   | `-BreakStmt 0x10304b728 <line:76:3>
    |   |-CaseStmt 0x10304b758 <line:77:2, line:78:8>
    |   | |-IntegerLiteral 0x10304b738 <line:77:7> 'int' 3
    |   | |-<<<NULL>>>
    |   | `-GotoStmt 0x10304b790 <line:78:3, col:8> 'label' 0x10304b4f0
    |   |-CaseStmt 0x10304b7c8 <line:79:2, line:81:6>
    |   | |-IntegerLiteral 0x10304b7a8 <line:79:7> 'int' 4
    |   | |-<<<NULL>>>
    |   | `-DefaultStmt 0x10304b848 <line:80:2, line:81:6>
    |   |   `-UnaryOperator 0x10304b828 <col:3, col:6> 'int' postfix '++'
    |   |     `-DeclRefExpr 0x10304b800 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |   `-UnaryOperator 0x10304b890 <line:82:3, col:6> 'int' postfix '--'
    |     `-DeclRefExpr 0x10304b868 <col:3> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    |-DeclStmt 0x10304baa8 <line:85:2, col:26>
    | `-VarDecl 0x10304ba50 <col:2, col:25> array 'int [100][100][100]'
    |-BinaryOperator 0x10304bca0 <line:86:2, col:24> 'int' lvalue '='
    | |-DeclRefExpr 0x10304bac0 <col:2> 'int' lvalue Var 0x1030490b0 'sum' 'int'
    | `-ImplicitCastExpr 0x10304bc88 <col:8, col:24> 'int' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x10304bc60 <col:8, col:24> 'int' lvalue
    |     |-ImplicitCastExpr 0x10304bc48 <col:8, col:20> 'int *' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0x10304bc00 <col:8, col:20> 'int [100]' lvalue
    |     |   |-ImplicitCastExpr 0x10304bbe8 <col:8, col:16> 'int (*)[100]' <ArrayToPointerDecay>
    |     |   | `-ArraySubscriptExpr 0x10304bb70 <col:8, col:16> 'int [100][100]' lvalue
    |     |   |   |-ImplicitCastExpr 0x10304bb58 <col:8> 'int (*)[100][100]' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x10304bae8 <col:8> 'int [100][100][100]' lvalue Var 0x10304ba50 'array' 'int [100][100][100]'
    |     |   |   `-IntegerLiteral 0x10304bb10 <col:14> 'int' 10
    |     |   `-IntegerLiteral 0x10304bb98 <col:18> 'int' 10
    |     `-IntegerLiteral 0x10304bc28 <col:22> 'int' 10
    `-ReturnStmt 0x10304bce8 <line:88:2, col:9>
      `-IntegerLiteral 0x10304bcc8 <col:9> 'int' 0
