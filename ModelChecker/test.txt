TranslationUnitDecl 0x1028254d0 <<invalid sloc>>
|-TypedefDecl 0x102825a10 <<invalid sloc>> __int128_t '__int128'
|-TypedefDecl 0x102825a70 <<invalid sloc>> __uint128_t 'unsigned __int128'
|-TypedefDecl 0x102825e30 <<invalid sloc>> __builtin_va_list '__va_list_tag [1]'
|-VarDecl 0x102825f00 <./test.cpp:1:1, col:23> staVar 'char [100]' static
|-VarDecl 0x102825f70 <line:2:1, col:15> globVar 'int'
| `-IntegerLiteral 0x102825fc8 <col:15> 'int' 0
|-FunctionDecl 0x1028260c0 <line:4:1, line:6:1> increment 'int (int)'
| |-ParmVarDecl 0x102826000 <line:4:15, col:19> value 'int'
| `-CompoundStmt 0x1028261e8 <col:26, line:6:1>
|   `-ReturnStmt 0x1028261c8 <line:5:2, col:11>
|     `-ImplicitCastExpr 0x1028261b0 <col:9, col:11> 'int' <LValueToRValue>
|       `-UnaryOperator 0x102826190 <col:9, col:11> 'int' lvalue prefix '++'
|         `-DeclRefExpr 0x102826168 <col:11> 'int' lvalue ParmVar 0x102826000 'value' 'int'
|-FunctionDecl 0x1028725a0 <line:8:1, line:10:1> increment 'void (int &, int)'
| |-ParmVarDecl 0x102872460 <line:8:16, col:21> value 'int &'
| |-ParmVarDecl 0x1028724d0 <col:28, col:32> steps 'int'
| `-CompoundStmt 0x1028726f0 <col:39, line:10:1>
|   `-CompoundAssignOperator 0x1028726b8 <line:9:2, col:11> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     |-DeclRefExpr 0x102872650 <col:2> 'int' lvalue ParmVar 0x102872460 'value' 'int &'
|     `-ImplicitCastExpr 0x1028726a0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102872678 <col:11> 'int' lvalue ParmVar 0x1028724d0 'steps' 'int'
|-FunctionDecl 0x1028727a0 <line:12:1, line:14:1> self 'int (int)'
| |-ParmVarDecl 0x102872720 <line:12:10, col:14> value 'int'
| `-CompoundStmt 0x1028728a8 <col:21, line:14:1>
|   `-ReturnStmt 0x102872888 <line:13:2, col:9>
|     `-ImplicitCastExpr 0x102872870 <col:9> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x102872848 <col:9> 'int' lvalue ParmVar 0x102872720 'value' 'int'
`-FunctionDecl 0x102872b30 <line:16:1, line:89:1> main 'int (int, char **)'
  |-ParmVarDecl 0x1028728e0 <line:16:10, col:14> argc 'int'
  |-ParmVarDecl 0x102872a20 <col:20, col:31> argv 'char **':'char **'
  `-CompoundStmt 0x102873d28 <col:34, line:89:1>
    |-DeclStmt 0x102873068 <line:17:2, col:69>
    | `-VarDecl 0x102872c30 <col:2, col:68> arr 'int [14]'
    |   `-InitListExpr 0x102872ef8 <col:14, col:68> 'int [14]'
    |     |-IntegerLiteral 0x102872c88 <col:16> 'int' 22
    |     |-IntegerLiteral 0x102872ca8 <col:20> 'int' 34
    |     |-IntegerLiteral 0x102872cc8 <col:24> 'int' 3
    |     |-IntegerLiteral 0x102872ce8 <col:27> 'int' 32
    |     |-IntegerLiteral 0x102872d08 <col:31> 'int' 82
    |     |-IntegerLiteral 0x102872d28 <col:35> 'int' 55
    |     |-IntegerLiteral 0x102872d48 <col:39> 'int' 89
    |     |-IntegerLiteral 0x102872d68 <col:43> 'int' 50
    |     |-IntegerLiteral 0x102872d88 <col:47> 'int' 37
    |     |-IntegerLiteral 0x102872da8 <col:51> 'int' 5
    |     |-IntegerLiteral 0x102872dc8 <col:54> 'int' 64
    |     |-IntegerLiteral 0x102872de8 <col:58> 'int' 35
    |     |-IntegerLiteral 0x102872e08 <col:62> 'int' 9
    |     `-IntegerLiteral 0x102872e28 <col:65> 'int' 70
    |-DeclStmt 0x102873108 <line:18:2, col:14>
    | `-VarDecl 0x102873090 <col:2, col:12> len 'int'
    |   `-IntegerLiteral 0x1028730e8 <col:12> 'int' 14
    |-DeclStmt 0x102873288 <line:19:2, col:16>
    | |-VarDecl 0x102873130 <col:2, col:6> i 'int'
    | |-VarDecl 0x1028731a0 <col:2, col:9> j 'int'
    | `-VarDecl 0x102873210 <col:2, col:12> temp 'int'
    |-DeclStmt 0x102873328 <line:20:2, col:13>
    | `-VarDecl 0x1028732b0 <col:2, col:12> sum 'int'
    |   `-IntegerLiteral 0x102873308 <col:12> 'int' 0
    |-BinaryOperator 0x1028734c8 <line:21:2, col:21> 'int' lvalue '='
    | |-DeclRefExpr 0x102873340 <col:2> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    | `-CallExpr 0x102873480 <col:8, col:21> 'int'
    |   |-ImplicitCastExpr 0x102873468 <col:8> 'int (*)(int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x102873410 <col:8> 'int (int)' lvalue Function 0x1028260c0 'increment' 'int (int)'
    |   `-ImplicitCastExpr 0x1028734b0 <col:18> 'int' <LValueToRValue>
    |     `-DeclRefExpr 0x1028733c8 <col:18> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |-ForStmt 0x102873898 <line:22:2, line:29:2>
    | |-DeclStmt 0x102873578 <line:22:7, col:16>
    | | `-VarDecl 0x102873500 <col:7, col:15> i 'int'
    | |   `-IntegerLiteral 0x102873558 <col:15> 'int' 0
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | `-CompoundStmt 0x102873860 <col:20, line:29:2>
    |   |-CompoundAssignOperator 0x1028735f8 <line:23:3, col:10> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    |   | |-DeclRefExpr 0x102873590 <col:3> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |   | `-ImplicitCastExpr 0x1028735e0 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x1028735b8 <col:10> 'int' lvalue Var 0x102873500 'i' 'int'
    |   |-IfStmt 0x1028736c8 <line:24:3, line:25:4>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x102873690 <line:24:7, col:12> '_Bool' '=='
    |   | | |-ImplicitCastExpr 0x102873678 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x102873630 <col:7> 'int' lvalue Var 0x102873500 'i' 'int'
    |   | | `-IntegerLiteral 0x102873658 <col:12> 'int' 8
    |   | |-BreakStmt 0x1028736b8 <line:25:4>
    |   | `-<<<NULL>>>
    |   |-IfStmt 0x102873790 <line:26:3, line:27:4>
    |   | |-<<<NULL>>>
    |   | |-BinaryOperator 0x102873758 <line:26:7, col:11> '_Bool' '<'
    |   | | |-ImplicitCastExpr 0x102873740 <col:7> 'int' <LValueToRValue>
    |   | | | `-DeclRefExpr 0x1028736f8 <col:7> 'int' lvalue Var 0x102873500 'i' 'int'
    |   | | `-IntegerLiteral 0x102873720 <col:11> 'int' 8
    |   | |-ContinueStmt 0x102873780 <line:27:4>
    |   | `-<<<NULL>>>
    |   `-CompoundAssignOperator 0x102873828 <line:28:3, col:10> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |     |-DeclRefExpr 0x1028737c0 <col:3> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    |     `-ImplicitCastExpr 0x102873810 <col:10> 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x1028737e8 <col:10> 'int' lvalue Var 0x102873500 'i' 'int'
    |-DeclStmt 0x102873a98 <line:85:2, col:26>
    | `-VarDecl 0x102873a40 <col:2, col:25> array 'int [100][100][100]'
    |-BinaryOperator 0x102873cc0 <line:86:2, col:24> 'int' lvalue '='
    | |-DeclRefExpr 0x102873ab0 <col:2> 'int' lvalue Var 0x1028732b0 'sum' 'int'
    | `-ImplicitCastExpr 0x102873ca8 <col:8, col:24> 'int' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x102873c80 <col:8, col:24> 'int' lvalue
    |     |-ImplicitCastExpr 0x102873c68 <col:8, col:20> 'int *' <ArrayToPointerDecay>
    |     | `-ArraySubscriptExpr 0x102873bf0 <col:8, col:20> 'int [100]' lvalue
    |     |   |-ImplicitCastExpr 0x102873bd8 <col:8, col:16> 'int (*)[100]' <ArrayToPointerDecay>
    |     |   | `-ArraySubscriptExpr 0x102873b60 <col:8, col:16> 'int [100][100]' lvalue
    |     |   |   |-ImplicitCastExpr 0x102873b48 <col:8> 'int (*)[100][100]' <ArrayToPointerDecay>
    |     |   |   | `-DeclRefExpr 0x102873ad8 <col:8> 'int [100][100][100]' lvalue Var 0x102873a40 'array' 'int [100][100][100]'
    |     |   |   `-IntegerLiteral 0x102873b00 <col:14> 'int' 10
    |     |   `-IntegerLiteral 0x102873b88 <col:18> 'int' 10
    |     `-IntegerLiteral 0x102873c18 <col:22> 'int' 10
    `-ReturnStmt 0x102873d08 <line:88:2, col:9>
      `-IntegerLiteral 0x102873ce8 <col:9> 'int' 0
