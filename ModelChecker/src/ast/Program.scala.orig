package ast

import cfg.GraphNode
import util.MutableMapView

class Program {
    type MMV = MutableMapView[String,Decl]
    val declarations: MMV = MutableMapView()
    
}

abstract class ProgramNode {
    private[this] var _codeRange: Option[CodeRange] = None
    private[this] var _id       : Option[Long]      = None
    
    def codeRange                     = _codeRange
    def codeRange_=(range: CodeRange) = _codeRange = Some(range)
    
    def id             = _id
    def id_=(id: Long) = _id = Some(id)
}
object ProgramNode {
<<<<<<< HEAD
    def apply(node: ProgramNode, codeRange: CodeRange) = node.codeRange = codeRange
    def apply(node: ASTNode) = node match {
        case ConcreteASTNode(depth,ofType,id,pos,data) => 
            val instance: ProgramNode = ofType match {
                case "DeclRefExpr"       => new CompoundStmt
                case "IntegerLiteral"    => new Litteral(data.split(" ").last)
            }
            instance.codeRange_=(pos)
            instance
//        case NullASTNode =>
//        case OtherASTNode =>
    }
=======
    def apply(node: ProgramNode, codeRange: CodeRange, id: Long) = { node.codeRange = codeRange; node.id = id }
>>>>>>> de71856241f6cbca3a117d52f871c2fc301e3fe4
}