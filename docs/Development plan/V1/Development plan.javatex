 packages ##
fontenc[T1]
color
amssymb
pdfpages
amsmath
eurosym
graphicx
textcomp
listings
epigraph
longtable
setspace
array
gensymb
tikz
background[some]
geometry
babel[francais]
##
 commands ##
##
 documentSettings ##
documentClass=report
alinea=4mm
chapterName=Part
##
 title[titlePage.projet-merouTemplate] ##
date=January $29^{th}$ 2015
vertical_strip_color=1.00,0.50,0.50
first_author_info=Fabien \textsc{Sauce}
ref=model-checking.dev-plan
first_author_name=Zohour \textsc{Abouakil} ~\\ Sofia \textsc{Boutahar} ~\\ David \textsc{Courtinot} ~\\ Xiaowen \textsc{Ji} ~\\ Fabien \textsc{Sauce}
horizontal_strip_color=0.70,0.10,0.10
title_size=0.7
sup_strip_color=0.70,0.70,0.70
description=\textbf{Reference} : model-checking.dev-plan ~\\
inf_strip_color=0.00,0.00,0.00
title=Development plan - Version 2
description_size=1.2
##
> chapter ##
Project description and objectives
##
    >> section ##
    Surroundings of the project
    ##  
        >>> paragraph ##
        To get our ENSEEIHT engineering diploma, it is indispensable to realise a long project that gather together five students to work on a common project. 
        ##
        >>> paragraph ##
        The project started at January 19, and last eight week. At the end of the project we have to cross a defense in front of a jury who will evaluate our work in different aspects :
        ##  
        >>> list ##
        Project management and organization ; 
        Technical accomplishment ;
        Report and defense presentation ; 
        English evaluation          
        ##
        >>> paragraph ##
        In the course of the project, we have to satisfy client requirements and deliver at the end of the project a product suit their expectations. Further all over the two months, we are supervised by an Mr. Jean-Francois COIFFIN.  
        The subject that we work on was chosen by Mr. David Doose and Mr. Julien Brunel two researchers at Aerospace Lab ONERA. They are working on robot development using C++ language. This is why they need checking tools to verify some property on their embedded code. Their are already a product that do the same job like Coccinelle. However, Coccinelle was made basically to check pattern in C code. 
        ##

        >>> paragraph ##
        We choose to work on that project because of the originality of the subject, since it is mixing theories computer science and technical advanced principles.
        Otherwise, studying model checking and temporal logic to verify properties on code was a topic that we studied on ENSEEIHT courses. This project is an opportunity to apply this theory and go further on it.
        ##
    
    >> section ##
    Project description
    ##
        >>> subsection ##
        Main idea  
        ##
            >>>> paragraph ##
            The client is waiting for a prototype that allow a research of pattern on a C++ code. What can be useful to check and verify properties on it.              
            ##

        >>> subsection ##
        Project parts
        ##
            >>>> paragraph ##
            The project can be divided into two principals parts : 
            ##
            >>>> list ##
            Parser : getting the C++ code and transform it to a data structure -graph- that can be studied  ;
		    Model checking algorithm : this algorithm take a propriety to check and try to find the node of the graph that verify it.  
            ##
            >>>> paragraph ##
            After realizing both parts separately, we have to mix them : this is the last product. 
            ## 
            >>>> paragraph ##
            The following graph display the main step in our project. 
            ##
            >>>> image ##
            data/tasks;
		    Project part;
		    0.7
            ##

            >>>> paragraph ##
            Orange part is an extension of the project. It is an optional part.
            ##

        >>> subsection ##
        Related technologies
        ##
            >>>> paragraph ##
            To simplify the C++ code parsing we can use an intermediate tool : Clang. Witch is a compiler front end for C, C++, Objective-C and Objective-C++ programming languages developed by Apple. It take a C++ file as entrance and deliver a now AST file.  
            ##
      



        >> section ##
        Final project
        ##
>>> subsection ##
Deliverable documents and define priorities
##
>>>> paragraph ##
Deliverables expected (and priority) are:
##
>>>> list ##
implementation of a parser for the AST generated by Clang;
a conversion from AST to a Scala model representation of the code in terms of graph
control flux;
independently of the two preceding items , algorithms for the analysis of temporal logic properties on some control flow graphs;
adding to the previous item some quantifier such as " exists"
##
>>>> paragraph ##
The following extensions can be added afterwards:
##
>>>> list ##
unfolding function calls on a given depth;
creating a user language to interface with the system
##
> chapter ##
Project organization
##
>> section ##
Role definition
##
>>> subsubsection ##
Project manager
##
>>>> paragraph ##
The project manager is primarily concerned about trade and communications with the industrial and 
customers . It has a leading role in the organization of static tasks.
##
>>> subsubsection ##
Supervisor
##
>>>> paragraph ##
The supervisor has a global view of the project technically . It ensures the advancement
simultaneous tasks and can rearrange groups and objectives in case of unforeseen. 
The supervisor can participate in writing the code or documentation but
it is not its primary function . He can change from one week to anther.
##
>>> subsubsection ##
Quality manager
##
>>>> paragraph ##
The quality manager handles good programming rules and ensure that they are followed
 by developers. Any product code will pass under the watchful eye of the Quality
before being validated . It also ensures the quality and consistency of all documents produced by
the team. He is the only one able to push content on the repository (Github), or authorize a member
 to push.
##
>>> subsubsection ##
Test manager
##
>>>> paragraph ##
The test manager is responsible for validation testing in global environment
written by programmers (each programmer has its own set of unit tests). He doesn't only run tests,
he also determines whether the tests are complete or not.
##
>>> subsubsection ##
Configuration manager
##
>>>> paragraph ##
Configuration Manager should take care of every tools we are going to use. Make some choice about which tools are better than other. 
In particular he will handle the installation and the follow up of a version tool as Github for example.
##
>>> subsubsection ##
Chain development
##
>>>> image ##
data/cycle_qualite;
		Schéma descriptif de la chaîne de développement;
		0.7
##
>> section ##
Development organisation
##
>>> paragraph ##
To secure our evolution we can use :
##
>>> subsection ##
Usage of Scrum method
##
>>>> paragraph ##
We will try to use Scrum method, which is actually widely used, and 
recognised for its effectiveness. At first, we will define a 
\textit{product backlog} containing all desired functionalities in 
the final product. In fact, this report is also a part of \textit{product backlog}. 
Next, we will divide the project into three \textit{sprints} (which means 
iterations). A \textit{sprint backlog} is defined for each \textit{sprint}, 
including all we need to realise at the end of an iteration. Each 
\textit{sprint} lasts two weeks and lies in improve the software 
incrementally, so that it is close to \textit{product backlog}.
##
>>>> paragraph ##
At the end of each \textit{sprint}, we will organise a meeting, in order to 
review the progress and propose improvements or modifications of planning,
 but in the process of a \textit{sprint}, we cannot modify the \textit{sprint backlog}. 
At last, each day starts with a \textit{scrum meeting}, on the meeting, each 
team member present his objective of the day and his actual difficulties.
##
>>> subsection ##
Team repartition approach
##
>>>> paragraph ##
We will use an approach inspired by the XP (extreme programming) method. 
In fact, we found it unnecessary that the team members work separately, 
and we found it excellent to work in pairs, in order to prevent errors and bias 
of the program structure, so that we can save times of testing and debugging. 
So four of us work in pairs and the last one works individually. The group 
will changes as the tasks are completed.
##
>> section ##
Tasks organisation
##
>>> subsection ##
Tasks definition
##
>>>> paragraph ##
Sprint 1 backlog:
##
>>>> list ##
AST parsing of procedure C++ code;
CFG conversion from parsed AST;
Model checking with simple properties;
##
>>>> paragraph ##
Sprint 2 backlog:
##
>>>> list ##
AST parsing of object oriented C++ code;
CFG conversion from parsed AST;
Model checking with simple criteria;
##
>>>> paragraph ##
Improved CFG conversion from parsed AST;
Model checking with complex criteria;
##
>>> subsection ##
Planning
##
>>>> latex ##
\includepdf[landscape=true,pages={1}]{data/planning.pdf}
##
> chapter ##
Risk management
##
>> paragraph ##

##
>> latex ##
%\includepdf[landscape=true,pages={1}]{data/risks.png}
%\newgeometry{left=1.5cm,,right=1.5cm}
##
>> image ##
data/risks.png;
Analyse des risques;
0.5
##
> chapter ##
Code and documentation management
##
>> section ##
Quality management
##
>>> subsection ##
Automated coding style checks
##
>>>> paragraph ##
For ensuring that our coding rules are respected and evaluate the quality of our sources, we have
used a tool called \textit{Scalastyle} that enables, using an easy-to-use xml configuration file, to check
some properties on a Scala code. Combined with a specific pulgin, this can be use to generate warnings or errors
in the IDE the developer is using. Our settings are the following :
##
>>>> latex ##
%\newgeometry{left=1.5cm,,right=1.5cm}
\renewcommand{\arraystretch}{1.2}
\begin{center}
\begin{longtable}{|l|l|l|}
\hline
\textbf{Rule} & \textbf{Description} & \textbf{Value}  \\
\hline
FileLengthChecker & \small{Check the number of lines in a file} & 1500  \\
\hline
FileLineLengthChecker & \small{Check the number of characters in a line} & 140 \\
\hline
FileTabChecker & \small{Check that there are no tabs in a file} & enabled \\
\hline
ClassNamesChecker & \small{Check that class names match a regular}  & \^ [A-Z][A-a-z]*\$ \\
& \small{expression} & \\
\hline
\small{ClassTypeParameterChecker} & \small{Checks that type parameter to a class matches a} & \^[A-Z\_]\$ \\
& regular expression & \\
\hline
FileTabChecker & \small{Check that there are no tabs in a file} & enabled \\
\hline
\small{CyclomaticComplexityChecker} & \small{Checks that the cyclomatic complexity of a method} & 12 \\
&  \small{does exceed a value} & \\
\hline
EmptyClassChecker & \small{If a class/trait has no members, the braces are} & enabled \\
&  \small{unnecessary} & \\
\hline
\small{EqualsHashCodeChecker} & \small{Check that if a class implements either equals} & enabled \\ 
 & \small{or hashCode, it should implement the other} & \\
\hline
MagicNumberChecker & \small{Checks for use of magic numbers instead of} & ignore = -1, 0, 1 \\
& \small{constants (safer)} & \\
\hline
MethodLengthChecker & \small{Checks that methods do not exceed a maximum} & 50 \\
& \small{length} & \\
\hline
MethodNamesChecker & \small{Check that method names match a regular} & \^[a-z][A-Za-z0-9]*(\_=)?\$ \\
\tiny{.} & \small{expression} & \\
\hline
\small{MultipleStringLiteralsChecker} & \small{Checks that a string literal does not appear} & allowed = 2 \\
& \small{multiple times} & \\
\hline
\small{NotImplementedErrorUsage} & \small{Checks that the code does not have ??? operators} & enabled \\
\hline
NullChecker & \small{Check that null is not used} & enabled \\
\hline
\small{NumberOfMethodsInTypeChecker} & \small{Check that a class/trait/object does not have too} & maxMethods = 30 \\
& \small{many methods} & \\
\hline
NumberOfTypesChecker & \small{Checks that there are not too many types} & maxTypes = 20 \\
& \small{declared in a file} & \\
\hline
ObjectNamesChecker & \small{Check that object names match a regular}  & \^[A-Z][A-Za-z]*\$ \\
& \small{expression} & \\
\hline
ParameterNumberChecker & \small{Maximum number of parameters for a method} & maxParameters = 5 \\
\hline
RedundantIfChecker & \small{Checks that if expressions are not redundant, ie} & enabled \\
& \small{easily replaced by a variant of the condition} &  \\
\hline
ScalaDocChecker & \small{Checks that the ScalaDoc on documentable}  & enabled \\
& \small{members is well-formed} & \\
\hline
\end{longtable} 
\end{center}
% \restoregeometry
\renewcommand{\arraystretch}{1}
##
>>> subsection ##
Verification by pair
##
>>>> paragraph ##
As we have opted for an XP model for the programming aspect of the project,
we consider that a code has passed the quality test if at least the two members of a pair
have checked it. This is up to the quality manager to ensure this has been done, otherwise he
should do it himself.
##
>>>> paragraph ##
This is specific to the code quality checks and does not apply to the rest of the delivrable documents.
##
>> section ##
Test strategy
##
>>> paragraph ##

##
>> section ##
Configuration management
##
>>> paragraph ##
All the delivrable documents are managed on a git repository, including documentation and reports.
Anyone is allowed to commit at anytime, however any push must have been authorized by the quality responsible after the code
has been thoroughly tested against a set of tests by the test responsible.
##
> chapter ##
Appendices
##