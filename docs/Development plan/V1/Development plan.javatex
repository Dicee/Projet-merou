 packages ##
fontenc[T1]
color
amssymb
pdfpages
amsmath
eurosym
graphicx
textcomp
listings
epigraph
longtable
setspace
array
gensymb
tikz
background[some]
geometry
babel[francais]
##
 commands ##
##
 documentSettings ##
documentClass=report
alinea=4mm
chapterName=Part
##
 title[titlePage.bicolorHeaderTemplate] ##
date=23 Janvier 2015
vertical_strip_color=1.00,0.50,0.50
first_author_info=Fabien \textsc{Sauce}
first_author_name=Zohour \textsc{Abouakil} ~\\ Sofia \textsc{Boutahar} ~\\ David \textsc{Courtinot} ~\\ Xiaowen \textsc{Ji} ~\\ Fabien \textsc{Sauce}
horizontal_strip_color=0.70,0.10,0.10
title_size=0.7
sup_strip_color=0.70,0.70,0.70
description=Recherche de motifs dans un code C++ à l'aide de la logique temporelle
inf_strip_color=0.00,0.00,0.00
title=Development plan
description_size=1.2
##
> latex ##

##
> chapter ##
Project description and objectives test test
##
>> section ##
Surroundings of the project
##
>>> paragraph ##
Le projet long à l'ENSEEIHT
	Organisation du projet
##
>>> paragraph ##
Le client c est qui ?? Les noms, leurs fonctions, les motivations du projet
##
>>> paragraph ##
Nos motivations -- pas sur
##
>> section ##
Project description
##
>>> subsection ##
Main idea
##
>>> subsection ##
Related technologies
##
>>> list ##
Coccinelle ;
		Clang;
##
>>> subsection ##
Project parts
##
>>> list ##
Parser ;
		CTL;
		Model checking;
##
>>> subsection ##
To conclude
##
>> section ##
Final project
##
>>> subsection ##
Define priorities
##
>>> subsection ##
Deliverable documents
##
> chapter ##
Project organization
##
>> section ##
Role definition
##
>>> subsubsection ##
Project manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Quality manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Test manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Test manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Configuration manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Documentation manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Chain development
##
>>>> image ##
data/cycle_qualite;
		Schéma descriptif de la chaîne de développement;
		0.7
##
>> section ##
Development organisation
##
>>> paragraph ##
To secure our evolution we can use :
##
>>> subsection ##
Usage of Scrum method
##
>>>> paragraph ##
We will try to use Scrum method, which is actually widely used, and 
recognised for its effectiveness. At first, we will define a 
\textit{product backlog} containing all desired functionalities in 
the final product. In fact, this report is also a part of \textit{product backlog}. 
Next, we will divide the project into three \textit{sprints} (which means 
iterations). A \textit{sprint backlog} is defined for each \textit{sprint}, 
including all we need to realise at the end of an iteration. Each 
\textit{sprint} lasts two weeks and lies in improve the software 
incrementally, so that it is close to \textit{product backlog}.
##
>>>> paragraph ##
At the end of each \textit{sprint}, we will organise a meeting, in order to 
review the progress and propose improvements or modifications of planning,
 but in the process of a \textit{sprint}, we cannot modify the \textit{sprint backlog}. 
At last, each day starts with a \textit{scrum meeting}, on the meeting, each 
team member present his objective of the day and his actual difficulties.
##
>>> subsection ##
Team repartition approach
##
>>>> paragraph ##
We will use an approach inspired by the XP (extreme programming) method. 
In fact, we found it unnecessary that the team members work separately, 
and we found it excellent to work in pairs, in order to prevent errors and bias 
of the program structure, so that we can save times of testing and debugging. 
So four of us work in pairs and the last one works individually. The group 
will changes as the tasks are completed.
##
>> section ##
Tasks organisation
##
>>> subsection ##
Tasks definition
##
>>>> paragraph ##
Sprint 1 backlog:
##
>>>> list ##
AST parsing of procedure C++ code;
CFG conversion from parsed AST;
Model checking with simple properties;

##
>>>> paragraph ##
Sprint 2 backlog:
##
>>>> list ##
AST parsing of object oriented C++ code;
CFG conversion from parsed AST;
Model checking with simple criteria;

##
>>>> paragraph ##
Improved CFG conversion from parsed AST;
Model checking with complex criteria;
##
>>> subsection ##
Planning
##
>>>> latex ##
\includepdf[landscape=true,pages={1}]{data/planning.pdf}
##
> chapter ##
Risk management
##
>> latex ##
%\includepdf[landscape=true,pages={1}]{data/risks.png}
%\newgeometry{left=1.5cm,,right=1.5cm}
##
>> image ##
data/risks.png;
Analyse des risques;
0.5
##
> chapter ##
Code management
##
>> section ##
Quality management
##
>>> subsection ##
Automated coding style checks
##
>>>> paragraph ##
For ensuring that our coding rules are respected and evaluate the quality of our sources, we have
used a tool called \textit{Scalastyle} that enables, using an easy-to-use xml configuration file, to check
some properties on a Scala code. Combined with a specific pulgin, this can be use to generate warnings or errors
in the IDE the developer is using. Our settings are the following :
##
>>>> latex ##
%\newgeometry{left=1.5cm,,right=1.5cm}
\renewcommand{\arraystretch}{1.2}
\begin{center}
\begin{longtable}{|l|l|l|}
\hline
\textbf{Rule} & \textbf{Description} & \textbf{Value}  \\
\hline
FileLengthChecker & \small{Check the number of lines in a file} & 1500  \\
\hline
FileLineLengthChecker & \small{Check the number of characters in a line} & 140 \\
\hline
FileTabChecker & \small{Check that there are no tabs in a file} & enabled \\
\hline
ClassNamesChecker & \small{Check that class names match a regular}  & \^ [A-Z][A-a-z]*\$ \\
& \small{expression} & \\
\hline
\small{ClassTypeParameterChecker} & \small{Checks that type parameter to a class matches a} & \^[A-Z\_]\$ \\
& regular expression & \\
\hline
FileTabChecker & \small{Check that there are no tabs in a file} & enabled \\
\hline
\small{CyclomaticComplexityChecker} & \small{Checks that the cyclomatic complexity of a method} & 12 \\
&  \small{does exceed a value} & \\
\hline
EmptyClassChecker & \small{If a class/trait has no members, the braces are} & enabled \\
&  \small{unnecessary} & \\
\hline
\small{EqualsHashCodeChecker} & \small{Check that if a class implements either equals} & enabled \\ 
 & \small{or hashCode, it should implement the other} & \\
\hline
MagicNumberChecker & \small{Checks for use of magic numbers instead of} & ignore = -1, 0, 1 \\
& \small{constants (safer)} & \\
\hline
MethodLengthChecker & \small{Checks that methods do not exceed a maximum} & 50 \\
& \small{length} & \\
\hline
MethodNamesChecker & \small{Check that method names match a regular} & \^[a-z][A-Za-z0-9]*(\_=)?\$ \\
\tiny{.} & \small{expression} & \\
\hline
\small{MultipleStringLiteralsChecker} & \small{Checks that a string literal does not appear} & allowed = 2 \\
& \small{multiple times} & \\
\hline
\small{NotImplementedErrorUsage} & \small{Checks that the code does not have ??? operators} & enabled \\
\hline
NullChecker & \small{Check that null is not used} & enabled \\
\hline
\small{NumberOfMethodsInTypeChecker} & \small{Check that a class/trait/object does not have too} & maxMethods = 30 \\
& \small{many methods} & \\
\hline
NumberOfTypesChecker & \small{Checks that there are not too many types} & maxTypes = 20 \\
& \small{declared in a file} & \\
\hline
ObjectNamesChecker & \small{Check that object names match a regular}  & \^[A-Z][A-Za-z]*\$ \\
& \small{expression} & \\
\hline
ParameterNumberChecker & \small{Maximum number of parameters for a method} & maxParameters = 5 \\
\hline
RedundantIfChecker & \small{Checks that if expressions are not redundant, ie} & enabled \\
& \small{easily replaced by a variant of the condition} &  \\
\hline
ScalaDocChecker & \small{Checks that the ScalaDoc on documentable}  & enabled \\
& \small{members is well-formed} & \\
\hline
\end{longtable} 
\end{center}
% \restoregeometry
\renewcommand{\arraystretch}{1}
##
>> section ##
Test strategy
##
>>> paragraph ##

##
>> section ##
Configuration management
##
>>> paragraph ##

##
> chapter ##
Appendices
##
