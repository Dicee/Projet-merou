 packages ##
fontenc[T1]
color
amssymb
pdfpages
amsmath
eurosym
graphicx
textcomp
listings
epigraph
setspace
array
gensymb
tikz
background[some]
geometry
babel[francais]
##
 commands ##
##
 documentSettings ##
documentClass=report
alinea=4mm
chapterName=Partie
##
 title[titlePage.bicolorHeaderTemplate] ##
date=23 Janvier 2015
vertical_strip_color=1.00,0.50,0.50
first_author_info=Fabien \textsc{Sauce}
first_author_name=Zohour \textsc{Abouakil} ~\\ Sofia \textsc{Boutahar} ~\\ David \textsc{Courtinot} ~\\ Xiaowen \textsc{Ji} ~\\ Fabien \textsc{Sauce}
horizontal_strip_color=0.70,0.10,0.10
title_size=0.7
sup_strip_color=0.70,0.70,0.70
description=Recherche de motifs dans un code C++ à l'aide de la logique temporelle
inf_strip_color=0.00,0.00,0.00
title=Development plan
description_size=1.2
##
> chapter ##
Project description and objectives test test
##
>> section ##
Surroundings of the project
##
>>> paragraph ##
Le projet long à l'ENSEEIHT
	Organisation du projet
##
>>> paragraph ##
Le client c est qui ?? Les noms, leurs fonctions, les motivations du projet
##
>>> paragraph ##
Nos motivations -- pas sur
##
>> section ##
Project description
##
>>> subsection ##
Main idea
##
>>> subsection ##
Related technologies
##
>>> list ##
Coccinelle ;
		Clang;
##
>>> subsection ##
Project parts
##
>>> list ##
Parser ;
		CTL;
		Model checking;
##
>>> subsection ##
To conclude
##
>> section ##
Final project
##
>>> subsection ##
Define priorities
##
>>> subsection ##
Deliverable documents
##
> chapter ##
Project organization
##
>> section ##
Role definition
##
>>> subsubsection ##
Project manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Quality manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Test manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Test manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Configuration manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Documentation manager
##
>>>> paragraph ##

##
>>> subsubsection ##
Chain development
##
>>>> image ##
data/cycle_qualite;
		Schéma descriptif de la chaîne de développement;
		0.7
##
>> section ##
Development organisation
##
>>> paragraph ##
To secure our evolution we can use :
##
>>> subsection ##
Usage of Scrum method
##
>>>> paragraph ##
We will try to use Scrum method, which is actually widely used, and 
recognised for its effectiveness. At first, we will define a 
\textit{product backlog} containing all desired functionalities in 
the final product. In fact, this report is also a part of \textit{product backlog}. 
Next, we will divide the project into three \textit{sprints} (which means 
iterations). A \textit{sprint backlog} is defined for each \textit{sprint}, 
including all we need to realise at the end of an iteration. Each 
\textit{sprint} lasts two weeks and lies in improve the software 
incrementally, so that it is close to \textit{product backlog}.
##
>>> subsection ##
Team repartition approach
##
>>>> paragraph ##

##
>> section ##
Tasks organisation
##
>>> subsection ##
Tasks definition
##
>>> subsection ##
Planning
##
>>>> latex ##
\includepdf[landscape=true,pages={1-2}]{data/planning.pdf}
##
> chapter ##
Risk management
##
>> latex ##
\includepdf[landscape=true,pages={1}]{data/risks.pdf}
##
> chapter ##
Code management
##
>> section ##
Quality management
##
>>> subsection ##
Automated coding style checks
##
>>>> paragraph ##
For ensuring that our coding rules are respected and evaluate the quality of our sources, we have
used a tool called \textit{Scalastyle} that enables, using an easy-to-use xml configuration file, to check
some properties on a Scala code. Combined with a specific pulgin, this can be use to generate warnings or errors
in the IDE the developer is using. Our settings can be found in appendix A.
##
>> section ##
Test strategy
##
>>> paragraph ##

##
>> section ##
Configuration management
##
>>> paragraph ##

##
> chapter ##
Appendices
##
