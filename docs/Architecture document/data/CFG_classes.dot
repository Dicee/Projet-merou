digraph {
	// nodes
	PN [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD><B><I>ProgramNode</I></B></TD></TR>
			<TR><TD>
				id: String
			</TD></TR>		
		</TABLE>
	>];	
	If [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>If</TD></TR>
			<TR><TD>
				cond: Expr <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];	 
	For [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>For</TD></TR>
			<TR><TD>
				cond: Expr <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];	
	While [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>While</TD></TR>
			<TR><TD>
				cond: Expr <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];	
	Expression [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>Expression</TD></TR>
			<TR><TD>
				expr: Expr <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];	
	Switch [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>Switch</TD></TR>
			<TR><TD>
				expr: Expr <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];	
	Statement [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>Statement</TD></TR>
			<TR><TD>
				stmt: Stmt <BR/>
				codeRange: CodeRange
			</TD></TR>		
		</TABLE>
	>];
	GraphNode [shape=none,label=<
		<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
			<TR><TD>GraphNode[T]</TD></TR>
			<TR><TD>
					value: T <BR/>
					states: Set[GraphNode[T]] <BR/>
					prev: Set[GraphNode[T]] <BR/>
					next: Set[GraphNode[T]] <BR/>
			</TD></TR>
			<TR><TD>
					bindNext(GraphNode[T]): GraphNode[T] <BR/>
					bindPrev(GraphNode[T]): GraphNode[T] <BR/>
					mkString: String <BR/>
			</TD></TR>		
		</TABLE>
	>];
	
	// links	
	If -> PN
	Expression -> PN
	Switch -> PN
	For -> PN
	While -> PN
	Statement -> PN
}